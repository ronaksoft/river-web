/*
    Creation Time: 2019 - Nov - 21
    Created by:  (hamidrezakk)
    Maintainers:
       1.  HamidrezaKK (hamidrezakks@gmail.com)
    Auditor: HamidrezaKK
    Copyright Ronak Software Group 2019
*/

import React from 'react';
import i18n from "../../services/i18n";
import ElectronService from "../../services/electron";
import {serverKeys} from "../../services/sdk/server";
import {C_LOCALSTORAGE} from "../../services/sdk/const";
import {
    FormLabel,
    FormControl,
    FormControlLabel,
    RadioGroup,
    Radio,
    Switch,
    DialogActions,
    Button,
    TextField,
    DialogContent,
    DialogTitle,
    Dialog
} from '@material-ui/core';
import {EventAuthError} from "../../services/events";

import './style.scss';

export const getWsServerUrl = () => {
    const serverMode: any = localStorage.getItem(C_LOCALSTORAGE.ServerMode) || 'prod';
    const isElectron = ElectronService.isElectron();
    if (!isElectron && window.location.host.indexOf('localhost') === -1) {
        return null;
    } else {
        if (serverMode === 'prod') {
            return 'edge.river.im';
        } else if (serverMode === 'dev') {
            return 'river.ronaksoftware.com';
        } else if (serverMode === 'other') {
            return localStorage.getItem(C_LOCALSTORAGE.WorkspaceUrl) || 'edge.river.im';
        }
    }
    return null;
};

export const getFileServerUrl = () => {
    const serverMode: any = localStorage.getItem(C_LOCALSTORAGE.ServerMode) || 'prod';
    const isElectron = ElectronService.isElectron();
    if (!isElectron && window.location.host.indexOf('localhost') === -1) {
        return null;
    } else {
        if (serverMode === 'prod') {
            return 'edge.river.im';
        } else if (serverMode === 'dev') {
            return 'river.ronaksoftware.com';
        } else if (serverMode === 'other') {
            return localStorage.getItem(C_LOCALSTORAGE.WorkspaceUrl) || 'edge.river.im';
        }
    }
    return null;
};

export const getServerKeys = () => {
    const serverMode: any = localStorage.getItem(C_LOCALSTORAGE.ServerMode) || 'prod';
    const isElectron = ElectronService.isElectron();
    const devKey = `{"PublicKeys":[{"N":"25118848897932282177245700919139384404750150099443051286420483958680932318999616785468117358656906868745535067114368253583642867447644069742034871690887327807641806393154362866814670869067082838910855582042571344627633847312858985989376011283293406446259224113424892885526467096873630090982411366060309228545939134187830467758087915442541333526473506224183662758369346162982899850891065845576237266688752908504452157782224543297742005937283247646798191769066825742717116948044645985042083938549757785369721749659525202291409273477753359658898944013607000873216784148319330165950486883420334054833644032847855482032509","FingerPrint":"7394918641852592645","E":65537},{"N":"21249707023259589828882625203572225674272580290693121144039064585772886999841963721536409526022282440843688128262657540061767032187088787519653928724034793475849047994789250487935742236267848935158291781289935130264092548463720489626032599455872076196089874292697176233901232972584747422218633150431148606115133786415925258966498648297190127103542990365765167875712382655400672904401808039905581013143219877381673335013417196709050371628383130063205039714231505438906188340348457944648916217683298881611185125570182541993037806056563338841286324689864878852103314733737724967696722326127563991449350826172408373703811","FingerPrint":"2363776248257911173","E":65537},{"N":"19863054550604193823488041727574907794553354963467193076917818924664132721754826665850220231906962083775008201369133561957397980133889912558248851951970519776044765817502621009587064784777693096628382835779877029866758294196797090656332977683146622524047322377443516436601239695252843413905686699399020467544689455363457822624449365145949732364643029028423685551893583641819962002723393831006146669077949073237542941080523176298527840258778842205532339989739100238320204236098210328490552190436163372996242056017356783361778247846127669138796572298996264305675423638602261670710374605191817283295227384113688431647741","FingerPrint":"-5099141843327820626","E":65537},{"N":"29760428901343664001028833309809794343544015677516397170674878601215588275791808212890742556162155895595827561470784507818927441382831252170628521332528557087987520295267196790927612592611029658149082172703008759671157419031039827342837361544291472718895472521013019716259483209354020921442127452371575891423820946699295605756004551833001279075974074080563224444666224932026454045362404382286378528513546737731664019469325785485757138817241905803574388304564238374420073230240484847573015947946433863321363117973803262320677243592635383550602155520291663476434998507275737426553598472331105536846460631682739989661219","FingerPrint":"2195174703119182464","E":65537},{"N":"18386064557489952286420347590296751434578282707405869816885958713299461000323959947566645042552856526031409640177153580413557456444169596581870998341797298680104080669684015732452983077686038078494582573312218274626467111808818429778886097765709133950743171507322894959330274463277504523606073120382446662040167960142274463155227517163276212205755835422067514615854827329645266346012533996475215453580382748104598835874268054865686479895544554797198146708876762174829892817477539609356506735917106650744544665071969880523400678780093929701726905569602897801522055926413967804403930759100613510462652269603976775523991","FingerPrint":"4479840379683382772","E":65537},{"N":"26856167804545448049290579564011023468588993763008293592188466181493624152203964999095367371420795128612430412472216110838073483063451607435345678606377899388181953712712568128395316210032734586003021350117744410467197964162932002685114458972873577239300798020981277258362899408637644884906090479440297628771615765991411446325782942661223836610577955450204097820932873841360326076035286707297809053813347011465715499268402698830927150083994456520884686861897089801285632944182913126283200633552976218386749841394603856739318115312415688232906365260846416122082293147230082963151578228644118548380817922335519702098503","FingerPrint":"8569728225196202638","E":65537},{"N":"25761140930539439978494783846660734379198950078321693758033663237052334640619530471139381746103855925800702484276297098648531198741474154475735948656994497481651905678934562912991440112672560383261093402078501161430697511324735371368031617819168590943786234823019615023005756998056375397284879696822974650961011580206091499395498399390492214337547240343451565823803753121080531070054153784629505452057439601601659807136850041526794231441222954424268629610149685990628010782230767695141965499949849652822543965784952473307155505095483489743547945382166911358040409429285318638614625039958145755691598575103601662635873","FingerPrint":"-3518366518126294391","E":65537},{"N":"21878729227264443273397917465852122220894317740032779776997968051790123215989999965841007199864479838712294015929085122553441217024812487754107081810828692874014089314153826066240729740923792526876590678500745479627405100598576824756706391682294987326965673261452172826182988573765370466024746236316548372296498943339682423467178382713458130758590318962795115037395346029561258543522802194745122834923204527595669724518557927046350328890508977160087250218063301295330767720877139867168393712617902052319906711468238632536228153728846644967777470083076472892276635992022186751494397742523839928248454129614564991083729","FingerPrint":"2842355922125748985","E":65537},{"N":"21657921575259117082437287735038824160972581974539609548491823065113660182941223450746616405735767608349485813933217527787805175774080112057626391016872155067405926907423276805486934732269185402251726464897721288759735238594916980944505711016119900765546002533418456991149932694983775618316688113269913087592812309102853747522924306054009231759094013878121201675566877636823973567095580198874586722886709122615656758634448002677386356379713382005231679191964292977504291853536019601586206944266621069762821758456214432463931452218289861680478993171959176435089862340125449068198909635604459895897355597575325195619933","FingerPrint":"-3702519902476465341","E":65537},{"N":"26560773297321496796638749735111859220513359531489936481661136779884784205625113812180402394116732738755028273755313585352103067809685809119858624584482833675871489309402205980675382020337358851404166618802304410342906475560595604118840081050808937188565007332779418031411195462315469094720417421137008865029869517973582341668257878628972653824064257107524501253937531889165608386214524613639093523758099418212998287757704077924182163275085135477703526566976609275979665583622386423029286172254415496073164236409043934726212766525195423766504808027467773836621258239588220853730478580185244315599773665364850566951753","FingerPrint":"-2599890069662518803","E":65537}],"DHGroups":[{"Prime":"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF","Gen":2,"FingerPrint":"-4978776997167059722"}]}`;
    const prodKey = `{"PublicKeys":[{"N":"20913223291527889119233489543906055280112509837587412661185920982237593240496621500246053217858650595488144806523401311528331511139252992855856813518497345344505399590363098661619422237284569106222214983121751303492636475445822018976936935004401602072312243314703942516120757238112686341093127753824993064279076257400574901873895078238314785888553089377070115461172373645253008887735180896472736642787127163985872009659554037832460691492308190061694931739102807895343609962750635334989849450478711810862430628358082816584190988339977461445911946142568113216063217954322553823203070174207897269755515928523084112873059","FingerPrint":"5256827074095888927","E":65537},{"N":"24601449109580800263575602719244220556844193972049411651243730611389642618789047193926765301420730235177708097487478276488676767866707806309988193525467657429453842509078430273826606510090990961015162218852663801640149694670873723530501191058425287452058581276342677903227618502302416571735716126606543778053856300081239503692274729372588074998105421604488386311327855031432779587679698508839165950747244378663186162462011360523558875495798239128637275903817138635858725314288117979005920359895539886782742831597388635615409600670231307375667388870799288823978759941816924424318598135820259093146459531531401987093371","FingerPrint":"-3665080486746452985","E":65537},{"N":"29037519206988095580349654044478080201468409306610249511158808722752195155795675154256160446114502258018735893500285501729113073584719490961728514529419096641168539303311022932388418345950560595643927705408466738651200049154464615717104037007926018184169286423472696378163988841412520775848138953171726039989784209314019029790406390988514780170851826599818729128080694537728808006688674712150769051804152045583446333938512979371454314679391320136812775434013731252387310491344166706757858271915461527688430048501940920226401681827518871908803537920342486095752075317165293207881325612277560970691252306287435109281437","FingerPrint":"-5727904056408655091","E":65537},{"N":"28404130232388988488012777944232278940771307026632764820200131292098369603247395396567150607975227873383261999432854390138612954791103320892121549025367781413583040768563139918578259416765680341441704574509421175788363641873783641882636245915165316465219546462797753314265383330236554371991421294763701117179530239331169824263304408082747862857578593946497331661906980680067560311006333109210930149955619451273813899285200288868512635418936418440831097051707587254144072133971213715893541979414857123752866113078500927925670858787526463052194236923234763595024284008141088895232619667951944370994316436085190999560873","FingerPrint":"-4814393832045667970","E":65537},{"N":"26873652173215910883420051230852226436491711609304648960374622866005972818191288385080472275095712137114669236706193912593465833734733555262974764408928300517376866667044747253370789896917293623090152158910625182874548926628681594355682169758762210538752197223506019447574307639630871660179586148544498817270440351178907033535815824911589249071963507622464550899630926663244468596707529957349392189547595412510626076348354663860273779205426878314053261642036135204781631603534077686043334105267827295434839461290385561208473162397060069074468796232085731685283340968637238286255453412905793421688931347830482397069557","FingerPrint":"7329014239262238678","E":65537},{"N":"25045304905763257078593908603619944991885603122991755491806249011377090555499696265611869693598056591729697235897618411818891942535244785676965847639990168012440245304575106425060851163625751816921480507216804249940329207489804416184574667043299260576823630324189559238880090883225404385875961341298670731489948631847718120461247251329462414313604441068382209529600132861323718291464684313850959979220909823760505393201505352668470857762717814368963865552842088148331252114564678339812094050334456949082215875662305409532242082927442304953850266256779114927648964818253273833528141899133017138923495373012296868655041","FingerPrint":"-4918162796432996034","E":65537},{"N":"23988352755389935512710903058627475663817182552105146554597976692161334023530131456793398242223865771435628963041513559505660437011932820218839549968723223891487071281293876068728718569948239908966490745590432810571755535921322325757805600319414650295192149230185249995154281336677472121658932479252452420612890755723842431920618303492199791045382922555224151248398603475627032014622427661967114819432186181958657972738432888273700490847535417110396797689811455025906621911795306595093746079079276433210274435985224949455468572759277344550530023542739021029003737667573332748022022776568195936335085539919207696753783","FingerPrint":"2980004172648781480","E":65537},{"N":"31022263347361152212178141820157968380691586491335529787121552589013923981655845826579570217132315613050144299233045785299481779402603249073727857868819287200470761887174779655309422910123478492103898554762034746615000602684478227380994645443035390385267787496497095678777756487880929019126914845352698853630354052858995507814341573593250024742249345189935266037517152363680030807149978096968087915710295175986583405341924844589211536487627091925651762842717297247470653414717589809460440972723621737411514997089767017696535816644167447556036698611916794590907018122471162761140425118476939484871782461877970705308753","FingerPrint":"-1597472268099396404","E":65537},{"N":"24204374603469954649672813598097946701591817801869695689812525206047244383392301156546375699412338406877341712089464721136715284171422816960672651225517438227272615815879585235466539490983192668769815192500780546764648136373192528179360336578088524149271225565182996356612042293197448432350670415315013606247392491261310334937381819334772753706450883678015565289916662187331049776677869880302965215208667666614772758408195675723269973113811161316891247146598231034430944786157622040339982894900079084792247129955140229025656149560696072186807352727137673824477491403179788800066515710737173151360985018971811489794127","FingerPrint":"4875397198518569092","E":65537},{"N":"23814179129899578331606582753299355656144165930230153287968180406935422402339782584965705387291154079833896394048874703006933143489652617160965756609437715497485614801832089026042094793784857449772712750743093960687042673347600086217056540788593785204999756034833560042602126265101375138189012194078643356567630028962699299543443933340055385105166332199098957854569691541990706770809474459860402392568059952579127858050013807926089794400884216192576282944829088336715183373675683752872702807487728270058665775478390723824975889628133674446177320392635524506285706408722653845688201085308189782196101117019501183135439","FingerPrint":"6116049530954070209","E":65537}],"DHGroups":[{"Prime":"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF","Gen":2,"FingerPrint":"-4978776997167059722"}]}`;
    const workspace = getWsServerUrl() || '';
    if (!isElectron && window.location.host.indexOf('localhost') === -1) {
        if (window.location.host.indexOf('ronaksoftware.com') > -1) {
            return devKey;
        }
    } else {
        if (serverMode === 'dev') {
            return devKey;
        } else if (serverMode === 'other') {
            const t = localStorage.getItem(C_LOCALSTORAGE.ServerKeys);
            if (!t && (workspace.indexOf('ronaksoftware.com') > -1 || workspace.indexOf('localhost') > -1 || (workspace === '' && window.location.host.indexOf('ronaksoftware.com') > -1))) {
                return devKey;
            } else {
                return t || '';
            }
        }
    }
    return prodKey;
};

interface IProps {
    className?: string;
}

interface IState {
    serverMode: 'prod' | 'dev' | 'other';
    debugServerKeys: string;
    electronLoadUrl: string;
    open: boolean;
    throttleInterval: number;
    url: string;
    verboseAPICall: boolean;
}

class DevTools extends React.Component<IProps, IState> {
    private electronService: ElectronService;
    private electronLoadUrl: string = '';
    private switchClasses: any = {
        checked: 'settings-switch-checked',
        root: 'settings-switch',
        switchBase: 'settings-switch-base',
        thumb: 'settings-switch-thumb',
        track: 'settings-switch-track',
    };

    constructor(props: IProps) {
        super(props);

        const serverMode: any = localStorage.getItem(C_LOCALSTORAGE.ServerMode) || 'prod';
        this.state = {
            debugServerKeys: localStorage.getItem(C_LOCALSTORAGE.ServerKeys) || serverKeys,
            electronLoadUrl: '',
            open: false,
            serverMode,
            throttleInterval: parseInt(localStorage.getItem(C_LOCALSTORAGE.DebugThrottleInterval) || '200', 10),
            url: localStorage.getItem(C_LOCALSTORAGE.WorkspaceUrl) || 'edge.river.im',
            verboseAPICall: localStorage.getItem(C_LOCALSTORAGE.DebugVerboseAPI) === 'true',
        };

        this.electronService = ElectronService.getInstance();
    }

    public componentDidMount() {
        if (ElectronService.isElectron()) {
            this.electronService.getLoadUrl().then((res) => {
                this.setState({
                    electronLoadUrl: res.url,
                });
                this.electronLoadUrl = res.url;
            });
        }
    }

    /* Open dialog */
    public open() {
        this.setState({
            open: true,
        });
    }

    public render() {
        const {open, url, throttleInterval, debugServerKeys, electronLoadUrl, verboseAPICall, serverMode} = this.state;
        return (
            <Dialog
                open={open}
                onClose={this.debugModeCloseHandler}
                className="confirm-dialog dev-tools-dialog"
                disableBackdropClick={true}
                classes={{
                    paper: 'confirm-dialog-paper'
                }}
            >
                <div>
                    <DialogTitle>{i18n.t('settings.debug_mode')}</DialogTitle>
                    <DialogContent>
                        <div style={{width: '300px'}}>
                            <FormControl component="fieldset">
                                <FormLabel component="legend">Server</FormLabel>
                                <RadioGroup row={true} name="position" value={serverMode}
                                            onChange={this.serverChangeHandler}>
                                    <FormControlLabel
                                        value="prod"
                                        control={<Radio color="primary"/>}
                                        label="Production"
                                        labelPlacement="end"
                                    />
                                    <FormControlLabel
                                        value="dev"
                                        control={<Radio color="primary"/>}
                                        label="Staging"
                                        labelPlacement="end"
                                    />
                                    <FormControlLabel
                                        value="other"
                                        control={<Radio color="primary"/>}
                                        label="Other"
                                        labelPlacement="end"
                                    />
                                </RadioGroup>
                            </FormControl>
                            {serverMode === 'other' && <>
                                <TextField
                                    margin="dense"
                                    label={i18n.t('settings.test_url')}
                                    type="text"
                                    fullWidth={true}
                                    value={url}
                                    onChange={this.debugModeUrlChange}
                                />
                                <TextField
                                    margin="dense"
                                    label="Server Keys"
                                    type="text"
                                    fullWidth={true}
                                    value={debugServerKeys}
                                    onChange={this.debugServerKeysChange}
                                />
                            </>}
                            {ElectronService.isElectron() && <TextField
                                margin="dense"
                                label={i18n.t('settings.electron_load_url')}
                                type="text"
                                fullWidth={true}
                                value={electronLoadUrl}
                                onChange={this.debugModeElectronLoadUrlChange}
                            />}
                            <TextField
                                margin="dense"
                                label={i18n.t('settings.throttle_interval')}
                                type="text"
                                fullWidth={true}
                                value={throttleInterval}
                                onChange={this.debugModeThrottleIntervalChange}
                            />
                            <div className="switch-container">
                                <div className="switch-label">Verbose API call</div>
                                <Switch
                                    checked={verboseAPICall}
                                    color="default"
                                    onChange={this.verboseAPICallChangeHandler}
                                    className="switch"
                                    classes={this.switchClasses}
                                />
                            </div>
                            <Button onClick={this.debugModeClearAllDataHandler} variant="contained" color="secondary"
                                    fullWidth={true}>{i18n.t('settings.clear_all_data')}</Button>
                            {ElectronService.isElectron() &&
                            <Button onClick={this.toggleMenuBarHandler} style={{marginTop: '10px'}} variant="contained"
                                    color="secondary"
                                    fullWidth={true}>{i18n.t('settings.toggle_menu_bar')}</Button>}
                        </div>
                    </DialogContent>
                    <DialogActions>
                        <Button onClick={this.debugModeCloseHandler} color="secondary">
                            {i18n.t('general.cancel')}
                        </Button>
                        <Button onClick={this.debugModeApplyHandler} color="primary" autoFocus={true}>
                            {i18n.t('general.apply')}
                        </Button>
                    </DialogActions>
                </div>
            </Dialog>
        );
    }

    private debugModeClearAllDataHandler = () => {
        const authErrorEvent = new CustomEvent(EventAuthError, {detail: {clear: true}});
        window.dispatchEvent(authErrorEvent);
    }

    /* Debug mode close handler */
    private debugModeCloseHandler = () => {
        this.setState({
            open: false,
        });
    }

    /* Debug mode apply handler */
    private debugModeApplyHandler = () => {
        localStorage.setItem(C_LOCALSTORAGE.ServerMode, this.state.serverMode);
        localStorage.setItem(C_LOCALSTORAGE.WorkspaceUrl, this.state.url);
        localStorage.setItem(C_LOCALSTORAGE.ServerKeys, this.state.debugServerKeys);
        localStorage.setItem(C_LOCALSTORAGE.DebugThrottleInterval, String(this.state.throttleInterval));
        localStorage.setItem(C_LOCALSTORAGE.DebugVerboseAPI, this.state.verboseAPICall ? 'true' : 'false');
        if (ElectronService.isElectron() && this.state.electronLoadUrl !== this.electronLoadUrl) {
            this.electronService.setLoadUrl(this.state.electronLoadUrl);
        }
        if (serverKeys !== this.state.debugServerKeys) {
            const authErrorEvent = new CustomEvent(EventAuthError, {detail: {clear: true}});
            window.dispatchEvent(authErrorEvent);
        } else {
            setTimeout(() => {
                window.location.reload();
            }, 500);
        }
    }

    /* Debug mode url change handler */
    private debugModeUrlChange = (e: any) => {
        this.setState({
            url: e.currentTarget.value,
        });
    }

    /* Debug mode server keys change handler */
    private debugServerKeysChange = (e: any) => {
        this.setState({
            debugServerKeys: e.currentTarget.value,
        });
    }

    /* Debug mode Throttle Interval change handler */
    private debugModeThrottleIntervalChange = (e: any) => {
        this.setState({
            throttleInterval: e.currentTarget.value,
        });
    }

    /* Debug mode Electron Load URL change handler */
    private debugModeElectronLoadUrlChange = (e: any) => {
        this.setState({
            electronLoadUrl: e.currentTarget.value,
        });
    }

    /* Debug mode toggle menu bar handler */
    private toggleMenuBarHandler = () => {
        this.electronService.toggleMenuBar();
    }

    private verboseAPICallChangeHandler = (e: any, checked: boolean) => {
        this.setState({
            verboseAPICall: checked,
        });
    }

    private serverChangeHandler = (e: any, val: any) => {
        this.setState({
            serverMode: val,
        });
    }
}

export default DevTools;
