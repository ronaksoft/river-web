syntax = "proto3";
package msg;
import "rony.proto";

// Ping
message Ping {
    int64 ID = 1;
}

// Pong
message Pong {
    int64 ID = 2;
}

// UpdateEnvelope
message UpdateEnvelope {
    int64 Constructor = 1;
    bytes Update = 2;
    int32 UCount = 3;
    int64 UpdateID = 4;
    int64 Timestamp = 5;
}

// UpdateContainer
// It is very similar to MessageContainer but holding a list of Updates
message UpdateContainer {
    int32 Length = 1;
    repeated UpdateEnvelope Updates = 2;
    int64 MinUpdateID = 3;
    int64 MaxUpdateID = 4;
    repeated User Users = 5;
    repeated Group Groups = 6;
}

// ProtoMessage
// If AuthID == 0 then Payload is a MessageEnvelop otherwise Payload is a ProtoEncryptedPayload
message ProtoMessage {
    int64 AuthID = 1;
    bytes MessageKey = 2; // 32 bytes
    bytes Payload = 3;
}

// ProtoMessageEncryptedPayload
message ProtoEncryptedPayload {
    int64 ServerSalt = 1;
    uint64 MessageID = 2;
    int64 SessionID = 3;
    rony.MessageEnvelope Envelope = 4;
}

// Ack
message Ack {
    repeated uint64 MessageIDs = 1;
}

// Bool
message Bool {
    bool Result = 1;
}

// TypingAction
enum TypingAction {
    TypingActionTyping = 0;
    TypingActionRecordingVoice = 1;
    TypingActionRecordingVideo = 2;
    TypingActionUploading = 3;
    TypingActionCancel = 4;
}

// Dialog
message Dialog {
    int64 TeamID = 100 [jstype = JS_STRING];
    int64 PeerID = 1 [jstype = JS_STRING];
    int32 PeerType = 2;
    int64 TopMessageID = 3;
    int64 ReadInboxMaxID = 4;
    int64 ReadOutboxMaxID = 5;
    int32 UnreadCount = 6;
    fixed64 AccessHash = 7 [jstype = JS_STRING];
    PeerNotifySettings NotifySettings = 8;
    int32 MentionedCount = 9;
    bool Pinned = 10;
    DraftMessage Draft = 11;
    int64 PinnedMessageID = 12;
    int64 ActiveCallID = 13 [jstype = JS_STRING];
    bool ReadOnly = 14;
}

// PeerType
enum PeerType {
    PeerSelf = 0;
    PeerUser = 1;
    PeerGroup = 2;
    PeerExternalUser = 3;
    PeerChannel = 4;
}

// InputPeer
message InputPeer {
    int64 ID = 1 [jstype = JS_STRING];
    PeerType Type = 2;
    fixed64 AccessHash = 3 [jstype = JS_STRING];
}

// Peer
message Peer {
    int64 ID = 1 [jstype = JS_STRING];
    int32 Type = 2;
    fixed64 AccessHash = 3 [jstype = JS_STRING];
}

// InputPassword
message InputPassword {
    int64 SrpID = 1 [jstype = JS_STRING];
    bytes A = 2;
    bytes M1 = 3;
}

// InputFileLocation
message InputFileLocation {
    int32 ClusterID = 1;
    int64 FileID = 2 [jstype = JS_STRING];
    fixed64 AccessHash = 3 [jstype = JS_STRING];
    int32 Version = 4;
}

// FileLocation
message FileLocation {
    int32 ClusterID = 1;
    int64 FileID = 2 [jstype = JS_STRING];
    fixed64 AccessHash = 3 [jstype = JS_STRING];
}

// WebLocation
message WebLocation {
    string Url = 1;
}

// InputWebLocation
message InputWebLocation {
    string Url = 1;
}

// UserStatus
enum UserStatus {
    UserStatusOffline = 0;
    UserStatusOnline = 1;
    UserStatusRecently = 2;
    UserStatusLastWeek = 3;
    UserStatusLastMonth = 4;
}

// UserPhoto
message UserPhoto {
    FileLocation PhotoBig = 1;
    FileLocation PhotoSmall = 2;
    int64 PhotoID = 3 [jstype = JS_STRING];
    WebLocation PhotoBigWeb = 4;
    WebLocation PhotoSmallWeb = 5;
}

// InputUser
message InputUser {
    int64 UserID = 1 [jstype = JS_STRING];
    fixed64 AccessHash = 2 [jstype = JS_STRING];
}

// User
message User {
    int64 ID = 1 [jstype = JS_STRING];
    string FirstName = 2;
    string LastName = 3;
    string Username = 4;
    UserStatus Status = 5;
    bool Restricted = 6;
    fixed64 AccessHash = 7 [jstype = JS_STRING];
    UserPhoto Photo = 8;
    string Bio = 9;
    string Phone = 10;
    int64 LastSeen = 11;
    repeated UserPhoto PhotoGallery = 12;
    bool IsBot = 13;
    bool Deleted = 14;
    bool Blocked = 15;
    BotInfo BotInfo = 16;
    bool Official = 17;
}

// ContactUser
message ContactUser {
    int64 ID = 1 [jstype = JS_STRING];
    string FirstName = 2;
    string LastName = 3;
    fixed64 AccessHash = 4 [jstype = JS_STRING];
    string Phone = 5;
    string Username = 6;
    int64 ClientID = 7 [jstype = JS_STRING];
    UserPhoto Photo = 8;
}

// Bot
message Bot {
    int64 ID = 1 [jstype = JS_STRING];
    string Name = 2;
    string Username = 3;
    string Bio = 4;
}

// BotCommands
message BotCommands {
    string Command = 1;
    string Description = 2;
}

// BotInfo
message BotInfo {
    Bot Bot = 1;
    int64 UserID = 2;
    string Description = 3;
    repeated BotCommands BotCommands = 4;
    bool InlineGeo = 5;
    string InlinePlaceHolder = 6;
    bool InlineQuery = 7;
}

// GroupFlags
enum GroupFlags {
    GroupFlagsEmpty = 0;
    GroupFlagsCreator = 1;
    GroupFlagsNonParticipant = 2;
    GroupFlagsAdmin = 3;
    GroupFlagsAdminsEnabled = 4;
    GroupFlagsDeactivated = 5;
    GroupFlagsAdminOnly = 6;
    GroupFlagsReserved1 = 7;
    GroupFlagsReserved2 = 8;
    GroupFlagsReserved3 = 9;
    GroupFlagsReserved4 = 10;
}

// GroupPhoto
message GroupPhoto {
    FileLocation PhotoBig = 1;
    FileLocation PhotoSmall = 2;
    int64 PhotoID = 3 [jstype = JS_STRING];
}

// Group
message Group {
    int64 TeamID = 100 [jstype = JS_STRING];
    int64 ID = 1 [jstype = JS_STRING];
    string Title = 2;
    int64 CreatedOn = 3;
    int32 Participants = 4;
    int64 EditedOn = 5;
    repeated GroupFlags Flags = 6;
    GroupPhoto Photo = 7;
}

// GroupFull
message GroupFull {
    Group Group = 1;
    repeated User Users = 2;
    repeated GroupParticipant Participants = 3;
    PeerNotifySettings NotifySettings = 4;
    repeated GroupPhoto PhotoGallery = 5;
}

// ParticipantType
enum ParticipantType {
    ParticipantTypeMember = 0;
    ParticipantTypeAdmin = 1;
    ParticipantTypeCreator = 2;
}

// GroupParticipant
message GroupParticipant {
    int64 UserID = 1 [jstype = JS_STRING];
    string FirstName = 2;
    string LastName = 3;
    ParticipantType Type = 4;
    uint64 AccessHash = 5 [jstype = JS_STRING];
    string Username = 6;
    UserPhoto Photo = 8;
}

// InputMediaType
enum InputMediaType {
    InputMediaTypeEmpty = 0;
    InputMediaTypeInvoice = 1;
    InputMediaTypePoll = 2;
    InputMediaTypeContact = 3;
    InputMediaTypeUploadedDocument = 4;
    InputMediaTypeDocument = 5;
    InputMediaTypeGeoLocation = 6;
    InputMediaTypeWebDocument = 7;
    InputMediaTypeSealed = 8;
    InputMediaTypeMessageDocument = 9;
    InputMediaTypeReserved4 = 10;
    InputMediaTypeReserved5 = 11;
    InputMediaTypeReserved6 = 12;
    InputMediaTypeReserved7 = 13;
    InputMediaTypeReserved8 = 14;
}

// MediaType
enum MediaType {
    MediaTypeEmpty = 0;
    MediaTypePoll = 1;
    MediaTypeDocument = 2;
    MediaTypeContact = 3;
    MediaTypeGeoLocation = 4;
    MediaTypeInvoice = 5;
    MediaTypeWebDocument = 6;
    MediaTypeSealed = 7;
    MediaTypeReserved1 = 8;
    MediaTypeReserved2 = 9;
    MediaTypeReserved3 = 10;
    MediaTypeReserved4 = 11;
    MediaTypeReserved5 = 12;
    MediaTypeReserved6 = 13;
}

// MediaCategory
enum MediaCategory {
    MediaCategoryNone = 0;
    MediaCategoryAudio = 1;
    MediaCategoryVoice = 2;
    MediaCategoryMedia = 3;
    MediaCategoryFile = 4;
    MediaCategoryGif = 5;
    MediaCategoryWeb = 6;
    MediaCategoryContact = 7;
    MediaCategoryLocation = 8;
    MediaCategoryPoll = 9;
    MediaCategoryReserved0 = 10;
    MediaCategoryReserved1 = 11;
    MediaCategoryReserved2 = 12;
    MediaCategoryReserved3 = 13;
    MediaCategoryReserved4 = 14;
    MediaCategoryReserved5 = 15;
}

// UserMessage
message UserMessage {
    int64 TeamID = 100 [jstype = JS_STRING];
    int64 ID = 1;
    int64 PeerID = 2 [jstype = JS_STRING];
    int32 PeerType = 3;
    int64 CreatedOn = 4;
    int64 EditedOn = 5;
    bool Fwd = 601;
    int64 FwdSenderID = 6 [jstype = JS_STRING];
    int64 FwdChannelID = 7 [jstype = JS_STRING];
    int64 FwdChannelMessageID = 8 [jstype = JS_STRING];
    int32 Flags = 9;
    int64 MessageType = 10;
    string Body = 11;
    int64 SenderID = 12 [jstype = JS_STRING];
    bool ContentRead = 13;
    bool Inbox = 14;
    int64 ReplyTo = 15;
    int32 MessageAction = 16;
    bytes MessageActionData = 17;
    repeated MessageEntity Entities = 18;
    MediaType MediaType = 19;
    bytes Media = 20;
    int64 ReplyMarkup = 21;
    bytes ReplyMarkupData = 22;
    repeated int32 LabelIDs = 23;
    int64 ViaBotID = 24 [jstype = JS_STRING];
    repeated ReactionCounter Reactions = 25;
    repeated string YourReactions = 26;
    MediaCategory MediaCat = 27;
}

// ReactionCounter
message ReactionCounter {
    string Reaction = 1;
    int32 Total = 2;
}

// DraftMessage
message DraftMessage {
    int64 TeamID = 100 [jstype = JS_STRING];
    int64 PeerID = 2 [jstype = JS_STRING];
    int32 PeerType = 3;
    int64 Date = 4;
    string Body = 5;
    repeated MessageEntity Entities = 6;
    int64 ReplyTo = 7;
    int64 EditedID = 8;
}

// MessageEntityType
enum MessageEntityType {
    MessageEntityTypeBold = 0;
    MessageEntityTypeItalic = 1;
    MessageEntityTypeMention = 2;
    MessageEntityTypeUrl = 3;
    MessageEntityTypeEmail = 4;
    MessageEntityTypeHashTag = 5;
    MessageEntityTypeCode = 6;
    MessageEntityTypeBotCommand = 7;
    MessageEntityTypeMentionAll = 8;
    MessageEntityTypeReserved4 = 9;
    MessageEntityTypeReserved5 = 10;
    MessageEntityTypeReserved6 = 11;
    MessageEntityTypeReserved7 = 12;
    MessageEntityTypeReserved8 = 13;
}

// MessageEntity
message MessageEntity {
    MessageEntityType Type = 1;
    int32 Offset = 2;
    int32 Length = 3;
    int64 UserID = 4 [jstype = JS_STRING];
}

// RSAPublicKey
message RSAPublicKey {
    int64 FingerPrint = 1 [jstype = JS_STRING];
    string N = 2;
    uint32 E = 3;
}

// DHGroup
message DHGroup {
    int64 FingerPrint = 1 [jstype = JS_STRING];
    string Prime = 2;
    int32 Gen = 3;
}

// PhoneContact
message PhoneContact {
    int64 ClientID = 1 [jstype = JS_STRING];
    string FirstName = 2;
    string LastName = 3;
    string Phone = 4;
}

// PeerNotifySettings
message PeerNotifySettings {
    int32 Flags = 1;
    int64 MuteUntil = 2;
    string Sound = 3;
}

// InputFile
message InputFile {
    int64 FileID = 1 [jstype = JS_STRING];
    int32 TotalParts = 2;
    string FileName = 3;
    string MD5Checksum = 4;
}

// InputDocument
message InputDocument {
    int64 ID = 1 [jstype = JS_STRING];
    fixed64 AccessHash = 2 [jstype = JS_STRING];
    int32 ClusterID = 3;
}

// NotificationType
enum PushTokenProvider {
    PushTokenFirebase = 0;
    PushTokenApn = 1;
    PushTokenPushKit = 2;
}

// AccountPrivacyKey
enum PrivacyKey {
    PrivacyKeyNone = 0;
    PrivacyKeyChatInvite = 1;
    PrivacyKeyLastSeen = 2;
    PrivacyKeyPhoneNumber = 3;
    PrivacyKeyProfilePhoto = 4;
    PrivacyKeyForwardedMessage = 5;
    PrivacyKeyCall = 6;
    PrivacyKeyReserved1 = 7;
    PrivacyKeyReserved2 = 8;
    PrivacyKeyReserved3 = 9;
    PrivacyKeyReserved4 = 10;
    PrivacyKeyReserved5 = 11;
    PrivacyKeyReserved6 = 12;
}

// AccountPrivacyValue
enum PrivacyType {
    PrivacyTypeAllowAll = 0;
    PrivacyTypeAllowContacts = 1;
    PrivacyTypeDisallowAll = 2;
    //    Order is very important, exceptions are started from 101
    PrivacyTypeAllowUsers = 101;
    PrivacyTypeDisallowUsers = 102;
}

// PrivacyRule
message PrivacyRule {
    PrivacyType PrivacyType = 1;
    repeated int64 UserIDs = 2 [jstype = JS_STRING];
}

// Label
message Label {
    int32 ID = 1;
    string Name = 2;
    string Colour = 3;
    int32 Count = 4;
}

// LabelsMany
message LabelsMany {
    repeated Label Labels = 1;
    bool Empty = 5;
}

// InputGeoLocation
message InputGeoLocation {
    float Lat = 1;
    float Long = 2;
}

// GeoLocation
message GeoLocation {
    float Lat = 1;
    float Long = 2;
}

// TeamFlags
enum TeamFlags {
    TeamFlagsEmpty = 0;
    TeamFlagsCreator = 1;
    TeamFlagsAdmin = 2;
    TeamFlagsReserved1 = 3;
    TeamFlagsReserved2 = 4;
    TeamFlagsReserved3 = 5;
    TeamFlagsReserved4 = 6;
    TeamFlagsReserved5 = 7;
}

// InputTeam
message InputTeam {
    int64 ID = 1 [jstype = JS_STRING];
    fixed64 AccessHash = 2 [jstype = JS_STRING];
}

// TeamPhoto
message TeamPhoto {
    FileLocation PhotoBig = 1;
    FileLocation PhotoSmall = 2;
}

// Team
message Team {
    int64 ID = 1 [jstype = JS_STRING];
    string Name = 2;
    int64 CreatorID = 3 [jstype = JS_STRING];
    fixed64 AccessHash = 6 [jstype = JS_STRING];
    repeated TeamFlags Flags = 7;
    int32 Capacity = 8;
    bool Community = 9;
    TeamPhoto Photo = 10;
}

