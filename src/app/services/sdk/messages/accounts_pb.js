/* eslint-disable */
// source: accounts.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.object.extend(proto, core_types_pb);
goog.exportSymbol('proto.msg.AccountAuthorization', null, global);
goog.exportSymbol('proto.msg.AccountAuthorizations', null, global);
goog.exportSymbol('proto.msg.AccountChangePhone', null, global);
goog.exportSymbol('proto.msg.AccountCheckUsername', null, global);
goog.exportSymbol('proto.msg.AccountDelete', null, global);
goog.exportSymbol('proto.msg.AccountGetAuthorizations', null, global);
goog.exportSymbol('proto.msg.AccountGetNotifySettings', null, global);
goog.exportSymbol('proto.msg.AccountGetPassword', null, global);
goog.exportSymbol('proto.msg.AccountGetPasswordSettings', null, global);
goog.exportSymbol('proto.msg.AccountGetPrivacy', null, global);
goog.exportSymbol('proto.msg.AccountGetTeams', null, global);
goog.exportSymbol('proto.msg.AccountPassword', null, global);
goog.exportSymbol('proto.msg.AccountPasswordSettings', null, global);
goog.exportSymbol('proto.msg.AccountPrivacyRules', null, global);
goog.exportSymbol('proto.msg.AccountRecoverPassword', null, global);
goog.exportSymbol('proto.msg.AccountRegisterDevice', null, global);
goog.exportSymbol('proto.msg.AccountRemovePhoto', null, global);
goog.exportSymbol('proto.msg.AccountResendVerifyPhoneCode', null, global);
goog.exportSymbol('proto.msg.AccountResetAuthorization', null, global);
goog.exportSymbol('proto.msg.AccountSendChangePhoneCode', null, global);
goog.exportSymbol('proto.msg.AccountSendVerifyPhoneCode', null, global);
goog.exportSymbol('proto.msg.AccountSetLang', null, global);
goog.exportSymbol('proto.msg.AccountSetNotifySettings', null, global);
goog.exportSymbol('proto.msg.AccountSetPrivacy', null, global);
goog.exportSymbol('proto.msg.AccountSetWebPhoto', null, global);
goog.exportSymbol('proto.msg.AccountUnregisterDevice', null, global);
goog.exportSymbol('proto.msg.AccountUpdatePasswordSettings', null, global);
goog.exportSymbol('proto.msg.AccountUpdatePhoto', null, global);
goog.exportSymbol('proto.msg.AccountUpdateProfile', null, global);
goog.exportSymbol('proto.msg.AccountUpdateStatus', null, global);
goog.exportSymbol('proto.msg.AccountUpdateUsername', null, global);
goog.exportSymbol('proto.msg.AccountUploadPhoto', null, global);
goog.exportSymbol('proto.msg.RecoveryQuestion', null, global);
goog.exportSymbol('proto.msg.SecurityAnswer', null, global);
goog.exportSymbol('proto.msg.SecurityQuestion', null, global);
goog.exportSymbol('proto.msg.SecurityQuestions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSetNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountSetNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountSetNotifySettings.displayName = 'proto.msg.AccountSetNotifySettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountGetNotifySettings.displayName = 'proto.msg.AccountGetNotifySettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountRegisterDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountRegisterDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountRegisterDevice.displayName = 'proto.msg.AccountRegisterDevice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUnregisterDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUnregisterDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountUnregisterDevice.displayName = 'proto.msg.AccountUnregisterDevice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdateProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdateProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountUpdateProfile.displayName = 'proto.msg.AccountUpdateProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountCheckUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountCheckUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountCheckUsername.displayName = 'proto.msg.AccountCheckUsername';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdateUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdateUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountUpdateUsername.displayName = 'proto.msg.AccountUpdateUsername';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUploadPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUploadPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountUploadPhoto.displayName = 'proto.msg.AccountUploadPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdatePhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdatePhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountUpdatePhoto.displayName = 'proto.msg.AccountUpdatePhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSetWebPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountSetWebPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountSetWebPhoto.displayName = 'proto.msg.AccountSetWebPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountRemovePhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountRemovePhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountRemovePhoto.displayName = 'proto.msg.AccountRemovePhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSendChangePhoneCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountSendChangePhoneCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountSendChangePhoneCode.displayName = 'proto.msg.AccountSendChangePhoneCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSendVerifyPhoneCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountSendVerifyPhoneCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountSendVerifyPhoneCode.displayName = 'proto.msg.AccountSendVerifyPhoneCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountResendVerifyPhoneCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountResendVerifyPhoneCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountResendVerifyPhoneCode.displayName = 'proto.msg.AccountResendVerifyPhoneCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountChangePhone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountChangePhone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountChangePhone.displayName = 'proto.msg.AccountChangePhone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountDelete.displayName = 'proto.msg.AccountDelete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSetPrivacy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountSetPrivacy.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountSetPrivacy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountSetPrivacy.displayName = 'proto.msg.AccountSetPrivacy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetPrivacy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetPrivacy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountGetPrivacy.displayName = 'proto.msg.AccountGetPrivacy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetAuthorizations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetAuthorizations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountGetAuthorizations.displayName = 'proto.msg.AccountGetAuthorizations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountResetAuthorization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountResetAuthorization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountResetAuthorization.displayName = 'proto.msg.AccountResetAuthorization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdateStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdateStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountUpdateStatus.displayName = 'proto.msg.AccountUpdateStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSetLang = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountSetLang, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountSetLang.displayName = 'proto.msg.AccountSetLang';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetPassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetPassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountGetPassword.displayName = 'proto.msg.AccountGetPassword';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetPasswordSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetPasswordSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountGetPasswordSettings.displayName = 'proto.msg.AccountGetPasswordSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdatePasswordSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountUpdatePasswordSettings.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountUpdatePasswordSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountUpdatePasswordSettings.displayName = 'proto.msg.AccountUpdatePasswordSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountRecoverPassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountRecoverPassword.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountRecoverPassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountRecoverPassword.displayName = 'proto.msg.AccountRecoverPassword';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetTeams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetTeams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountGetTeams.displayName = 'proto.msg.AccountGetTeams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountPasswordSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountPasswordSettings.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountPasswordSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountPasswordSettings.displayName = 'proto.msg.AccountPasswordSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.SecurityQuestions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.SecurityQuestions.repeatedFields_, null);
};
goog.inherits(proto.msg.SecurityQuestions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.SecurityQuestions.displayName = 'proto.msg.SecurityQuestions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.RecoveryQuestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.RecoveryQuestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.RecoveryQuestion.displayName = 'proto.msg.RecoveryQuestion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.SecurityQuestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.SecurityQuestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.SecurityQuestion.displayName = 'proto.msg.SecurityQuestion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.SecurityAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.SecurityAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.SecurityAnswer.displayName = 'proto.msg.SecurityAnswer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountPassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountPassword.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountPassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountPassword.displayName = 'proto.msg.AccountPassword';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountAuthorizations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountAuthorizations.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountAuthorizations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountAuthorizations.displayName = 'proto.msg.AccountAuthorizations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountAuthorization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountAuthorization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountAuthorization.displayName = 'proto.msg.AccountAuthorization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountPrivacyRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountPrivacyRules.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountPrivacyRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.AccountPrivacyRules.displayName = 'proto.msg.AccountPrivacyRules';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSetNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSetNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSetNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && core_types_pb.PeerNotifySettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSetNotifySettings}
 */
proto.msg.AccountSetNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSetNotifySettings;
  return proto.msg.AccountSetNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSetNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSetNotifySettings}
 */
proto.msg.AccountSetNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = new core_types_pb.PeerNotifySettings;
      reader.readMessage(value,core_types_pb.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSetNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSetNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSetNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.PeerNotifySettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.AccountSetNotifySettings.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.AccountSetNotifySettings} returns this
*/
proto.msg.AccountSetNotifySettings.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountSetNotifySettings} returns this
 */
proto.msg.AccountSetNotifySettings.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountSetNotifySettings.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PeerNotifySettings Settings = 2;
 * @return {?proto.msg.PeerNotifySettings}
 */
proto.msg.AccountSetNotifySettings.prototype.getSettings = function() {
  return /** @type{?proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, core_types_pb.PeerNotifySettings, 2));
};


/**
 * @param {?proto.msg.PeerNotifySettings|undefined} value
 * @return {!proto.msg.AccountSetNotifySettings} returns this
*/
proto.msg.AccountSetNotifySettings.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountSetNotifySettings} returns this
 */
proto.msg.AccountSetNotifySettings.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountSetNotifySettings.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetNotifySettings}
 */
proto.msg.AccountGetNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetNotifySettings;
  return proto.msg.AccountGetNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetNotifySettings}
 */
proto.msg.AccountGetNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.AccountGetNotifySettings.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.AccountGetNotifySettings} returns this
*/
proto.msg.AccountGetNotifySettings.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountGetNotifySettings} returns this
 */
proto.msg.AccountGetNotifySettings.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountGetNotifySettings.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountRegisterDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountRegisterDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountRegisterDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRegisterDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicemodel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    systemversion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    appversion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    langcode: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tokentype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    clientid: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountRegisterDevice}
 */
proto.msg.AccountRegisterDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountRegisterDevice;
  return proto.msg.AccountRegisterDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountRegisterDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountRegisterDevice}
 */
proto.msg.AccountRegisterDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicemodel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemversion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppversion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLangcode(value);
      break;
    case 7:
      var value = /** @type {!proto.msg.PushTokenProvider} */ (reader.readEnum());
      msg.setTokentype(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountRegisterDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountRegisterDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountRegisterDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRegisterDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicemodel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSystemversion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAppversion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLangcode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTokentype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string Token = 2;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountRegisterDevice} returns this
 */
proto.msg.AccountRegisterDevice.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string DeviceModel = 3;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getDevicemodel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountRegisterDevice} returns this
 */
proto.msg.AccountRegisterDevice.prototype.setDevicemodel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string SystemVersion = 4;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getSystemversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountRegisterDevice} returns this
 */
proto.msg.AccountRegisterDevice.prototype.setSystemversion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string AppVersion = 5;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getAppversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountRegisterDevice} returns this
 */
proto.msg.AccountRegisterDevice.prototype.setAppversion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string LangCode = 6;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getLangcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountRegisterDevice} returns this
 */
proto.msg.AccountRegisterDevice.prototype.setLangcode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional PushTokenProvider TokenType = 7;
 * @return {!proto.msg.PushTokenProvider}
 */
proto.msg.AccountRegisterDevice.prototype.getTokentype = function() {
  return /** @type {!proto.msg.PushTokenProvider} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.msg.PushTokenProvider} value
 * @return {!proto.msg.AccountRegisterDevice} returns this
 */
proto.msg.AccountRegisterDevice.prototype.setTokentype = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional string ClientID = 8;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountRegisterDevice} returns this
 */
proto.msg.AccountRegisterDevice.prototype.setClientid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUnregisterDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUnregisterDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUnregisterDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUnregisterDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokentype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUnregisterDevice}
 */
proto.msg.AccountUnregisterDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUnregisterDevice;
  return proto.msg.AccountUnregisterDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUnregisterDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUnregisterDevice}
 */
proto.msg.AccountUnregisterDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokentype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUnregisterDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUnregisterDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUnregisterDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUnregisterDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokentype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 TokenType = 1;
 * @return {number}
 */
proto.msg.AccountUnregisterDevice.prototype.getTokentype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.AccountUnregisterDevice} returns this
 */
proto.msg.AccountUnregisterDevice.prototype.setTokentype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Token = 2;
 * @return {string}
 */
proto.msg.AccountUnregisterDevice.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountUnregisterDevice} returns this
 */
proto.msg.AccountUnregisterDevice.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdateProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdateProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdateProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bio: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdateProfile}
 */
proto.msg.AccountUpdateProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdateProfile;
  return proto.msg.AccountUpdateProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdateProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdateProfile}
 */
proto.msg.AccountUpdateProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdateProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdateProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdateProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBio();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string FirstName = 1;
 * @return {string}
 */
proto.msg.AccountUpdateProfile.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountUpdateProfile} returns this
 */
proto.msg.AccountUpdateProfile.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string LastName = 2;
 * @return {string}
 */
proto.msg.AccountUpdateProfile.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountUpdateProfile} returns this
 */
proto.msg.AccountUpdateProfile.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Bio = 3;
 * @return {string}
 */
proto.msg.AccountUpdateProfile.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountUpdateProfile} returns this
 */
proto.msg.AccountUpdateProfile.prototype.setBio = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountCheckUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountCheckUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountCheckUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountCheckUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountCheckUsername}
 */
proto.msg.AccountCheckUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountCheckUsername;
  return proto.msg.AccountCheckUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountCheckUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountCheckUsername}
 */
proto.msg.AccountCheckUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountCheckUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountCheckUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountCheckUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountCheckUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Username = 1;
 * @return {string}
 */
proto.msg.AccountCheckUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountCheckUsername} returns this
 */
proto.msg.AccountCheckUsername.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdateUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdateUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdateUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdateUsername}
 */
proto.msg.AccountUpdateUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdateUsername;
  return proto.msg.AccountUpdateUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdateUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdateUsername}
 */
proto.msg.AccountUpdateUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdateUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdateUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdateUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Username = 1;
 * @return {string}
 */
proto.msg.AccountUpdateUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountUpdateUsername} returns this
 */
proto.msg.AccountUpdateUsername.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUploadPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUploadPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUploadPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUploadPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && core_types_pb.InputFile.toObject(includeInstance, f),
    returnobject: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUploadPhoto}
 */
proto.msg.AccountUploadPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUploadPhoto;
  return proto.msg.AccountUploadPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUploadPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUploadPhoto}
 */
proto.msg.AccountUploadPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputFile;
      reader.readMessage(value,core_types_pb.InputFile.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnobject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUploadPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUploadPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUploadPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUploadPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputFile.serializeBinaryToWriter
    );
  }
  f = message.getReturnobject();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional InputFile File = 1;
 * @return {?proto.msg.InputFile}
 */
proto.msg.AccountUploadPhoto.prototype.getFile = function() {
  return /** @type{?proto.msg.InputFile} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputFile, 1));
};


/**
 * @param {?proto.msg.InputFile|undefined} value
 * @return {!proto.msg.AccountUploadPhoto} returns this
*/
proto.msg.AccountUploadPhoto.prototype.setFile = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountUploadPhoto} returns this
 */
proto.msg.AccountUploadPhoto.prototype.clearFile = function() {
  return this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountUploadPhoto.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool ReturnObject = 2;
 * @return {boolean}
 */
proto.msg.AccountUploadPhoto.prototype.getReturnobject = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.AccountUploadPhoto} returns this
 */
proto.msg.AccountUploadPhoto.prototype.setReturnobject = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdatePhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdatePhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdatePhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdatePhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    photoid: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdatePhoto}
 */
proto.msg.AccountUpdatePhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdatePhoto;
  return proto.msg.AccountUpdatePhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdatePhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdatePhoto}
 */
proto.msg.AccountUpdatePhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPhotoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdatePhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdatePhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdatePhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdatePhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhotoid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 PhotoID = 1;
 * @return {string}
 */
proto.msg.AccountUpdatePhoto.prototype.getPhotoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountUpdatePhoto} returns this
 */
proto.msg.AccountUpdatePhoto.prototype.setPhotoid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSetWebPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSetWebPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSetWebPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetWebPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    bigphoto: (f = msg.getBigphoto()) && core_types_pb.InputWebLocation.toObject(includeInstance, f),
    smallphoto: (f = msg.getSmallphoto()) && core_types_pb.InputWebLocation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSetWebPhoto}
 */
proto.msg.AccountSetWebPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSetWebPhoto;
  return proto.msg.AccountSetWebPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSetWebPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSetWebPhoto}
 */
proto.msg.AccountSetWebPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputWebLocation;
      reader.readMessage(value,core_types_pb.InputWebLocation.deserializeBinaryFromReader);
      msg.setBigphoto(value);
      break;
    case 2:
      var value = new core_types_pb.InputWebLocation;
      reader.readMessage(value,core_types_pb.InputWebLocation.deserializeBinaryFromReader);
      msg.setSmallphoto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSetWebPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSetWebPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSetWebPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetWebPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBigphoto();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputWebLocation.serializeBinaryToWriter
    );
  }
  f = message.getSmallphoto();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputWebLocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputWebLocation BigPhoto = 1;
 * @return {?proto.msg.InputWebLocation}
 */
proto.msg.AccountSetWebPhoto.prototype.getBigphoto = function() {
  return /** @type{?proto.msg.InputWebLocation} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputWebLocation, 1));
};


/**
 * @param {?proto.msg.InputWebLocation|undefined} value
 * @return {!proto.msg.AccountSetWebPhoto} returns this
*/
proto.msg.AccountSetWebPhoto.prototype.setBigphoto = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountSetWebPhoto} returns this
 */
proto.msg.AccountSetWebPhoto.prototype.clearBigphoto = function() {
  return this.setBigphoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountSetWebPhoto.prototype.hasBigphoto = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InputWebLocation SmallPhoto = 2;
 * @return {?proto.msg.InputWebLocation}
 */
proto.msg.AccountSetWebPhoto.prototype.getSmallphoto = function() {
  return /** @type{?proto.msg.InputWebLocation} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputWebLocation, 2));
};


/**
 * @param {?proto.msg.InputWebLocation|undefined} value
 * @return {!proto.msg.AccountSetWebPhoto} returns this
*/
proto.msg.AccountSetWebPhoto.prototype.setSmallphoto = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountSetWebPhoto} returns this
 */
proto.msg.AccountSetWebPhoto.prototype.clearSmallphoto = function() {
  return this.setSmallphoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountSetWebPhoto.prototype.hasSmallphoto = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountRemovePhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountRemovePhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountRemovePhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRemovePhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    photoid: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountRemovePhoto}
 */
proto.msg.AccountRemovePhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountRemovePhoto;
  return proto.msg.AccountRemovePhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountRemovePhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountRemovePhoto}
 */
proto.msg.AccountRemovePhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPhotoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountRemovePhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountRemovePhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountRemovePhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRemovePhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhotoid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 PhotoID = 1;
 * @return {string}
 */
proto.msg.AccountRemovePhoto.prototype.getPhotoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountRemovePhoto} returns this
 */
proto.msg.AccountRemovePhoto.prototype.setPhotoid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSendChangePhoneCode.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSendChangePhoneCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSendChangePhoneCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSendChangePhoneCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apphash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSendChangePhoneCode}
 */
proto.msg.AccountSendChangePhoneCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSendChangePhoneCode;
  return proto.msg.AccountSendChangePhoneCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSendChangePhoneCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSendChangePhoneCode}
 */
proto.msg.AccountSendChangePhoneCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApphash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSendChangePhoneCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSendChangePhoneCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSendChangePhoneCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSendChangePhoneCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApphash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Phone = 1;
 * @return {string}
 */
proto.msg.AccountSendChangePhoneCode.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountSendChangePhoneCode} returns this
 */
proto.msg.AccountSendChangePhoneCode.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string AppHash = 2;
 * @return {string}
 */
proto.msg.AccountSendChangePhoneCode.prototype.getApphash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountSendChangePhoneCode} returns this
 */
proto.msg.AccountSendChangePhoneCode.prototype.setApphash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSendVerifyPhoneCode.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSendVerifyPhoneCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSendVerifyPhoneCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSendVerifyPhoneCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apphash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSendVerifyPhoneCode}
 */
proto.msg.AccountSendVerifyPhoneCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSendVerifyPhoneCode;
  return proto.msg.AccountSendVerifyPhoneCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSendVerifyPhoneCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSendVerifyPhoneCode}
 */
proto.msg.AccountSendVerifyPhoneCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApphash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSendVerifyPhoneCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSendVerifyPhoneCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSendVerifyPhoneCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSendVerifyPhoneCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApphash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Phone = 1;
 * @return {string}
 */
proto.msg.AccountSendVerifyPhoneCode.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountSendVerifyPhoneCode} returns this
 */
proto.msg.AccountSendVerifyPhoneCode.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string AppHash = 2;
 * @return {string}
 */
proto.msg.AccountSendVerifyPhoneCode.prototype.getApphash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountSendVerifyPhoneCode} returns this
 */
proto.msg.AccountSendVerifyPhoneCode.prototype.setApphash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountResendVerifyPhoneCode.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountResendVerifyPhoneCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountResendVerifyPhoneCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountResendVerifyPhoneCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phonecodehash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    apphash: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountResendVerifyPhoneCode}
 */
proto.msg.AccountResendVerifyPhoneCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountResendVerifyPhoneCode;
  return proto.msg.AccountResendVerifyPhoneCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountResendVerifyPhoneCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountResendVerifyPhoneCode}
 */
proto.msg.AccountResendVerifyPhoneCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonecodehash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApphash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountResendVerifyPhoneCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountResendVerifyPhoneCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountResendVerifyPhoneCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountResendVerifyPhoneCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhonecodehash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApphash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Phone = 1;
 * @return {string}
 */
proto.msg.AccountResendVerifyPhoneCode.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountResendVerifyPhoneCode} returns this
 */
proto.msg.AccountResendVerifyPhoneCode.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string PhoneCodeHash = 2;
 * @return {string}
 */
proto.msg.AccountResendVerifyPhoneCode.prototype.getPhonecodehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountResendVerifyPhoneCode} returns this
 */
proto.msg.AccountResendVerifyPhoneCode.prototype.setPhonecodehash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string AppHash = 3;
 * @return {string}
 */
proto.msg.AccountResendVerifyPhoneCode.prototype.getApphash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountResendVerifyPhoneCode} returns this
 */
proto.msg.AccountResendVerifyPhoneCode.prototype.setApphash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountChangePhone.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountChangePhone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountChangePhone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountChangePhone.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phonecodehash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phonecode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: (f = msg.getPassword()) && core_types_pb.InputPassword.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountChangePhone}
 */
proto.msg.AccountChangePhone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountChangePhone;
  return proto.msg.AccountChangePhone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountChangePhone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountChangePhone}
 */
proto.msg.AccountChangePhone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonecodehash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonecode(value);
      break;
    case 4:
      var value = new core_types_pb.InputPassword;
      reader.readMessage(value,core_types_pb.InputPassword.deserializeBinaryFromReader);
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountChangePhone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountChangePhone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountChangePhone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountChangePhone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhonecodehash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhonecode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      core_types_pb.InputPassword.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Phone = 1;
 * @return {string}
 */
proto.msg.AccountChangePhone.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountChangePhone} returns this
 */
proto.msg.AccountChangePhone.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string PhoneCodeHash = 2;
 * @return {string}
 */
proto.msg.AccountChangePhone.prototype.getPhonecodehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountChangePhone} returns this
 */
proto.msg.AccountChangePhone.prototype.setPhonecodehash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string PhoneCode = 3;
 * @return {string}
 */
proto.msg.AccountChangePhone.prototype.getPhonecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountChangePhone} returns this
 */
proto.msg.AccountChangePhone.prototype.setPhonecode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional InputPassword Password = 4;
 * @return {?proto.msg.InputPassword}
 */
proto.msg.AccountChangePhone.prototype.getPassword = function() {
  return /** @type{?proto.msg.InputPassword} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPassword, 4));
};


/**
 * @param {?proto.msg.InputPassword|undefined} value
 * @return {!proto.msg.AccountChangePhone} returns this
*/
proto.msg.AccountChangePhone.prototype.setPassword = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountChangePhone} returns this
 */
proto.msg.AccountChangePhone.prototype.clearPassword = function() {
  return this.setPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountChangePhone.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountDelete.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phonecodehash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phonecode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: (f = msg.getPassword()) && core_types_pb.InputPassword.toObject(includeInstance, f),
    reason: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountDelete}
 */
proto.msg.AccountDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountDelete;
  return proto.msg.AccountDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountDelete}
 */
proto.msg.AccountDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonecodehash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonecode(value);
      break;
    case 4:
      var value = new core_types_pb.InputPassword;
      reader.readMessage(value,core_types_pb.InputPassword.deserializeBinaryFromReader);
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhonecodehash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPhonecode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      core_types_pb.InputPassword.serializeBinaryToWriter
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string Phone = 1;
 * @return {string}
 */
proto.msg.AccountDelete.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountDelete} returns this
 */
proto.msg.AccountDelete.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string PhoneCodeHash = 2;
 * @return {string}
 */
proto.msg.AccountDelete.prototype.getPhonecodehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountDelete} returns this
 */
proto.msg.AccountDelete.prototype.setPhonecodehash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string PhoneCode = 3;
 * @return {string}
 */
proto.msg.AccountDelete.prototype.getPhonecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountDelete} returns this
 */
proto.msg.AccountDelete.prototype.setPhonecode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional InputPassword Password = 4;
 * @return {?proto.msg.InputPassword}
 */
proto.msg.AccountDelete.prototype.getPassword = function() {
  return /** @type{?proto.msg.InputPassword} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPassword, 4));
};


/**
 * @param {?proto.msg.InputPassword|undefined} value
 * @return {!proto.msg.AccountDelete} returns this
*/
proto.msg.AccountDelete.prototype.setPassword = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountDelete} returns this
 */
proto.msg.AccountDelete.prototype.clearPassword = function() {
  return this.setPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountDelete.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string Reason = 5;
 * @return {string}
 */
proto.msg.AccountDelete.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountDelete} returns this
 */
proto.msg.AccountDelete.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountSetPrivacy.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSetPrivacy.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSetPrivacy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSetPrivacy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetPrivacy.toObject = function(includeInstance, msg) {
  var f, obj = {
    chatinviteList: jspb.Message.toObjectList(msg.getChatinviteList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    lastseenList: jspb.Message.toObjectList(msg.getLastseenList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    phonenumberList: jspb.Message.toObjectList(msg.getPhonenumberList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    profilephotoList: jspb.Message.toObjectList(msg.getProfilephotoList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    forwardedmessageList: jspb.Message.toObjectList(msg.getForwardedmessageList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    callList: jspb.Message.toObjectList(msg.getCallList(),
    core_types_pb.PrivacyRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSetPrivacy}
 */
proto.msg.AccountSetPrivacy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSetPrivacy;
  return proto.msg.AccountSetPrivacy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSetPrivacy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSetPrivacy}
 */
proto.msg.AccountSetPrivacy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addChatinvite(value);
      break;
    case 2:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addLastseen(value);
      break;
    case 3:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addPhonenumber(value);
      break;
    case 4:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addProfilephoto(value);
      break;
    case 5:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addForwardedmessage(value);
      break;
    case 6:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSetPrivacy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSetPrivacy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSetPrivacy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetPrivacy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChatinviteList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getLastseenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getPhonenumberList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getProfilephotoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getForwardedmessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getCallList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PrivacyRule ChatInvite = 1;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.AccountSetPrivacy.prototype.getChatinviteList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 1));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.AccountSetPrivacy} returns this
*/
proto.msg.AccountSetPrivacy.prototype.setChatinviteList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.AccountSetPrivacy.prototype.addChatinvite = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountSetPrivacy} returns this
 */
proto.msg.AccountSetPrivacy.prototype.clearChatinviteList = function() {
  return this.setChatinviteList([]);
};


/**
 * repeated PrivacyRule LastSeen = 2;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.AccountSetPrivacy.prototype.getLastseenList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 2));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.AccountSetPrivacy} returns this
*/
proto.msg.AccountSetPrivacy.prototype.setLastseenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.AccountSetPrivacy.prototype.addLastseen = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountSetPrivacy} returns this
 */
proto.msg.AccountSetPrivacy.prototype.clearLastseenList = function() {
  return this.setLastseenList([]);
};


/**
 * repeated PrivacyRule PhoneNumber = 3;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.AccountSetPrivacy.prototype.getPhonenumberList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 3));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.AccountSetPrivacy} returns this
*/
proto.msg.AccountSetPrivacy.prototype.setPhonenumberList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.AccountSetPrivacy.prototype.addPhonenumber = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountSetPrivacy} returns this
 */
proto.msg.AccountSetPrivacy.prototype.clearPhonenumberList = function() {
  return this.setPhonenumberList([]);
};


/**
 * repeated PrivacyRule ProfilePhoto = 4;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.AccountSetPrivacy.prototype.getProfilephotoList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 4));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.AccountSetPrivacy} returns this
*/
proto.msg.AccountSetPrivacy.prototype.setProfilephotoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.AccountSetPrivacy.prototype.addProfilephoto = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountSetPrivacy} returns this
 */
proto.msg.AccountSetPrivacy.prototype.clearProfilephotoList = function() {
  return this.setProfilephotoList([]);
};


/**
 * repeated PrivacyRule ForwardedMessage = 5;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.AccountSetPrivacy.prototype.getForwardedmessageList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 5));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.AccountSetPrivacy} returns this
*/
proto.msg.AccountSetPrivacy.prototype.setForwardedmessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.AccountSetPrivacy.prototype.addForwardedmessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountSetPrivacy} returns this
 */
proto.msg.AccountSetPrivacy.prototype.clearForwardedmessageList = function() {
  return this.setForwardedmessageList([]);
};


/**
 * repeated PrivacyRule Call = 6;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.AccountSetPrivacy.prototype.getCallList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 6));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.AccountSetPrivacy} returns this
*/
proto.msg.AccountSetPrivacy.prototype.setCallList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.AccountSetPrivacy.prototype.addCall = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountSetPrivacy} returns this
 */
proto.msg.AccountSetPrivacy.prototype.clearCallList = function() {
  return this.setCallList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetPrivacy.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetPrivacy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetPrivacy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetPrivacy.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetPrivacy}
 */
proto.msg.AccountGetPrivacy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetPrivacy;
  return proto.msg.AccountGetPrivacy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetPrivacy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetPrivacy}
 */
proto.msg.AccountGetPrivacy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msg.PrivacyKey} */ (reader.readEnum());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetPrivacy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetPrivacy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetPrivacy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetPrivacy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional PrivacyKey Key = 1;
 * @return {!proto.msg.PrivacyKey}
 */
proto.msg.AccountGetPrivacy.prototype.getKey = function() {
  return /** @type {!proto.msg.PrivacyKey} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.msg.PrivacyKey} value
 * @return {!proto.msg.AccountGetPrivacy} returns this
 */
proto.msg.AccountGetPrivacy.prototype.setKey = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetAuthorizations.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetAuthorizations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetAuthorizations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetAuthorizations.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetAuthorizations}
 */
proto.msg.AccountGetAuthorizations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetAuthorizations;
  return proto.msg.AccountGetAuthorizations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetAuthorizations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetAuthorizations}
 */
proto.msg.AccountGetAuthorizations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetAuthorizations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetAuthorizations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetAuthorizations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetAuthorizations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountResetAuthorization.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountResetAuthorization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountResetAuthorization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountResetAuthorization.toObject = function(includeInstance, msg) {
  var f, obj = {
    authid: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountResetAuthorization}
 */
proto.msg.AccountResetAuthorization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountResetAuthorization;
  return proto.msg.AccountResetAuthorization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountResetAuthorization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountResetAuthorization}
 */
proto.msg.AccountResetAuthorization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAuthid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountResetAuthorization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountResetAuthorization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountResetAuthorization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountResetAuthorization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 AuthID = 1;
 * @return {string}
 */
proto.msg.AccountResetAuthorization.prototype.getAuthid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountResetAuthorization} returns this
 */
proto.msg.AccountResetAuthorization.prototype.setAuthid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdateStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdateStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdateStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    online: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdateStatus}
 */
proto.msg.AccountUpdateStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdateStatus;
  return proto.msg.AccountUpdateStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdateStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdateStatus}
 */
proto.msg.AccountUpdateStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdateStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdateStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdateStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool Online = 1;
 * @return {boolean}
 */
proto.msg.AccountUpdateStatus.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.AccountUpdateStatus} returns this
 */
proto.msg.AccountUpdateStatus.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSetLang.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSetLang.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSetLang} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetLang.toObject = function(includeInstance, msg) {
  var f, obj = {
    langcode: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSetLang}
 */
proto.msg.AccountSetLang.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSetLang;
  return proto.msg.AccountSetLang.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSetLang} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSetLang}
 */
proto.msg.AccountSetLang.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLangcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSetLang.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSetLang.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSetLang} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetLang.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLangcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string LangCode = 1;
 * @return {string}
 */
proto.msg.AccountSetLang.prototype.getLangcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountSetLang} returns this
 */
proto.msg.AccountSetLang.prototype.setLangcode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetPassword.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetPassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetPassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetPassword.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetPassword}
 */
proto.msg.AccountGetPassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetPassword;
  return proto.msg.AccountGetPassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetPassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetPassword}
 */
proto.msg.AccountGetPassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetPassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetPassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetPassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetPassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetPasswordSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetPasswordSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetPasswordSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetPasswordSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    password: (f = msg.getPassword()) && core_types_pb.InputPassword.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetPasswordSettings}
 */
proto.msg.AccountGetPasswordSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetPasswordSettings;
  return proto.msg.AccountGetPasswordSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetPasswordSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetPasswordSettings}
 */
proto.msg.AccountGetPasswordSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPassword;
      reader.readMessage(value,core_types_pb.InputPassword.deserializeBinaryFromReader);
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetPasswordSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetPasswordSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetPasswordSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetPasswordSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassword();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPassword.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputPassword Password = 1;
 * @return {?proto.msg.InputPassword}
 */
proto.msg.AccountGetPasswordSettings.prototype.getPassword = function() {
  return /** @type{?proto.msg.InputPassword} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPassword, 1));
};


/**
 * @param {?proto.msg.InputPassword|undefined} value
 * @return {!proto.msg.AccountGetPasswordSettings} returns this
*/
proto.msg.AccountGetPasswordSettings.prototype.setPassword = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountGetPasswordSettings} returns this
 */
proto.msg.AccountGetPasswordSettings.prototype.clearPassword = function() {
  return this.setPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountGetPasswordSettings.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountUpdatePasswordSettings.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdatePasswordSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdatePasswordSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdatePasswordSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    password: (f = msg.getPassword()) && core_types_pb.InputPassword.toObject(includeInstance, f),
    passwordhash: msg.getPasswordhash_asB64(),
    algorithm: jspb.Message.getFieldWithDefault(msg, 3, 0),
    algorithmdata: msg.getAlgorithmdata_asB64(),
    hint: jspb.Message.getFieldWithDefault(msg, 6, ""),
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.msg.SecurityQuestion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdatePasswordSettings}
 */
proto.msg.AccountUpdatePasswordSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdatePasswordSettings;
  return proto.msg.AccountUpdatePasswordSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdatePasswordSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdatePasswordSettings}
 */
proto.msg.AccountUpdatePasswordSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPassword;
      reader.readMessage(value,core_types_pb.InputPassword.deserializeBinaryFromReader);
      msg.setPassword(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPasswordhash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAlgorithm(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAlgorithmdata(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHint(value);
      break;
    case 7:
      var value = new proto.msg.SecurityQuestion;
      reader.readMessage(value,proto.msg.SecurityQuestion.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdatePasswordSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdatePasswordSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdatePasswordSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassword();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPassword.serializeBinaryToWriter
    );
  }
  f = message.getPasswordhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAlgorithm();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAlgorithmdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getHint();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.msg.SecurityQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputPassword Password = 1;
 * @return {?proto.msg.InputPassword}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getPassword = function() {
  return /** @type{?proto.msg.InputPassword} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPassword, 1));
};


/**
 * @param {?proto.msg.InputPassword|undefined} value
 * @return {!proto.msg.AccountUpdatePasswordSettings} returns this
*/
proto.msg.AccountUpdatePasswordSettings.prototype.setPassword = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.AccountUpdatePasswordSettings} returns this
 */
proto.msg.AccountUpdatePasswordSettings.prototype.clearPassword = function() {
  return this.setPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes PasswordHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getPasswordhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes PasswordHash = 2;
 * This is a type-conversion wrapper around `getPasswordhash()`
 * @return {string}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getPasswordhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPasswordhash()));
};


/**
 * optional bytes PasswordHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPasswordhash()`
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getPasswordhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPasswordhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.AccountUpdatePasswordSettings} returns this
 */
proto.msg.AccountUpdatePasswordSettings.prototype.setPasswordhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 Algorithm = 3;
 * @return {number}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getAlgorithm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.AccountUpdatePasswordSettings} returns this
 */
proto.msg.AccountUpdatePasswordSettings.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes AlgorithmData = 4;
 * @return {!(string|Uint8Array)}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getAlgorithmdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes AlgorithmData = 4;
 * This is a type-conversion wrapper around `getAlgorithmdata()`
 * @return {string}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getAlgorithmdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAlgorithmdata()));
};


/**
 * optional bytes AlgorithmData = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAlgorithmdata()`
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getAlgorithmdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAlgorithmdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.AccountUpdatePasswordSettings} returns this
 */
proto.msg.AccountUpdatePasswordSettings.prototype.setAlgorithmdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string Hint = 6;
 * @return {string}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getHint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountUpdatePasswordSettings} returns this
 */
proto.msg.AccountUpdatePasswordSettings.prototype.setHint = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated SecurityQuestion Questions = 7;
 * @return {!Array<!proto.msg.SecurityQuestion>}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.msg.SecurityQuestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.SecurityQuestion, 7));
};


/**
 * @param {!Array<!proto.msg.SecurityQuestion>} value
 * @return {!proto.msg.AccountUpdatePasswordSettings} returns this
*/
proto.msg.AccountUpdatePasswordSettings.prototype.setQuestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.msg.SecurityQuestion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.SecurityQuestion}
 */
proto.msg.AccountUpdatePasswordSettings.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.msg.SecurityQuestion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountUpdatePasswordSettings} returns this
 */
proto.msg.AccountUpdatePasswordSettings.prototype.clearQuestionsList = function() {
  return this.setQuestionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountRecoverPassword.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountRecoverPassword.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountRecoverPassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountRecoverPassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRecoverPassword.toObject = function(includeInstance, msg) {
  var f, obj = {
    answersList: jspb.Message.toObjectList(msg.getAnswersList(),
    proto.msg.SecurityAnswer.toObject, includeInstance),
    algorithm: jspb.Message.getFieldWithDefault(msg, 2, 0),
    algorithmdata: msg.getAlgorithmdata_asB64(),
    srpid: jspb.Message.getFieldWithDefault(msg, 4, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountRecoverPassword}
 */
proto.msg.AccountRecoverPassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountRecoverPassword;
  return proto.msg.AccountRecoverPassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountRecoverPassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountRecoverPassword}
 */
proto.msg.AccountRecoverPassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.SecurityAnswer;
      reader.readMessage(value,proto.msg.SecurityAnswer.deserializeBinaryFromReader);
      msg.addAnswers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAlgorithm(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAlgorithmdata(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSrpid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountRecoverPassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountRecoverPassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountRecoverPassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRecoverPassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.SecurityAnswer.serializeBinaryToWriter
    );
  }
  f = message.getAlgorithm();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAlgorithmdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSrpid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
};


/**
 * repeated SecurityAnswer Answers = 1;
 * @return {!Array<!proto.msg.SecurityAnswer>}
 */
proto.msg.AccountRecoverPassword.prototype.getAnswersList = function() {
  return /** @type{!Array<!proto.msg.SecurityAnswer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.SecurityAnswer, 1));
};


/**
 * @param {!Array<!proto.msg.SecurityAnswer>} value
 * @return {!proto.msg.AccountRecoverPassword} returns this
*/
proto.msg.AccountRecoverPassword.prototype.setAnswersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.SecurityAnswer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.SecurityAnswer}
 */
proto.msg.AccountRecoverPassword.prototype.addAnswers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.SecurityAnswer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountRecoverPassword} returns this
 */
proto.msg.AccountRecoverPassword.prototype.clearAnswersList = function() {
  return this.setAnswersList([]);
};


/**
 * optional int64 Algorithm = 2;
 * @return {number}
 */
proto.msg.AccountRecoverPassword.prototype.getAlgorithm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.AccountRecoverPassword} returns this
 */
proto.msg.AccountRecoverPassword.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes AlgorithmData = 3;
 * @return {!(string|Uint8Array)}
 */
proto.msg.AccountRecoverPassword.prototype.getAlgorithmdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes AlgorithmData = 3;
 * This is a type-conversion wrapper around `getAlgorithmdata()`
 * @return {string}
 */
proto.msg.AccountRecoverPassword.prototype.getAlgorithmdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAlgorithmdata()));
};


/**
 * optional bytes AlgorithmData = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAlgorithmdata()`
 * @return {!Uint8Array}
 */
proto.msg.AccountRecoverPassword.prototype.getAlgorithmdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAlgorithmdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.AccountRecoverPassword} returns this
 */
proto.msg.AccountRecoverPassword.prototype.setAlgorithmdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 SrpID = 4;
 * @return {string}
 */
proto.msg.AccountRecoverPassword.prototype.getSrpid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountRecoverPassword} returns this
 */
proto.msg.AccountRecoverPassword.prototype.setSrpid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetTeams.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetTeams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetTeams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetTeams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetTeams}
 */
proto.msg.AccountGetTeams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetTeams;
  return proto.msg.AccountGetTeams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetTeams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetTeams}
 */
proto.msg.AccountGetTeams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetTeams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetTeams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetTeams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetTeams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountPasswordSettings.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountPasswordSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountPasswordSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountPasswordSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPasswordSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    hint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.msg.RecoveryQuestion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountPasswordSettings}
 */
proto.msg.AccountPasswordSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountPasswordSettings;
  return proto.msg.AccountPasswordSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountPasswordSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountPasswordSettings}
 */
proto.msg.AccountPasswordSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHint(value);
      break;
    case 3:
      var value = new proto.msg.RecoveryQuestion;
      reader.readMessage(value,proto.msg.RecoveryQuestion.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountPasswordSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountPasswordSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountPasswordSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPasswordSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msg.RecoveryQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Hint = 2;
 * @return {string}
 */
proto.msg.AccountPasswordSettings.prototype.getHint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountPasswordSettings} returns this
 */
proto.msg.AccountPasswordSettings.prototype.setHint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated RecoveryQuestion Questions = 3;
 * @return {!Array<!proto.msg.RecoveryQuestion>}
 */
proto.msg.AccountPasswordSettings.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.msg.RecoveryQuestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.RecoveryQuestion, 3));
};


/**
 * @param {!Array<!proto.msg.RecoveryQuestion>} value
 * @return {!proto.msg.AccountPasswordSettings} returns this
*/
proto.msg.AccountPasswordSettings.prototype.setQuestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.RecoveryQuestion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.RecoveryQuestion}
 */
proto.msg.AccountPasswordSettings.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.RecoveryQuestion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountPasswordSettings} returns this
 */
proto.msg.AccountPasswordSettings.prototype.clearQuestionsList = function() {
  return this.setQuestionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.SecurityQuestions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.SecurityQuestions.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.SecurityQuestions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.SecurityQuestions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.SecurityQuestions.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.msg.SecurityQuestion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.SecurityQuestions}
 */
proto.msg.SecurityQuestions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.SecurityQuestions;
  return proto.msg.SecurityQuestions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.SecurityQuestions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.SecurityQuestions}
 */
proto.msg.SecurityQuestions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.SecurityQuestion;
      reader.readMessage(value,proto.msg.SecurityQuestion.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.SecurityQuestions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.SecurityQuestions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.SecurityQuestions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.SecurityQuestions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.SecurityQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SecurityQuestion Questions = 1;
 * @return {!Array<!proto.msg.SecurityQuestion>}
 */
proto.msg.SecurityQuestions.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.msg.SecurityQuestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.SecurityQuestion, 1));
};


/**
 * @param {!Array<!proto.msg.SecurityQuestion>} value
 * @return {!proto.msg.SecurityQuestions} returns this
*/
proto.msg.SecurityQuestions.prototype.setQuestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.SecurityQuestion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.SecurityQuestion}
 */
proto.msg.SecurityQuestions.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.SecurityQuestion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.SecurityQuestions} returns this
 */
proto.msg.SecurityQuestions.prototype.clearQuestionsList = function() {
  return this.setQuestionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.RecoveryQuestion.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.RecoveryQuestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.RecoveryQuestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.RecoveryQuestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.RecoveryQuestion}
 */
proto.msg.RecoveryQuestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.RecoveryQuestion;
  return proto.msg.RecoveryQuestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.RecoveryQuestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.RecoveryQuestion}
 */
proto.msg.RecoveryQuestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.RecoveryQuestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.RecoveryQuestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.RecoveryQuestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.RecoveryQuestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 ID = 1;
 * @return {number}
 */
proto.msg.RecoveryQuestion.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.RecoveryQuestion} returns this
 */
proto.msg.RecoveryQuestion.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Text = 2;
 * @return {string}
 */
proto.msg.RecoveryQuestion.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.RecoveryQuestion} returns this
 */
proto.msg.RecoveryQuestion.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.SecurityQuestion.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.SecurityQuestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.SecurityQuestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.SecurityQuestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    answer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.SecurityQuestion}
 */
proto.msg.SecurityQuestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.SecurityQuestion;
  return proto.msg.SecurityQuestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.SecurityQuestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.SecurityQuestion}
 */
proto.msg.SecurityQuestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.SecurityQuestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.SecurityQuestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.SecurityQuestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.SecurityQuestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 ID = 1;
 * @return {number}
 */
proto.msg.SecurityQuestion.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.SecurityQuestion} returns this
 */
proto.msg.SecurityQuestion.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Text = 2;
 * @return {string}
 */
proto.msg.SecurityQuestion.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.SecurityQuestion} returns this
 */
proto.msg.SecurityQuestion.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Answer = 3;
 * @return {string}
 */
proto.msg.SecurityQuestion.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.SecurityQuestion} returns this
 */
proto.msg.SecurityQuestion.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.SecurityAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.SecurityAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.SecurityAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.SecurityAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    answer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.SecurityAnswer}
 */
proto.msg.SecurityAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.SecurityAnswer;
  return proto.msg.SecurityAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.SecurityAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.SecurityAnswer}
 */
proto.msg.SecurityAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuestionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.SecurityAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.SecurityAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.SecurityAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.SecurityAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 QuestionID = 1;
 * @return {number}
 */
proto.msg.SecurityAnswer.prototype.getQuestionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.SecurityAnswer} returns this
 */
proto.msg.SecurityAnswer.prototype.setQuestionid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Answer = 2;
 * @return {string}
 */
proto.msg.SecurityAnswer.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.SecurityAnswer} returns this
 */
proto.msg.SecurityAnswer.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountPassword.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountPassword.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountPassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountPassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPassword.toObject = function(includeInstance, msg) {
  var f, obj = {
    haspassword: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    hint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    algorithm: jspb.Message.getFieldWithDefault(msg, 3, 0),
    algorithmdata: msg.getAlgorithmdata_asB64(),
    srpb: msg.getSrpb_asB64(),
    randomdata: msg.getRandomdata_asB64(),
    srpid: jspb.Message.getFieldWithDefault(msg, 7, "0"),
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.msg.RecoveryQuestion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountPassword}
 */
proto.msg.AccountPassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountPassword;
  return proto.msg.AccountPassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountPassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountPassword}
 */
proto.msg.AccountPassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaspassword(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAlgorithm(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAlgorithmdata(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSrpb(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRandomdata(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSrpid(value);
      break;
    case 8:
      var value = new proto.msg.RecoveryQuestion;
      reader.readMessage(value,proto.msg.RecoveryQuestion.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountPassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountPassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountPassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHaspassword();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getHint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAlgorithm();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAlgorithmdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSrpb_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getRandomdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getSrpid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      7,
      f
    );
  }
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.msg.RecoveryQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool HasPassword = 1;
 * @return {boolean}
 */
proto.msg.AccountPassword.prototype.getHaspassword = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.AccountPassword} returns this
 */
proto.msg.AccountPassword.prototype.setHaspassword = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string Hint = 2;
 * @return {string}
 */
proto.msg.AccountPassword.prototype.getHint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountPassword} returns this
 */
proto.msg.AccountPassword.prototype.setHint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 Algorithm = 3;
 * @return {number}
 */
proto.msg.AccountPassword.prototype.getAlgorithm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.AccountPassword} returns this
 */
proto.msg.AccountPassword.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes AlgorithmData = 4;
 * @return {!(string|Uint8Array)}
 */
proto.msg.AccountPassword.prototype.getAlgorithmdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes AlgorithmData = 4;
 * This is a type-conversion wrapper around `getAlgorithmdata()`
 * @return {string}
 */
proto.msg.AccountPassword.prototype.getAlgorithmdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAlgorithmdata()));
};


/**
 * optional bytes AlgorithmData = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAlgorithmdata()`
 * @return {!Uint8Array}
 */
proto.msg.AccountPassword.prototype.getAlgorithmdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAlgorithmdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.AccountPassword} returns this
 */
proto.msg.AccountPassword.prototype.setAlgorithmdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes SrpB = 5;
 * @return {!(string|Uint8Array)}
 */
proto.msg.AccountPassword.prototype.getSrpb = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes SrpB = 5;
 * This is a type-conversion wrapper around `getSrpb()`
 * @return {string}
 */
proto.msg.AccountPassword.prototype.getSrpb_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSrpb()));
};


/**
 * optional bytes SrpB = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSrpb()`
 * @return {!Uint8Array}
 */
proto.msg.AccountPassword.prototype.getSrpb_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSrpb()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.AccountPassword} returns this
 */
proto.msg.AccountPassword.prototype.setSrpb = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes RandomData = 6;
 * @return {!(string|Uint8Array)}
 */
proto.msg.AccountPassword.prototype.getRandomdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes RandomData = 6;
 * This is a type-conversion wrapper around `getRandomdata()`
 * @return {string}
 */
proto.msg.AccountPassword.prototype.getRandomdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRandomdata()));
};


/**
 * optional bytes RandomData = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRandomdata()`
 * @return {!Uint8Array}
 */
proto.msg.AccountPassword.prototype.getRandomdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRandomdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.AccountPassword} returns this
 */
proto.msg.AccountPassword.prototype.setRandomdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional int64 SrpID = 7;
 * @return {string}
 */
proto.msg.AccountPassword.prototype.getSrpid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountPassword} returns this
 */
proto.msg.AccountPassword.prototype.setSrpid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};


/**
 * repeated RecoveryQuestion Questions = 8;
 * @return {!Array<!proto.msg.RecoveryQuestion>}
 */
proto.msg.AccountPassword.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.msg.RecoveryQuestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.RecoveryQuestion, 8));
};


/**
 * @param {!Array<!proto.msg.RecoveryQuestion>} value
 * @return {!proto.msg.AccountPassword} returns this
*/
proto.msg.AccountPassword.prototype.setQuestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.msg.RecoveryQuestion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.RecoveryQuestion}
 */
proto.msg.AccountPassword.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.msg.RecoveryQuestion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountPassword} returns this
 */
proto.msg.AccountPassword.prototype.clearQuestionsList = function() {
  return this.setQuestionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountAuthorizations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountAuthorizations.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountAuthorizations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountAuthorizations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountAuthorizations.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorizationsList: jspb.Message.toObjectList(msg.getAuthorizationsList(),
    proto.msg.AccountAuthorization.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountAuthorizations}
 */
proto.msg.AccountAuthorizations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountAuthorizations;
  return proto.msg.AccountAuthorizations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountAuthorizations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountAuthorizations}
 */
proto.msg.AccountAuthorizations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.AccountAuthorization;
      reader.readMessage(value,proto.msg.AccountAuthorization.deserializeBinaryFromReader);
      msg.addAuthorizations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountAuthorizations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountAuthorizations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountAuthorizations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountAuthorizations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorizationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.AccountAuthorization.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccountAuthorization Authorizations = 1;
 * @return {!Array<!proto.msg.AccountAuthorization>}
 */
proto.msg.AccountAuthorizations.prototype.getAuthorizationsList = function() {
  return /** @type{!Array<!proto.msg.AccountAuthorization>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.AccountAuthorization, 1));
};


/**
 * @param {!Array<!proto.msg.AccountAuthorization>} value
 * @return {!proto.msg.AccountAuthorizations} returns this
*/
proto.msg.AccountAuthorizations.prototype.setAuthorizationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.AccountAuthorization=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.AccountAuthorization}
 */
proto.msg.AccountAuthorizations.prototype.addAuthorizations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.AccountAuthorization, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountAuthorizations} returns this
 */
proto.msg.AccountAuthorizations.prototype.clearAuthorizationsList = function() {
  return this.setAuthorizationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountAuthorization.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountAuthorization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountAuthorization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountAuthorization.toObject = function(includeInstance, msg) {
  var f, obj = {
    authid: jspb.Message.getFieldWithDefault(msg, 100, "0"),
    model: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appversion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    systemversion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    langcode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    activeat: jspb.Message.getFieldWithDefault(msg, 6, 0),
    clientip: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lastaccess: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountAuthorization}
 */
proto.msg.AccountAuthorization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountAuthorization;
  return proto.msg.AccountAuthorization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountAuthorization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountAuthorization}
 */
proto.msg.AccountAuthorization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAuthid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppversion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemversion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLangcode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActiveat(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientip(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastaccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountAuthorization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountAuthorization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountAuthorization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountAuthorization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      100,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppversion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSystemversion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLangcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getActiveat();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getClientip();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLastaccess();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional int64 AuthID = 100;
 * @return {string}
 */
proto.msg.AccountAuthorization.prototype.getAuthid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setAuthid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 100, value);
};


/**
 * optional string Model = 1;
 * @return {string}
 */
proto.msg.AccountAuthorization.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string AppVersion = 2;
 * @return {string}
 */
proto.msg.AccountAuthorization.prototype.getAppversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setAppversion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string SystemVersion = 3;
 * @return {string}
 */
proto.msg.AccountAuthorization.prototype.getSystemversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setSystemversion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string LangCode = 4;
 * @return {string}
 */
proto.msg.AccountAuthorization.prototype.getLangcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setLangcode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 CreatedAt = 5;
 * @return {number}
 */
proto.msg.AccountAuthorization.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 ActiveAt = 6;
 * @return {number}
 */
proto.msg.AccountAuthorization.prototype.getActiveat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setActiveat = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string ClientIP = 7;
 * @return {string}
 */
proto.msg.AccountAuthorization.prototype.getClientip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setClientip = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 LastAccess = 8;
 * @return {number}
 */
proto.msg.AccountAuthorization.prototype.getLastaccess = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.AccountAuthorization} returns this
 */
proto.msg.AccountAuthorization.prototype.setLastaccess = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountPrivacyRules.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountPrivacyRules.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountPrivacyRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountPrivacyRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPrivacyRules.toObject = function(includeInstance, msg) {
  var f, obj = {
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    core_types_pb.PrivacyRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountPrivacyRules}
 */
proto.msg.AccountPrivacyRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountPrivacyRules;
  return proto.msg.AccountPrivacyRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountPrivacyRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountPrivacyRules}
 */
proto.msg.AccountPrivacyRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountPrivacyRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountPrivacyRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountPrivacyRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPrivacyRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PrivacyRule Rules = 1;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.AccountPrivacyRules.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 1));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.AccountPrivacyRules} returns this
*/
proto.msg.AccountPrivacyRules.prototype.setRulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.AccountPrivacyRules.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.AccountPrivacyRules} returns this
 */
proto.msg.AccountPrivacyRules.prototype.clearRulesList = function() {
  return this.setRulesList([]);
};


goog.object.extend(exports, proto.msg);
