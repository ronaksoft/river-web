/* eslint-disable */
// source: chat.phone.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.object.extend(proto, core_types_pb);
goog.exportSymbol('proto.msg.CallDeviceType', null, global);
goog.exportSymbol('proto.msg.DiscardReason', null, global);
goog.exportSymbol('proto.msg.IceServer', null, global);
goog.exportSymbol('proto.msg.PhoneAcceptCall', null, global);
goog.exportSymbol('proto.msg.PhoneActionAccepted', null, global);
goog.exportSymbol('proto.msg.PhoneActionAck', null, global);
goog.exportSymbol('proto.msg.PhoneActionAdminUpdated', null, global);
goog.exportSymbol('proto.msg.PhoneActionCallEmpty', null, global);
goog.exportSymbol('proto.msg.PhoneActionCallWaiting', null, global);
goog.exportSymbol('proto.msg.PhoneActionDiscarded', null, global);
goog.exportSymbol('proto.msg.PhoneActionIceExchange', null, global);
goog.exportSymbol('proto.msg.PhoneActionJoinRequested', null, global);
goog.exportSymbol('proto.msg.PhoneActionMediaSettingsUpdated', null, global);
goog.exportSymbol('proto.msg.PhoneActionParticipantAdded', null, global);
goog.exportSymbol('proto.msg.PhoneActionParticipantRemoved', null, global);
goog.exportSymbol('proto.msg.PhoneActionPicked', null, global);
goog.exportSymbol('proto.msg.PhoneActionReactionSet', null, global);
goog.exportSymbol('proto.msg.PhoneActionRequested', null, global);
goog.exportSymbol('proto.msg.PhoneActionRestarted', null, global);
goog.exportSymbol('proto.msg.PhoneActionSDPAnswer', null, global);
goog.exportSymbol('proto.msg.PhoneActionSDPOffer', null, global);
goog.exportSymbol('proto.msg.PhoneActionScreenShare', null, global);
goog.exportSymbol('proto.msg.PhoneAddParticipant', null, global);
goog.exportSymbol('proto.msg.PhoneCall', null, global);
goog.exportSymbol('proto.msg.PhoneCallAction', null, global);
goog.exportSymbol('proto.msg.PhoneCallRateReason', null, global);
goog.exportSymbol('proto.msg.PhoneCallRecord', null, global);
goog.exportSymbol('proto.msg.PhoneCallsMany', null, global);
goog.exportSymbol('proto.msg.PhoneDeleteHistory', null, global);
goog.exportSymbol('proto.msg.PhoneDiscardCall', null, global);
goog.exportSymbol('proto.msg.PhoneGetCall', null, global);
goog.exportSymbol('proto.msg.PhoneGetHistory', null, global);
goog.exportSymbol('proto.msg.PhoneGetParticipants', null, global);
goog.exportSymbol('proto.msg.PhoneInit', null, global);
goog.exportSymbol('proto.msg.PhoneInitCall', null, global);
goog.exportSymbol('proto.msg.PhoneJoinCall', null, global);
goog.exportSymbol('proto.msg.PhoneParticipant', null, global);
goog.exportSymbol('proto.msg.PhoneParticipantSDP', null, global);
goog.exportSymbol('proto.msg.PhoneParticipants', null, global);
goog.exportSymbol('proto.msg.PhoneRateCall', null, global);
goog.exportSymbol('proto.msg.PhoneRemoveParticipant', null, global);
goog.exportSymbol('proto.msg.PhoneRequestCall', null, global);
goog.exportSymbol('proto.msg.PhoneUpdateAdmin', null, global);
goog.exportSymbol('proto.msg.PhoneUpdateCall', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneInitCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneInitCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneInitCall.displayName = 'proto.msg.PhoneInitCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneRequestCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneRequestCall.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneRequestCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneRequestCall.displayName = 'proto.msg.PhoneRequestCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneAcceptCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneAcceptCall.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneAcceptCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneAcceptCall.displayName = 'proto.msg.PhoneAcceptCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneDiscardCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneDiscardCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneDiscardCall.displayName = 'proto.msg.PhoneDiscardCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneGetCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneGetCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneGetCall.displayName = 'proto.msg.PhoneGetCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneJoinCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneJoinCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneJoinCall.displayName = 'proto.msg.PhoneJoinCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneAddParticipant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneAddParticipant.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneAddParticipant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneAddParticipant.displayName = 'proto.msg.PhoneAddParticipant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneRemoveParticipant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneRemoveParticipant.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneRemoveParticipant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneRemoveParticipant.displayName = 'proto.msg.PhoneRemoveParticipant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneGetParticipants = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneGetParticipants, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneGetParticipants.displayName = 'proto.msg.PhoneGetParticipants';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneUpdateCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneUpdateCall.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneUpdateCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneUpdateCall.displayName = 'proto.msg.PhoneUpdateCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneRateCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneRateCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneRateCall.displayName = 'proto.msg.PhoneRateCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneGetHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneGetHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneGetHistory.displayName = 'proto.msg.PhoneGetHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneDeleteHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneDeleteHistory.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneDeleteHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneDeleteHistory.displayName = 'proto.msg.PhoneDeleteHistory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneCallRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneCallRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneCallRecord.displayName = 'proto.msg.PhoneCallRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneCallsMany = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneCallsMany.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneCallsMany, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneCallsMany.displayName = 'proto.msg.PhoneCallsMany';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneUpdateAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneUpdateAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneUpdateAdmin.displayName = 'proto.msg.PhoneUpdateAdmin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneCall.displayName = 'proto.msg.PhoneCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneInit.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneInit.displayName = 'proto.msg.PhoneInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneParticipants = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneParticipants.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneParticipants, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneParticipants.displayName = 'proto.msg.PhoneParticipants';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.IceServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.IceServer.repeatedFields_, null);
};
goog.inherits(proto.msg.IceServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.IceServer.displayName = 'proto.msg.IceServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneParticipant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneParticipant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneParticipant.displayName = 'proto.msg.PhoneParticipant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneParticipantSDP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneParticipantSDP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneParticipantSDP.displayName = 'proto.msg.PhoneParticipantSDP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionCallEmpty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionCallEmpty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionCallEmpty.displayName = 'proto.msg.PhoneActionCallEmpty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionAccepted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionAccepted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionAccepted.displayName = 'proto.msg.PhoneActionAccepted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionRequested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneActionRequested.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneActionRequested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionRequested.displayName = 'proto.msg.PhoneActionRequested';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionCallWaiting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionCallWaiting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionCallWaiting.displayName = 'proto.msg.PhoneActionCallWaiting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionDiscarded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionDiscarded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionDiscarded.displayName = 'proto.msg.PhoneActionDiscarded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionIceExchange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionIceExchange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionIceExchange.displayName = 'proto.msg.PhoneActionIceExchange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionAck.displayName = 'proto.msg.PhoneActionAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionParticipantAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneActionParticipantAdded.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneActionParticipantAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionParticipantAdded.displayName = 'proto.msg.PhoneActionParticipantAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionParticipantRemoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneActionParticipantRemoved.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneActionParticipantRemoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionParticipantRemoved.displayName = 'proto.msg.PhoneActionParticipantRemoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionJoinRequested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneActionJoinRequested.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneActionJoinRequested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionJoinRequested.displayName = 'proto.msg.PhoneActionJoinRequested';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionAdminUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionAdminUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionAdminUpdated.displayName = 'proto.msg.PhoneActionAdminUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionScreenShare = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneActionScreenShare.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneActionScreenShare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionScreenShare.displayName = 'proto.msg.PhoneActionScreenShare';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionPicked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionPicked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionPicked.displayName = 'proto.msg.PhoneActionPicked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionRestarted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionRestarted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionRestarted.displayName = 'proto.msg.PhoneActionRestarted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionMediaSettingsUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionMediaSettingsUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionMediaSettingsUpdated.displayName = 'proto.msg.PhoneActionMediaSettingsUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionReactionSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionReactionSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionReactionSet.displayName = 'proto.msg.PhoneActionReactionSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionSDPOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionSDPOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionSDPOffer.displayName = 'proto.msg.PhoneActionSDPOffer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionSDPAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionSDPAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionSDPAnswer.displayName = 'proto.msg.PhoneActionSDPAnswer';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneInitCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneInitCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneInitCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneInitCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneInitCall}
 */
proto.msg.PhoneInitCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneInitCall;
  return proto.msg.PhoneInitCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneInitCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneInitCall}
 */
proto.msg.PhoneInitCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneInitCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneInitCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneInitCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneInitCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneInitCall.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneInitCall} returns this
*/
proto.msg.PhoneInitCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneInitCall} returns this
 */
proto.msg.PhoneInitCall.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneInitCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneInitCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneInitCall} returns this
 */
proto.msg.PhoneInitCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneRequestCall.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneRequestCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneRequestCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneRequestCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRequestCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    initiator: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.PhoneParticipantSDP.toObject, includeInstance),
    callid: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    devicetype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    video: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneRequestCall}
 */
proto.msg.PhoneRequestCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneRequestCall;
  return proto.msg.PhoneRequestCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneRequestCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneRequestCall}
 */
proto.msg.PhoneRequestCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInitiator(value);
      break;
    case 4:
      var value = new proto.msg.PhoneParticipantSDP;
      reader.readMessage(value,proto.msg.PhoneParticipantSDP.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 6:
      var value = /** @type {!proto.msg.CallDeviceType} */ (reader.readEnum());
      msg.setDevicetype(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneRequestCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneRequestCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneRequestCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRequestCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandomid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getInitiator();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.msg.PhoneParticipantSDP.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getDevicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getVideo();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional int64 RandomID = 1;
 * @return {number}
 */
proto.msg.PhoneRequestCall.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setRandomid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional InputPeer Peer = 2;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneRequestCall.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneRequestCall} returns this
*/
proto.msg.PhoneRequestCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool Initiator = 3;
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.getInitiator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setInitiator = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated PhoneParticipantSDP Participants = 4;
 * @return {!Array<!proto.msg.PhoneParticipantSDP>}
 */
proto.msg.PhoneRequestCall.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.PhoneParticipantSDP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneParticipantSDP, 4));
};


/**
 * @param {!Array<!proto.msg.PhoneParticipantSDP>} value
 * @return {!proto.msg.PhoneRequestCall} returns this
*/
proto.msg.PhoneRequestCall.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.PhoneParticipantSDP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneParticipantSDP}
 */
proto.msg.PhoneRequestCall.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.PhoneParticipantSDP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional int64 CallID = 5;
 * @return {string}
 */
proto.msg.PhoneRequestCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional CallDeviceType DeviceType = 6;
 * @return {!proto.msg.CallDeviceType}
 */
proto.msg.PhoneRequestCall.prototype.getDevicetype = function() {
  return /** @type {!proto.msg.CallDeviceType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.msg.CallDeviceType} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool Video = 7;
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.getVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setVideo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneAcceptCall.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneAcceptCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneAcceptCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneAcceptCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneAcceptCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.PhoneParticipantSDP.toObject, includeInstance),
    devicetype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneAcceptCall}
 */
proto.msg.PhoneAcceptCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneAcceptCall;
  return proto.msg.PhoneAcceptCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneAcceptCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneAcceptCall}
 */
proto.msg.PhoneAcceptCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = new proto.msg.PhoneParticipantSDP;
      reader.readMessage(value,proto.msg.PhoneParticipantSDP.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 4:
      var value = /** @type {!proto.msg.CallDeviceType} */ (reader.readEnum());
      msg.setDevicetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneAcceptCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneAcceptCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneAcceptCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneAcceptCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msg.PhoneParticipantSDP.serializeBinaryToWriter
    );
  }
  f = message.getDevicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneAcceptCall.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
*/
proto.msg.PhoneAcceptCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneAcceptCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneAcceptCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * repeated PhoneParticipantSDP Participants = 3;
 * @return {!Array<!proto.msg.PhoneParticipantSDP>}
 */
proto.msg.PhoneAcceptCall.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.PhoneParticipantSDP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneParticipantSDP, 3));
};


/**
 * @param {!Array<!proto.msg.PhoneParticipantSDP>} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
*/
proto.msg.PhoneAcceptCall.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.PhoneParticipantSDP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneParticipantSDP}
 */
proto.msg.PhoneAcceptCall.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.PhoneParticipantSDP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional CallDeviceType DeviceType = 4;
 * @return {!proto.msg.CallDeviceType}
 */
proto.msg.PhoneAcceptCall.prototype.getDevicetype = function() {
  return /** @type {!proto.msg.CallDeviceType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.msg.CallDeviceType} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneDiscardCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneDiscardCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneDiscardCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneDiscardCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    duration: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneDiscardCall}
 */
proto.msg.PhoneDiscardCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneDiscardCall;
  return proto.msg.PhoneDiscardCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneDiscardCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneDiscardCall}
 */
proto.msg.PhoneDiscardCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {!proto.msg.DiscardReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneDiscardCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneDiscardCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneDiscardCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneDiscardCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneDiscardCall.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
*/
proto.msg.PhoneDiscardCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneDiscardCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int32 Duration = 4;
 * @return {number}
 */
proto.msg.PhoneDiscardCall.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional DiscardReason Reason = 5;
 * @return {!proto.msg.DiscardReason}
 */
proto.msg.PhoneDiscardCall.prototype.getReason = function() {
  return /** @type {!proto.msg.DiscardReason} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.msg.DiscardReason} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneGetCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneGetCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneGetCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneGetCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneGetCall}
 */
proto.msg.PhoneGetCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneGetCall;
  return proto.msg.PhoneGetCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneGetCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneGetCall}
 */
proto.msg.PhoneGetCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneGetCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneGetCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneGetCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneGetCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneGetCall.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneGetCall} returns this
*/
proto.msg.PhoneGetCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneGetCall} returns this
 */
proto.msg.PhoneGetCall.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneGetCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneGetCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneGetCall} returns this
 */
proto.msg.PhoneGetCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneJoinCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneJoinCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneJoinCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneJoinCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneJoinCall}
 */
proto.msg.PhoneJoinCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneJoinCall;
  return proto.msg.PhoneJoinCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneJoinCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneJoinCall}
 */
proto.msg.PhoneJoinCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneJoinCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneJoinCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneJoinCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneJoinCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneJoinCall.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneJoinCall} returns this
*/
proto.msg.PhoneJoinCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneJoinCall} returns this
 */
proto.msg.PhoneJoinCall.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneJoinCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneJoinCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneJoinCall} returns this
 */
proto.msg.PhoneJoinCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneAddParticipant.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneAddParticipant.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneAddParticipant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneAddParticipant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneAddParticipant.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    core_types_pb.InputUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneAddParticipant}
 */
proto.msg.PhoneAddParticipant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneAddParticipant;
  return proto.msg.PhoneAddParticipant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneAddParticipant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneAddParticipant}
 */
proto.msg.PhoneAddParticipant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneAddParticipant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneAddParticipant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneAddParticipant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneAddParticipant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneAddParticipant.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneAddParticipant} returns this
*/
proto.msg.PhoneAddParticipant.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneAddParticipant} returns this
 */
proto.msg.PhoneAddParticipant.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneAddParticipant.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneAddParticipant.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneAddParticipant} returns this
 */
proto.msg.PhoneAddParticipant.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * repeated InputUser Participants = 3;
 * @return {!Array<!proto.msg.InputUser>}
 */
proto.msg.PhoneAddParticipant.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.InputUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputUser, 3));
};


/**
 * @param {!Array<!proto.msg.InputUser>} value
 * @return {!proto.msg.PhoneAddParticipant} returns this
*/
proto.msg.PhoneAddParticipant.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.InputUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneAddParticipant.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.InputUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneAddParticipant} returns this
 */
proto.msg.PhoneAddParticipant.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneRemoveParticipant.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneRemoveParticipant.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneRemoveParticipant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneRemoveParticipant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRemoveParticipant.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    core_types_pb.InputUser.toObject, includeInstance),
    timeout: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneRemoveParticipant}
 */
proto.msg.PhoneRemoveParticipant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneRemoveParticipant;
  return proto.msg.PhoneRemoveParticipant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneRemoveParticipant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneRemoveParticipant}
 */
proto.msg.PhoneRemoveParticipant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneRemoveParticipant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneRemoveParticipant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneRemoveParticipant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRemoveParticipant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneRemoveParticipant.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneRemoveParticipant} returns this
*/
proto.msg.PhoneRemoveParticipant.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneRemoveParticipant} returns this
 */
proto.msg.PhoneRemoveParticipant.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRemoveParticipant.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneRemoveParticipant.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneRemoveParticipant} returns this
 */
proto.msg.PhoneRemoveParticipant.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * repeated InputUser Participants = 3;
 * @return {!Array<!proto.msg.InputUser>}
 */
proto.msg.PhoneRemoveParticipant.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.InputUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputUser, 3));
};


/**
 * @param {!Array<!proto.msg.InputUser>} value
 * @return {!proto.msg.PhoneRemoveParticipant} returns this
*/
proto.msg.PhoneRemoveParticipant.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.InputUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneRemoveParticipant.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.InputUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneRemoveParticipant} returns this
 */
proto.msg.PhoneRemoveParticipant.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional bool Timeout = 4;
 * @return {boolean}
 */
proto.msg.PhoneRemoveParticipant.prototype.getTimeout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneRemoveParticipant} returns this
 */
proto.msg.PhoneRemoveParticipant.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneGetParticipants.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneGetParticipants.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneGetParticipants} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneGetParticipants.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneGetParticipants}
 */
proto.msg.PhoneGetParticipants.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneGetParticipants;
  return proto.msg.PhoneGetParticipants.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneGetParticipants} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneGetParticipants}
 */
proto.msg.PhoneGetParticipants.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneGetParticipants.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneGetParticipants.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneGetParticipants} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneGetParticipants.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneGetParticipants.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneGetParticipants} returns this
*/
proto.msg.PhoneGetParticipants.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneGetParticipants} returns this
 */
proto.msg.PhoneGetParticipants.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneGetParticipants.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneGetParticipants.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneGetParticipants} returns this
 */
proto.msg.PhoneGetParticipants.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneUpdateCall.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneUpdateCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneUpdateCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneUpdateCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneUpdateCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    core_types_pb.InputUser.toObject, includeInstance),
    action: jspb.Message.getFieldWithDefault(msg, 7, 0),
    actiondata: msg.getActiondata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneUpdateCall}
 */
proto.msg.PhoneUpdateCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneUpdateCall;
  return proto.msg.PhoneUpdateCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneUpdateCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneUpdateCall}
 */
proto.msg.PhoneUpdateCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 7:
      var value = /** @type {!proto.msg.PhoneCallAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActiondata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneUpdateCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneUpdateCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneUpdateCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneUpdateCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getActiondata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneUpdateCall.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
*/
proto.msg.PhoneUpdateCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneUpdateCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneUpdateCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * repeated InputUser Participants = 3;
 * @return {!Array<!proto.msg.InputUser>}
 */
proto.msg.PhoneUpdateCall.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.InputUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputUser, 3));
};


/**
 * @param {!Array<!proto.msg.InputUser>} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
*/
proto.msg.PhoneUpdateCall.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.InputUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneUpdateCall.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.InputUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional PhoneCallAction Action = 7;
 * @return {!proto.msg.PhoneCallAction}
 */
proto.msg.PhoneUpdateCall.prototype.getAction = function() {
  return /** @type {!proto.msg.PhoneCallAction} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.msg.PhoneCallAction} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional bytes ActionData = 8;
 * @return {!(string|Uint8Array)}
 */
proto.msg.PhoneUpdateCall.prototype.getActiondata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes ActionData = 8;
 * This is a type-conversion wrapper around `getActiondata()`
 * @return {string}
 */
proto.msg.PhoneUpdateCall.prototype.getActiondata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActiondata()));
};


/**
 * optional bytes ActionData = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActiondata()`
 * @return {!Uint8Array}
 */
proto.msg.PhoneUpdateCall.prototype.getActiondata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActiondata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.setActiondata = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneRateCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneRateCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneRateCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRateCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    rate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reasontype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reasondata: msg.getReasondata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneRateCall}
 */
proto.msg.PhoneRateCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneRateCall;
  return proto.msg.PhoneRateCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneRateCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneRateCall}
 */
proto.msg.PhoneRateCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRate(value);
      break;
    case 4:
      var value = /** @type {!proto.msg.PhoneCallRateReason} */ (reader.readEnum());
      msg.setReasontype(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReasondata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneRateCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneRateCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneRateCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRateCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getRate();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getReasontype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getReasondata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneRateCall.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneRateCall} returns this
*/
proto.msg.PhoneRateCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRateCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneRateCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int32 Rate = 3;
 * @return {number}
 */
proto.msg.PhoneRateCall.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.setRate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional PhoneCallRateReason ReasonType = 4;
 * @return {!proto.msg.PhoneCallRateReason}
 */
proto.msg.PhoneRateCall.prototype.getReasontype = function() {
  return /** @type {!proto.msg.PhoneCallRateReason} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.msg.PhoneCallRateReason} value
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.setReasontype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes ReasonData = 5;
 * @return {!(string|Uint8Array)}
 */
proto.msg.PhoneRateCall.prototype.getReasondata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes ReasonData = 5;
 * This is a type-conversion wrapper around `getReasondata()`
 * @return {string}
 */
proto.msg.PhoneRateCall.prototype.getReasondata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReasondata()));
};


/**
 * optional bytes ReasonData = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReasondata()`
 * @return {!Uint8Array}
 */
proto.msg.PhoneRateCall.prototype.getReasondata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReasondata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.setReasondata = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneGetHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneGetHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneGetHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneGetHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    after: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneGetHistory}
 */
proto.msg.PhoneGetHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneGetHistory;
  return proto.msg.PhoneGetHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneGetHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneGetHistory}
 */
proto.msg.PhoneGetHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneGetHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneGetHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneGetHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneGetHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAfter();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 Limit = 1;
 * @return {number}
 */
proto.msg.PhoneGetHistory.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneGetHistory} returns this
 */
proto.msg.PhoneGetHistory.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 After = 2;
 * @return {number}
 */
proto.msg.PhoneGetHistory.prototype.getAfter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneGetHistory} returns this
 */
proto.msg.PhoneGetHistory.prototype.setAfter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneDeleteHistory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneDeleteHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneDeleteHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneDeleteHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneDeleteHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    callidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneDeleteHistory}
 */
proto.msg.PhoneDeleteHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneDeleteHistory;
  return proto.msg.PhoneDeleteHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneDeleteHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneDeleteHistory}
 */
proto.msg.PhoneDeleteHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<string>} */ (reader.readPackedInt64String());
      msg.setCallidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneDeleteHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneDeleteHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneDeleteHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneDeleteHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallidsList();
  if (f.length > 0) {
    writer.writePackedInt64String(
      1,
      f
    );
  }
};


/**
 * repeated int64 CallIDs = 1;
 * @return {!Array<string>}
 */
proto.msg.PhoneDeleteHistory.prototype.getCallidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.PhoneDeleteHistory} returns this
 */
proto.msg.PhoneDeleteHistory.prototype.setCallidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneDeleteHistory} returns this
 */
proto.msg.PhoneDeleteHistory.prototype.addCallids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneDeleteHistory} returns this
 */
proto.msg.PhoneDeleteHistory.prototype.clearCallidsList = function() {
  return this.setCallidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneCallRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneCallRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneCallRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCallRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    teamid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    callid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    createdon: jspb.Message.getFieldWithDefault(msg, 4, 0),
    endedon: jspb.Message.getFieldWithDefault(msg, 5, 0),
    incoming: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    peerid: jspb.Message.getFieldWithDefault(msg, 7, "0"),
    peertype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    status: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneCallRecord}
 */
proto.msg.PhoneCallRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneCallRecord;
  return proto.msg.PhoneCallRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneCallRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneCallRecord}
 */
proto.msg.PhoneCallRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndedon(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncoming(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneCallRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneCallRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneCallRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCallRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getCreatedon();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getEndedon();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getIncoming();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getPeerid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      7,
      f
    );
  }
  f = message.getPeertype();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional int64 UserID = 1;
 * @return {string}
 */
proto.msg.PhoneCallRecord.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 TeamID = 2;
 * @return {string}
 */
proto.msg.PhoneCallRecord.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 CallID = 3;
 * @return {string}
 */
proto.msg.PhoneCallRecord.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional int64 CreatedOn = 4;
 * @return {number}
 */
proto.msg.PhoneCallRecord.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setCreatedon = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 EndedOn = 5;
 * @return {number}
 */
proto.msg.PhoneCallRecord.prototype.getEndedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setEndedon = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool Incoming = 6;
 * @return {boolean}
 */
proto.msg.PhoneCallRecord.prototype.getIncoming = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setIncoming = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 PeerID = 7;
 * @return {string}
 */
proto.msg.PhoneCallRecord.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setPeerid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};


/**
 * optional int32 PeerType = 8;
 * @return {number}
 */
proto.msg.PhoneCallRecord.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setPeertype = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 Status = 9;
 * @return {number}
 */
proto.msg.PhoneCallRecord.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCallRecord} returns this
 */
proto.msg.PhoneCallRecord.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneCallsMany.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneCallsMany.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneCallsMany.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneCallsMany} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCallsMany.toObject = function(includeInstance, msg) {
  var f, obj = {
    phonecallsList: jspb.Message.toObjectList(msg.getPhonecallsList(),
    proto.msg.PhoneCallRecord.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    core_types_pb.User.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    core_types_pb.Group.toObject, includeInstance),
    continuous: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    empty: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneCallsMany}
 */
proto.msg.PhoneCallsMany.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneCallsMany;
  return proto.msg.PhoneCallsMany.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneCallsMany} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneCallsMany}
 */
proto.msg.PhoneCallsMany.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.PhoneCallRecord;
      reader.readMessage(value,proto.msg.PhoneCallRecord.deserializeBinaryFromReader);
      msg.addPhonecalls(value);
      break;
    case 2:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 3:
      var value = new core_types_pb.Group;
      reader.readMessage(value,core_types_pb.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContinuous(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneCallsMany.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneCallsMany.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneCallsMany} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCallsMany.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhonecallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.PhoneCallRecord.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.Group.serializeBinaryToWriter
    );
  }
  f = message.getContinuous();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getEmpty();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated PhoneCallRecord PhoneCalls = 1;
 * @return {!Array<!proto.msg.PhoneCallRecord>}
 */
proto.msg.PhoneCallsMany.prototype.getPhonecallsList = function() {
  return /** @type{!Array<!proto.msg.PhoneCallRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneCallRecord, 1));
};


/**
 * @param {!Array<!proto.msg.PhoneCallRecord>} value
 * @return {!proto.msg.PhoneCallsMany} returns this
*/
proto.msg.PhoneCallsMany.prototype.setPhonecallsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.PhoneCallRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneCallRecord}
 */
proto.msg.PhoneCallsMany.prototype.addPhonecalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.PhoneCallRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneCallsMany} returns this
 */
proto.msg.PhoneCallsMany.prototype.clearPhonecallsList = function() {
  return this.setPhonecallsList([]);
};


/**
 * repeated User Users = 2;
 * @return {!Array<!proto.msg.User>}
 */
proto.msg.PhoneCallsMany.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.User, 2));
};


/**
 * @param {!Array<!proto.msg.User>} value
 * @return {!proto.msg.PhoneCallsMany} returns this
*/
proto.msg.PhoneCallsMany.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.PhoneCallsMany.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneCallsMany} returns this
 */
proto.msg.PhoneCallsMany.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated Group Groups = 3;
 * @return {!Array<!proto.msg.Group>}
 */
proto.msg.PhoneCallsMany.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.msg.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Group, 3));
};


/**
 * @param {!Array<!proto.msg.Group>} value
 * @return {!proto.msg.PhoneCallsMany} returns this
*/
proto.msg.PhoneCallsMany.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Group}
 */
proto.msg.PhoneCallsMany.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneCallsMany} returns this
 */
proto.msg.PhoneCallsMany.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * optional bool Continuous = 4;
 * @return {boolean}
 */
proto.msg.PhoneCallsMany.prototype.getContinuous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneCallsMany} returns this
 */
proto.msg.PhoneCallsMany.prototype.setContinuous = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool Empty = 5;
 * @return {boolean}
 */
proto.msg.PhoneCallsMany.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneCallsMany} returns this
 */
proto.msg.PhoneCallsMany.prototype.setEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneUpdateAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneUpdateAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneUpdateAdmin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneUpdateAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    user: (f = msg.getUser()) && core_types_pb.InputUser.toObject(includeInstance, f),
    admin: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneUpdateAdmin}
 */
proto.msg.PhoneUpdateAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneUpdateAdmin;
  return proto.msg.PhoneUpdateAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneUpdateAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneUpdateAdmin}
 */
proto.msg.PhoneUpdateAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneUpdateAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneUpdateAdmin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneUpdateAdmin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneUpdateAdmin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = message.getAdmin();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.PhoneUpdateAdmin.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.PhoneUpdateAdmin} returns this
*/
proto.msg.PhoneUpdateAdmin.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneUpdateAdmin} returns this
 */
proto.msg.PhoneUpdateAdmin.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneUpdateAdmin.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneUpdateAdmin.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneUpdateAdmin} returns this
 */
proto.msg.PhoneUpdateAdmin.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional InputUser User = 3;
 * @return {?proto.msg.InputUser}
 */
proto.msg.PhoneUpdateAdmin.prototype.getUser = function() {
  return /** @type{?proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputUser, 3));
};


/**
 * @param {?proto.msg.InputUser|undefined} value
 * @return {!proto.msg.PhoneUpdateAdmin} returns this
*/
proto.msg.PhoneUpdateAdmin.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneUpdateAdmin} returns this
 */
proto.msg.PhoneUpdateAdmin.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneUpdateAdmin.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool Admin = 4;
 * @return {boolean}
 */
proto.msg.PhoneUpdateAdmin.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneUpdateAdmin} returns this
 */
proto.msg.PhoneUpdateAdmin.prototype.setAdmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    createdon: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneCall}
 */
proto.msg.PhoneCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneCall;
  return proto.msg.PhoneCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneCall}
 */
proto.msg.PhoneCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getCreatedon();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 ID = 1;
 * @return {string}
 */
proto.msg.PhoneCall.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 CreatedOn = 2;
 * @return {number}
 */
proto.msg.PhoneCall.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setCreatedon = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneInit.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneInit.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    iceserversList: jspb.Message.toObjectList(msg.getIceserversList(),
    proto.msg.IceServer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneInit}
 */
proto.msg.PhoneInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneInit;
  return proto.msg.PhoneInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneInit}
 */
proto.msg.PhoneInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.IceServer;
      reader.readMessage(value,proto.msg.IceServer.deserializeBinaryFromReader);
      msg.addIceservers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIceserversList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.IceServer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IceServer IceServers = 1;
 * @return {!Array<!proto.msg.IceServer>}
 */
proto.msg.PhoneInit.prototype.getIceserversList = function() {
  return /** @type{!Array<!proto.msg.IceServer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.IceServer, 1));
};


/**
 * @param {!Array<!proto.msg.IceServer>} value
 * @return {!proto.msg.PhoneInit} returns this
*/
proto.msg.PhoneInit.prototype.setIceserversList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.IceServer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.IceServer}
 */
proto.msg.PhoneInit.prototype.addIceservers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.IceServer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneInit} returns this
 */
proto.msg.PhoneInit.prototype.clearIceserversList = function() {
  return this.setIceserversList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneParticipants.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneParticipants.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneParticipants.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneParticipants} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipants.toObject = function(includeInstance, msg) {
  var f, obj = {
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.PhoneParticipant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneParticipants}
 */
proto.msg.PhoneParticipants.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneParticipants;
  return proto.msg.PhoneParticipants.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneParticipants} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneParticipants}
 */
proto.msg.PhoneParticipants.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.PhoneParticipant;
      reader.readMessage(value,proto.msg.PhoneParticipant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneParticipants.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneParticipants.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneParticipants} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipants.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.PhoneParticipant.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PhoneParticipant Participants = 1;
 * @return {!Array<!proto.msg.PhoneParticipant>}
 */
proto.msg.PhoneParticipants.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.PhoneParticipant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneParticipant, 1));
};


/**
 * @param {!Array<!proto.msg.PhoneParticipant>} value
 * @return {!proto.msg.PhoneParticipants} returns this
*/
proto.msg.PhoneParticipants.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.PhoneParticipant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneParticipant}
 */
proto.msg.PhoneParticipants.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.PhoneParticipant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneParticipants} returns this
 */
proto.msg.PhoneParticipants.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.IceServer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.IceServer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.IceServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.IceServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.IceServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    urlsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    credential: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.IceServer}
 */
proto.msg.IceServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.IceServer;
  return proto.msg.IceServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.IceServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.IceServer}
 */
proto.msg.IceServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.IceServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.IceServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.IceServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.IceServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCredential();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated string Urls = 1;
 * @return {!Array<string>}
 */
proto.msg.IceServer.prototype.getUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.setUrlsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.addUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.clearUrlsList = function() {
  return this.setUrlsList([]);
};


/**
 * optional string Username = 2;
 * @return {string}
 */
proto.msg.IceServer.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Credential = 3;
 * @return {string}
 */
proto.msg.IceServer.prototype.getCredential = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.setCredential = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneParticipant.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneParticipant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneParticipant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipant.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    peer: (f = msg.getPeer()) && core_types_pb.InputUser.toObject(includeInstance, f),
    initiator: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    admin: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneParticipant}
 */
proto.msg.PhoneParticipant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneParticipant;
  return proto.msg.PhoneParticipant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneParticipant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneParticipant}
 */
proto.msg.PhoneParticipant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInitiator(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneParticipant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneParticipant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneParticipant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = message.getInitiator();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAdmin();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 ConnectionId = 1;
 * @return {number}
 */
proto.msg.PhoneParticipant.prototype.getConnectionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.setConnectionid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional InputUser Peer = 2;
 * @return {?proto.msg.InputUser}
 */
proto.msg.PhoneParticipant.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputUser, 2));
};


/**
 * @param {?proto.msg.InputUser|undefined} value
 * @return {!proto.msg.PhoneParticipant} returns this
*/
proto.msg.PhoneParticipant.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool Initiator = 3;
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.getInitiator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.setInitiator = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool Admin = 4;
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.setAdmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneParticipantSDP.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneParticipantSDP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneParticipantSDP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipantSDP.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    peer: (f = msg.getPeer()) && core_types_pb.InputUser.toObject(includeInstance, f),
    sdp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneParticipantSDP}
 */
proto.msg.PhoneParticipantSDP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneParticipantSDP;
  return proto.msg.PhoneParticipantSDP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneParticipantSDP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneParticipantSDP}
 */
proto.msg.PhoneParticipantSDP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneParticipantSDP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneParticipantSDP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneParticipantSDP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipantSDP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 ConnectionId = 1;
 * @return {number}
 */
proto.msg.PhoneParticipantSDP.prototype.getConnectionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.setConnectionid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional InputUser Peer = 2;
 * @return {?proto.msg.InputUser}
 */
proto.msg.PhoneParticipantSDP.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputUser, 2));
};


/**
 * @param {?proto.msg.InputUser|undefined} value
 * @return {!proto.msg.PhoneParticipantSDP} returns this
*/
proto.msg.PhoneParticipantSDP.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipantSDP.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string SDP = 3;
 * @return {string}
 */
proto.msg.PhoneParticipantSDP.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Type = 4;
 * @return {string}
 */
proto.msg.PhoneParticipantSDP.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionCallEmpty.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionCallEmpty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionCallEmpty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionCallEmpty.toObject = function(includeInstance, msg) {
  var f, obj = {
    empty: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionCallEmpty}
 */
proto.msg.PhoneActionCallEmpty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionCallEmpty;
  return proto.msg.PhoneActionCallEmpty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionCallEmpty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionCallEmpty}
 */
proto.msg.PhoneActionCallEmpty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionCallEmpty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionCallEmpty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionCallEmpty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionCallEmpty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmpty();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool Empty = 1;
 * @return {boolean}
 */
proto.msg.PhoneActionCallEmpty.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionCallEmpty} returns this
 */
proto.msg.PhoneActionCallEmpty.prototype.setEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionAccepted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionAccepted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionAccepted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionAccepted.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicetype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionAccepted}
 */
proto.msg.PhoneActionAccepted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionAccepted;
  return proto.msg.PhoneActionAccepted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionAccepted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionAccepted}
 */
proto.msg.PhoneActionAccepted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.msg.CallDeviceType} */ (reader.readEnum());
      msg.setDevicetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionAccepted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionAccepted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionAccepted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionAccepted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string SDP = 1;
 * @return {string}
 */
proto.msg.PhoneActionAccepted.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionAccepted} returns this
 */
proto.msg.PhoneActionAccepted.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.msg.PhoneActionAccepted.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionAccepted} returns this
 */
proto.msg.PhoneActionAccepted.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CallDeviceType DeviceType = 3;
 * @return {!proto.msg.CallDeviceType}
 */
proto.msg.PhoneActionAccepted.prototype.getDevicetype = function() {
  return /** @type {!proto.msg.CallDeviceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.msg.CallDeviceType} value
 * @return {!proto.msg.PhoneActionAccepted} returns this
 */
proto.msg.PhoneActionAccepted.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneActionRequested.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionRequested.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionRequested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionRequested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionRequested.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.PhoneParticipant.toObject, includeInstance),
    devicetype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    video: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionRequested}
 */
proto.msg.PhoneActionRequested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionRequested;
  return proto.msg.PhoneActionRequested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionRequested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionRequested}
 */
proto.msg.PhoneActionRequested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.msg.PhoneParticipant;
      reader.readMessage(value,proto.msg.PhoneParticipant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 4:
      var value = /** @type {!proto.msg.CallDeviceType} */ (reader.readEnum());
      msg.setDevicetype(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionRequested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionRequested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionRequested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionRequested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msg.PhoneParticipant.serializeBinaryToWriter
    );
  }
  f = message.getDevicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getVideo();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string SDP = 1;
 * @return {string}
 */
proto.msg.PhoneActionRequested.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.msg.PhoneActionRequested.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PhoneParticipant Participants = 3;
 * @return {!Array<!proto.msg.PhoneParticipant>}
 */
proto.msg.PhoneActionRequested.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.PhoneParticipant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneParticipant, 3));
};


/**
 * @param {!Array<!proto.msg.PhoneParticipant>} value
 * @return {!proto.msg.PhoneActionRequested} returns this
*/
proto.msg.PhoneActionRequested.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.PhoneParticipant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneParticipant}
 */
proto.msg.PhoneActionRequested.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.PhoneParticipant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional CallDeviceType DeviceType = 4;
 * @return {!proto.msg.CallDeviceType}
 */
proto.msg.PhoneActionRequested.prototype.getDevicetype = function() {
  return /** @type {!proto.msg.CallDeviceType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.msg.CallDeviceType} value
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.setDevicetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool Video = 5;
 * @return {boolean}
 */
proto.msg.PhoneActionRequested.prototype.getVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.setVideo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionCallWaiting.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionCallWaiting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionCallWaiting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionCallWaiting.toObject = function(includeInstance, msg) {
  var f, obj = {
    empty: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionCallWaiting}
 */
proto.msg.PhoneActionCallWaiting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionCallWaiting;
  return proto.msg.PhoneActionCallWaiting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionCallWaiting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionCallWaiting}
 */
proto.msg.PhoneActionCallWaiting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionCallWaiting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionCallWaiting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionCallWaiting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionCallWaiting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmpty();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool Empty = 1;
 * @return {boolean}
 */
proto.msg.PhoneActionCallWaiting.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionCallWaiting} returns this
 */
proto.msg.PhoneActionCallWaiting.prototype.setEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionDiscarded.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionDiscarded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionDiscarded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionDiscarded.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    video: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    reason: jspb.Message.getFieldWithDefault(msg, 3, 0),
    terminate: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionDiscarded}
 */
proto.msg.PhoneActionDiscarded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionDiscarded;
  return proto.msg.PhoneActionDiscarded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionDiscarded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionDiscarded}
 */
proto.msg.PhoneActionDiscarded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideo(value);
      break;
    case 3:
      var value = /** @type {!proto.msg.DiscardReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTerminate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionDiscarded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionDiscarded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionDiscarded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionDiscarded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getVideo();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTerminate();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 Duration = 1;
 * @return {number}
 */
proto.msg.PhoneActionDiscarded.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool Video = 2;
 * @return {boolean}
 */
proto.msg.PhoneActionDiscarded.prototype.getVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.setVideo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional DiscardReason Reason = 3;
 * @return {!proto.msg.DiscardReason}
 */
proto.msg.PhoneActionDiscarded.prototype.getReason = function() {
  return /** @type {!proto.msg.DiscardReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.msg.DiscardReason} value
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool Terminate = 4;
 * @return {boolean}
 */
proto.msg.PhoneActionDiscarded.prototype.getTerminate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.setTerminate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionIceExchange.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionIceExchange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionIceExchange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionIceExchange.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sdpmlineindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sdpmid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    usernamefragment: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionIceExchange}
 */
proto.msg.PhoneActionIceExchange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionIceExchange;
  return proto.msg.PhoneActionIceExchange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionIceExchange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionIceExchange}
 */
proto.msg.PhoneActionIceExchange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCandidate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSdpmlineindex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdpmid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsernamefragment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionIceExchange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionIceExchange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionIceExchange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionIceExchange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSdpmlineindex();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSdpmid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUsernamefragment();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string Candidate = 1;
 * @return {string}
 */
proto.msg.PhoneActionIceExchange.prototype.getCandidate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.setCandidate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 SdpMLineIndex = 2;
 * @return {number}
 */
proto.msg.PhoneActionIceExchange.prototype.getSdpmlineindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.setSdpmlineindex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string SdpMid = 3;
 * @return {string}
 */
proto.msg.PhoneActionIceExchange.prototype.getSdpmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.setSdpmid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string UsernameFragment = 4;
 * @return {string}
 */
proto.msg.PhoneActionIceExchange.prototype.getUsernamefragment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.setUsernamefragment = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionAck.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionAck.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionAck}
 */
proto.msg.PhoneActionAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionAck;
  return proto.msg.PhoneActionAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionAck}
 */
proto.msg.PhoneActionAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneActionParticipantAdded.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionParticipantAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionParticipantAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionParticipantAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionParticipantAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.PhoneParticipant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionParticipantAdded}
 */
proto.msg.PhoneActionParticipantAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionParticipantAdded;
  return proto.msg.PhoneActionParticipantAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionParticipantAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionParticipantAdded}
 */
proto.msg.PhoneActionParticipantAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.PhoneParticipant;
      reader.readMessage(value,proto.msg.PhoneParticipant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionParticipantAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionParticipantAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionParticipantAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionParticipantAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.PhoneParticipant.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PhoneParticipant Participants = 1;
 * @return {!Array<!proto.msg.PhoneParticipant>}
 */
proto.msg.PhoneActionParticipantAdded.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.PhoneParticipant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneParticipant, 1));
};


/**
 * @param {!Array<!proto.msg.PhoneParticipant>} value
 * @return {!proto.msg.PhoneActionParticipantAdded} returns this
*/
proto.msg.PhoneActionParticipantAdded.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.PhoneParticipant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneParticipant}
 */
proto.msg.PhoneActionParticipantAdded.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.PhoneParticipant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneActionParticipantAdded} returns this
 */
proto.msg.PhoneActionParticipantAdded.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneActionParticipantRemoved.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionParticipantRemoved.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionParticipantRemoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionParticipantRemoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionParticipantRemoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    useridsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    timeout: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionParticipantRemoved}
 */
proto.msg.PhoneActionParticipantRemoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionParticipantRemoved;
  return proto.msg.PhoneActionParticipantRemoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionParticipantRemoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionParticipantRemoved}
 */
proto.msg.PhoneActionParticipantRemoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<string>} */ (reader.readPackedInt64String());
      msg.setUseridsList(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionParticipantRemoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionParticipantRemoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionParticipantRemoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionParticipantRemoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseridsList();
  if (f.length > 0) {
    writer.writePackedInt64String(
      1,
      f
    );
  }
  f = message.getTimeout();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated int64 UserIDs = 1;
 * @return {!Array<string>}
 */
proto.msg.PhoneActionParticipantRemoved.prototype.getUseridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.PhoneActionParticipantRemoved} returns this
 */
proto.msg.PhoneActionParticipantRemoved.prototype.setUseridsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneActionParticipantRemoved} returns this
 */
proto.msg.PhoneActionParticipantRemoved.prototype.addUserids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneActionParticipantRemoved} returns this
 */
proto.msg.PhoneActionParticipantRemoved.prototype.clearUseridsList = function() {
  return this.setUseridsList([]);
};


/**
 * optional bool Timeout = 2;
 * @return {boolean}
 */
proto.msg.PhoneActionParticipantRemoved.prototype.getTimeout = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionParticipantRemoved} returns this
 */
proto.msg.PhoneActionParticipantRemoved.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneActionJoinRequested.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionJoinRequested.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionJoinRequested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionJoinRequested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionJoinRequested.toObject = function(includeInstance, msg) {
  var f, obj = {
    useridsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionJoinRequested}
 */
proto.msg.PhoneActionJoinRequested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionJoinRequested;
  return proto.msg.PhoneActionJoinRequested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionJoinRequested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionJoinRequested}
 */
proto.msg.PhoneActionJoinRequested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<string>} */ (reader.readPackedInt64String());
      msg.setUseridsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionJoinRequested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionJoinRequested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionJoinRequested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionJoinRequested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseridsList();
  if (f.length > 0) {
    writer.writePackedInt64String(
      1,
      f
    );
  }
};


/**
 * repeated int64 UserIDs = 1;
 * @return {!Array<string>}
 */
proto.msg.PhoneActionJoinRequested.prototype.getUseridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.PhoneActionJoinRequested} returns this
 */
proto.msg.PhoneActionJoinRequested.prototype.setUseridsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneActionJoinRequested} returns this
 */
proto.msg.PhoneActionJoinRequested.prototype.addUserids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneActionJoinRequested} returns this
 */
proto.msg.PhoneActionJoinRequested.prototype.clearUseridsList = function() {
  return this.setUseridsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionAdminUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionAdminUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionAdminUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionAdminUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    admin: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionAdminUpdated}
 */
proto.msg.PhoneActionAdminUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionAdminUpdated;
  return proto.msg.PhoneActionAdminUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionAdminUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionAdminUpdated}
 */
proto.msg.PhoneActionAdminUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionAdminUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionAdminUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionAdminUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionAdminUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getAdmin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int64 UserID = 1;
 * @return {string}
 */
proto.msg.PhoneActionAdminUpdated.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionAdminUpdated} returns this
 */
proto.msg.PhoneActionAdminUpdated.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bool Admin = 2;
 * @return {boolean}
 */
proto.msg.PhoneActionAdminUpdated.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionAdminUpdated} returns this
 */
proto.msg.PhoneActionAdminUpdated.prototype.setAdmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneActionScreenShare.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionScreenShare.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionScreenShare.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionScreenShare} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionScreenShare.toObject = function(includeInstance, msg) {
  var f, obj = {
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    trackidsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionScreenShare}
 */
proto.msg.PhoneActionScreenShare.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionScreenShare;
  return proto.msg.PhoneActionScreenShare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionScreenShare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionScreenShare}
 */
proto.msg.PhoneActionScreenShare.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTrackids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionScreenShare.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionScreenShare.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionScreenShare} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionScreenShare.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTrackidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional bool Enable = 1;
 * @return {boolean}
 */
proto.msg.PhoneActionScreenShare.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionScreenShare} returns this
 */
proto.msg.PhoneActionScreenShare.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string TrackIDs = 2;
 * @return {!Array<string>}
 */
proto.msg.PhoneActionScreenShare.prototype.getTrackidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.PhoneActionScreenShare} returns this
 */
proto.msg.PhoneActionScreenShare.prototype.setTrackidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneActionScreenShare} returns this
 */
proto.msg.PhoneActionScreenShare.prototype.addTrackids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneActionScreenShare} returns this
 */
proto.msg.PhoneActionScreenShare.prototype.clearTrackidsList = function() {
  return this.setTrackidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionPicked.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionPicked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionPicked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionPicked.toObject = function(includeInstance, msg) {
  var f, obj = {
    authid: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionPicked}
 */
proto.msg.PhoneActionPicked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionPicked;
  return proto.msg.PhoneActionPicked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionPicked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionPicked}
 */
proto.msg.PhoneActionPicked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAuthid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionPicked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionPicked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionPicked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionPicked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 AuthID = 1;
 * @return {string}
 */
proto.msg.PhoneActionPicked.prototype.getAuthid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionPicked} returns this
 */
proto.msg.PhoneActionPicked.prototype.setAuthid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionRestarted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionRestarted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionRestarted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionRestarted.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionRestarted}
 */
proto.msg.PhoneActionRestarted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionRestarted;
  return proto.msg.PhoneActionRestarted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionRestarted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionRestarted}
 */
proto.msg.PhoneActionRestarted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionRestarted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionRestarted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionRestarted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionRestarted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool Sender = 1;
 * @return {boolean}
 */
proto.msg.PhoneActionRestarted.prototype.getSender = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionRestarted} returns this
 */
proto.msg.PhoneActionRestarted.prototype.setSender = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionMediaSettingsUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionMediaSettingsUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionMediaSettingsUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionMediaSettingsUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    video: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    audio: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    screenshare: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionMediaSettingsUpdated}
 */
proto.msg.PhoneActionMediaSettingsUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionMediaSettingsUpdated;
  return proto.msg.PhoneActionMediaSettingsUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionMediaSettingsUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionMediaSettingsUpdated}
 */
proto.msg.PhoneActionMediaSettingsUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideo(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAudio(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScreenshare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionMediaSettingsUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionMediaSettingsUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionMediaSettingsUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionMediaSettingsUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideo();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAudio();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getScreenshare();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool Video = 1;
 * @return {boolean}
 */
proto.msg.PhoneActionMediaSettingsUpdated.prototype.getVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionMediaSettingsUpdated} returns this
 */
proto.msg.PhoneActionMediaSettingsUpdated.prototype.setVideo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool Audio = 2;
 * @return {boolean}
 */
proto.msg.PhoneActionMediaSettingsUpdated.prototype.getAudio = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionMediaSettingsUpdated} returns this
 */
proto.msg.PhoneActionMediaSettingsUpdated.prototype.setAudio = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool ScreenShare = 3;
 * @return {boolean}
 */
proto.msg.PhoneActionMediaSettingsUpdated.prototype.getScreenshare = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionMediaSettingsUpdated} returns this
 */
proto.msg.PhoneActionMediaSettingsUpdated.prototype.setScreenshare = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionReactionSet.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionReactionSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionReactionSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionReactionSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    reaction: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionReactionSet}
 */
proto.msg.PhoneActionReactionSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionReactionSet;
  return proto.msg.PhoneActionReactionSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionReactionSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionReactionSet}
 */
proto.msg.PhoneActionReactionSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionReactionSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionReactionSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionReactionSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionReactionSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Reaction = 1;
 * @return {string}
 */
proto.msg.PhoneActionReactionSet.prototype.getReaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionReactionSet} returns this
 */
proto.msg.PhoneActionReactionSet.prototype.setReaction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionSDPOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionSDPOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionSDPOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionSDPOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionSDPOffer}
 */
proto.msg.PhoneActionSDPOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionSDPOffer;
  return proto.msg.PhoneActionSDPOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionSDPOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionSDPOffer}
 */
proto.msg.PhoneActionSDPOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionSDPOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionSDPOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionSDPOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionSDPOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string SDP = 1;
 * @return {string}
 */
proto.msg.PhoneActionSDPOffer.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionSDPOffer} returns this
 */
proto.msg.PhoneActionSDPOffer.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.msg.PhoneActionSDPOffer.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionSDPOffer} returns this
 */
proto.msg.PhoneActionSDPOffer.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionSDPAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionSDPAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionSDPAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionSDPAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionSDPAnswer}
 */
proto.msg.PhoneActionSDPAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionSDPAnswer;
  return proto.msg.PhoneActionSDPAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionSDPAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionSDPAnswer}
 */
proto.msg.PhoneActionSDPAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionSDPAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionSDPAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionSDPAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionSDPAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string SDP = 1;
 * @return {string}
 */
proto.msg.PhoneActionSDPAnswer.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionSDPAnswer} returns this
 */
proto.msg.PhoneActionSDPAnswer.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.msg.PhoneActionSDPAnswer.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionSDPAnswer} returns this
 */
proto.msg.PhoneActionSDPAnswer.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.msg.DiscardReason = {
  DISCARDREASONUNKNOWN: 0,
  DISCARDREASONMISSED: 1,
  DISCARDREASONBUSY: 2,
  DISCARDREASONHANGUP: 3,
  DISCARDREASONDISCONNECT: 4,
  DISCARDREASONRESERVED1: 5,
  DISCARDREASONRESERVED2: 6,
  DISCARDREASONRESERVED3: 7,
  DISCARDREASONRESERVED4: 8,
  DISCARDREASONRESERVED5: 9,
  DISCARDREASONRESERVED6: 10,
  DISCARDREASONRESERVED7: 11,
  DISCARDREASONRESERVED8: 12,
  DISCARDREASONRESERVED9: 13
};

/**
 * @enum {number}
 */
proto.msg.CallDeviceType = {
  CALLDEVICEUNKNOWN: 0,
  CALLDEVICEDESKTOP: 1,
  CALLDEVICEWEB: 2,
  CALLDEVICEIOS: 3,
  CALLDEVICEANDROID: 4,
  CALLDEVICERESERVED1: 5,
  CALLDEVICERESERVED2: 6,
  CALLDEVICERESERVED3: 7,
  CALLDEVICERESERVED4: 8,
  CALLDEVICERESERVED5: 9,
  CALLDEVICERESERVED6: 10
};

/**
 * @enum {number}
 */
proto.msg.PhoneCallRateReason = {
  PHONECALLRATEREASONEMPTY: 0,
  PHONECALLRATEREASONRESERVED1: 1,
  PHONECALLRATEREASONRESERVED2: 2,
  PHONECALLRATEREASONRESERVED3: 3,
  PHONECALLRATEREASONRESERVED4: 4,
  PHONECALLRATEREASONRESERVED5: 5,
  PHONECALLRATEREASONRESERVED6: 6,
  PHONECALLRATEREASONRESERVED7: 7,
  PHONECALLRATEREASONRESERVED8: 8,
  PHONECALLRATEREASONRESERVED9: 9,
  PHONECALLRATEREASONRESERVED10: 10,
  PHONECALLRATEREASONRESERVED11: 11,
  PHONECALLRATEREASONRESERVED12: 12,
  PHONECALLRATEREASONRESERVED13: 13,
  PHONECALLRATEREASONRESERVED14: 14,
  PHONECALLRATEREASONRESERVED15: 15
};

/**
 * @enum {number}
 */
proto.msg.PhoneCallAction = {
  PHONECALLEMPTY: 0,
  PHONECALLACCEPTED: 1,
  PHONECALLREQUESTED: 2,
  PHONECALLCALLWAITING: 3,
  PHONECALLDISCARDED: 4,
  PHONECALLICEEXCHANGE: 5,
  PHONECALLMEDIASETTINGSCHANGED: 6,
  PHONECALLREACTIONSET: 7,
  PHONECALLSDPOFFER: 8,
  PHONECALLSDPANSWER: 9,
  PHONECALLACK: 10,
  PHONECALLPARTICIPANTADDED: 11,
  PHONECALLPARTICIPANTREMOVED: 12,
  PHONECALLJOINREQUESTED: 13,
  PHONECALLADMINUPDATED: 14,
  PHONECALLSCREENSHARE: 15,
  PHONECALLPICKED: 16,
  PHONECALLRESTARTED: 17,
  PHONECALLRESERVED14: 18,
  PHONECALLRESERVED15: 19,
  PHONECALLRESERVED16: 20,
  PHONECALLRESERVED17: 21,
  PHONECALLRESERVED18: 22,
  PHONECALLRESERVED19: 23
};

goog.object.extend(exports, proto.msg);
