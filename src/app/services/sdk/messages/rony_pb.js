/* eslint-disable */
// source: rony.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.rony.Error', null, global);
goog.exportSymbol('proto.rony.KeyValue', null, global);
goog.exportSymbol('proto.rony.MessageContainer', null, global);
goog.exportSymbol('proto.rony.MessageEnvelope', null, global);
goog.exportSymbol('proto.rony.Redirect', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rony.MessageEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rony.MessageEnvelope.repeatedFields_, null);
};
goog.inherits(proto.rony.MessageEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rony.MessageEnvelope.displayName = 'proto.rony.MessageEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rony.MessageContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rony.MessageContainer.repeatedFields_, null);
};
goog.inherits(proto.rony.MessageContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rony.MessageContainer.displayName = 'proto.rony.MessageContainer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rony.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rony.Error.repeatedFields_, null);
};
goog.inherits(proto.rony.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rony.Error.displayName = 'proto.rony.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rony.Redirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rony.Redirect.repeatedFields_, null);
};
goog.inherits(proto.rony.Redirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rony.Redirect.displayName = 'proto.rony.Redirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rony.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rony.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rony.KeyValue.displayName = 'proto.rony.KeyValue';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rony.MessageEnvelope.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rony.MessageEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.rony.MessageEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rony.MessageEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.MessageEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    constructor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: msg.getMessage_asB64(),
    auth: msg.getAuth_asB64(),
    headerList: jspb.Message.toObjectList(msg.getHeaderList(),
    proto.rony.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rony.MessageEnvelope}
 */
proto.rony.MessageEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rony.MessageEnvelope;
  return proto.rony.MessageEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rony.MessageEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rony.MessageEnvelope}
 */
proto.rony.MessageEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstructor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuth(value);
      break;
    case 10:
      var value = new proto.rony.KeyValue;
      reader.readMessage(value,proto.rony.KeyValue.deserializeBinaryFromReader);
      msg.addHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rony.MessageEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rony.MessageEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rony.MessageEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.MessageEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConstructor();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getAuth_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getHeaderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.rony.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 Constructor = 1;
 * @return {number}
 */
proto.rony.MessageEnvelope.prototype.getConstructor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rony.MessageEnvelope} returns this
 */
proto.rony.MessageEnvelope.prototype.setConstructor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 RequestID = 2;
 * @return {number}
 */
proto.rony.MessageEnvelope.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.rony.MessageEnvelope} returns this
 */
proto.rony.MessageEnvelope.prototype.setRequestid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes Message = 4;
 * @return {!(string|Uint8Array)}
 */
proto.rony.MessageEnvelope.prototype.getMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Message = 4;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.rony.MessageEnvelope.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes Message = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.rony.MessageEnvelope.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rony.MessageEnvelope} returns this
 */
proto.rony.MessageEnvelope.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes Auth = 8;
 * @return {!(string|Uint8Array)}
 */
proto.rony.MessageEnvelope.prototype.getAuth = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes Auth = 8;
 * This is a type-conversion wrapper around `getAuth()`
 * @return {string}
 */
proto.rony.MessageEnvelope.prototype.getAuth_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuth()));
};


/**
 * optional bytes Auth = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuth()`
 * @return {!Uint8Array}
 */
proto.rony.MessageEnvelope.prototype.getAuth_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuth()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rony.MessageEnvelope} returns this
 */
proto.rony.MessageEnvelope.prototype.setAuth = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * repeated KeyValue Header = 10;
 * @return {!Array<!proto.rony.KeyValue>}
 */
proto.rony.MessageEnvelope.prototype.getHeaderList = function() {
  return /** @type{!Array<!proto.rony.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rony.KeyValue, 10));
};


/**
 * @param {!Array<!proto.rony.KeyValue>} value
 * @return {!proto.rony.MessageEnvelope} returns this
*/
proto.rony.MessageEnvelope.prototype.setHeaderList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.rony.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rony.KeyValue}
 */
proto.rony.MessageEnvelope.prototype.addHeader = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.rony.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rony.MessageEnvelope} returns this
 */
proto.rony.MessageEnvelope.prototype.clearHeaderList = function() {
  return this.setHeaderList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rony.MessageContainer.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rony.MessageContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.rony.MessageContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rony.MessageContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.MessageContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: jspb.Message.getFieldWithDefault(msg, 1, 0),
    envelopesList: jspb.Message.toObjectList(msg.getEnvelopesList(),
    proto.rony.MessageEnvelope.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rony.MessageContainer}
 */
proto.rony.MessageContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rony.MessageContainer;
  return proto.rony.MessageContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rony.MessageContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rony.MessageContainer}
 */
proto.rony.MessageContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 2:
      var value = new proto.rony.MessageEnvelope;
      reader.readMessage(value,proto.rony.MessageEnvelope.deserializeBinaryFromReader);
      msg.addEnvelopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rony.MessageContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rony.MessageContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rony.MessageContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.MessageContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEnvelopesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rony.MessageEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 Length = 1;
 * @return {number}
 */
proto.rony.MessageContainer.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rony.MessageContainer} returns this
 */
proto.rony.MessageContainer.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MessageEnvelope Envelopes = 2;
 * @return {!Array<!proto.rony.MessageEnvelope>}
 */
proto.rony.MessageContainer.prototype.getEnvelopesList = function() {
  return /** @type{!Array<!proto.rony.MessageEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rony.MessageEnvelope, 2));
};


/**
 * @param {!Array<!proto.rony.MessageEnvelope>} value
 * @return {!proto.rony.MessageContainer} returns this
*/
proto.rony.MessageContainer.prototype.setEnvelopesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rony.MessageEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rony.MessageEnvelope}
 */
proto.rony.MessageContainer.prototype.addEnvelopes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rony.MessageEnvelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rony.MessageContainer} returns this
 */
proto.rony.MessageContainer.prototype.clearEnvelopesList = function() {
  return this.setEnvelopesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rony.Error.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rony.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.rony.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rony.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    items: jspb.Message.getFieldWithDefault(msg, 2, ""),
    template: jspb.Message.getFieldWithDefault(msg, 3, ""),
    templateitemsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    localtemplate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    localtemplateitemsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rony.Error}
 */
proto.rony.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rony.Error;
  return proto.rony.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rony.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rony.Error}
 */
proto.rony.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItems(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTemplate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTemplateitems(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocaltemplate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addLocaltemplateitems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rony.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rony.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rony.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItems();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTemplate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTemplateitemsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getLocaltemplate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLocaltemplateitemsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string Code = 1;
 * @return {string}
 */
proto.rony.Error.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Items = 2;
 * @return {string}
 */
proto.rony.Error.prototype.getItems = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.setItems = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Template = 3;
 * @return {string}
 */
proto.rony.Error.prototype.getTemplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.setTemplate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string TemplateItems = 4;
 * @return {!Array<string>}
 */
proto.rony.Error.prototype.getTemplateitemsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.setTemplateitemsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.addTemplateitems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.clearTemplateitemsList = function() {
  return this.setTemplateitemsList([]);
};


/**
 * optional string LocalTemplate = 5;
 * @return {string}
 */
proto.rony.Error.prototype.getLocaltemplate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.setLocaltemplate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string LocalTemplateItems = 6;
 * @return {!Array<string>}
 */
proto.rony.Error.prototype.getLocaltemplateitemsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.setLocaltemplateitemsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.addLocaltemplateitems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rony.Error} returns this
 */
proto.rony.Error.prototype.clearLocaltemplateitemsList = function() {
  return this.setLocaltemplateitemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rony.Redirect.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rony.Redirect.prototype.toObject = function(opt_includeInstance) {
  return proto.rony.Redirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rony.Redirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.Redirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaderhostportList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    hostportsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    serverid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    waitinsec: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rony.Redirect}
 */
proto.rony.Redirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rony.Redirect;
  return proto.rony.Redirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rony.Redirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rony.Redirect}
 */
proto.rony.Redirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLeaderhostport(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addHostports(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWaitinsec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rony.Redirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rony.Redirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rony.Redirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.Redirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaderhostportList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getHostportsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getServerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWaitinsec();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * repeated string LeaderHostPort = 1;
 * @return {!Array<string>}
 */
proto.rony.Redirect.prototype.getLeaderhostportList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rony.Redirect} returns this
 */
proto.rony.Redirect.prototype.setLeaderhostportList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rony.Redirect} returns this
 */
proto.rony.Redirect.prototype.addLeaderhostport = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rony.Redirect} returns this
 */
proto.rony.Redirect.prototype.clearLeaderhostportList = function() {
  return this.setLeaderhostportList([]);
};


/**
 * repeated string HostPorts = 2;
 * @return {!Array<string>}
 */
proto.rony.Redirect.prototype.getHostportsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.rony.Redirect} returns this
 */
proto.rony.Redirect.prototype.setHostportsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.rony.Redirect} returns this
 */
proto.rony.Redirect.prototype.addHostports = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rony.Redirect} returns this
 */
proto.rony.Redirect.prototype.clearHostportsList = function() {
  return this.setHostportsList([]);
};


/**
 * optional string ServerID = 3;
 * @return {string}
 */
proto.rony.Redirect.prototype.getServerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rony.Redirect} returns this
 */
proto.rony.Redirect.prototype.setServerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 WaitInSec = 4;
 * @return {number}
 */
proto.rony.Redirect.prototype.getWaitinsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rony.Redirect} returns this
 */
proto.rony.Redirect.prototype.setWaitinsec = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rony.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.rony.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rony.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rony.KeyValue}
 */
proto.rony.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rony.KeyValue;
  return proto.rony.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rony.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rony.KeyValue}
 */
proto.rony.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rony.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rony.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rony.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rony.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.rony.KeyValue.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rony.KeyValue} returns this
 */
proto.rony.KeyValue.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Value = 2;
 * @return {string}
 */
proto.rony.KeyValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rony.KeyValue} returns this
 */
proto.rony.KeyValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.rony);
