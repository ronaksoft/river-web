/* eslint-disable */
// source: chat.community.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.object.extend(proto, core_types_pb);
goog.exportSymbol('proto.msg.CommunityAuthorizeUser', null, global);
goog.exportSymbol('proto.msg.CommunityGetMembers', null, global);
goog.exportSymbol('proto.msg.CommunityGetUpdates', null, global);
goog.exportSymbol('proto.msg.CommunityRecall', null, global);
goog.exportSymbol('proto.msg.CommunitySendMedia', null, global);
goog.exportSymbol('proto.msg.CommunitySendMessage', null, global);
goog.exportSymbol('proto.msg.CommunitySetTyping', null, global);
goog.exportSymbol('proto.msg.CommunityUpdateContainer', null, global);
goog.exportSymbol('proto.msg.CommunityUpdateEnvelope', null, global);
goog.exportSymbol('proto.msg.CommunityUser', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunitySendMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.CommunitySendMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.CommunitySendMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunitySendMessage.displayName = 'proto.msg.CommunitySendMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunitySendMedia = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.CommunitySendMedia, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunitySendMedia.displayName = 'proto.msg.CommunitySendMedia';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunitySetTyping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.CommunitySetTyping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunitySetTyping.displayName = 'proto.msg.CommunitySetTyping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunityGetUpdates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.CommunityGetUpdates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunityGetUpdates.displayName = 'proto.msg.CommunityGetUpdates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunityGetMembers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.CommunityGetMembers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunityGetMembers.displayName = 'proto.msg.CommunityGetMembers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunityRecall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.CommunityRecall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunityRecall.displayName = 'proto.msg.CommunityRecall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunityAuthorizeUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.CommunityAuthorizeUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunityAuthorizeUser.displayName = 'proto.msg.CommunityAuthorizeUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunityUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.CommunityUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunityUser.displayName = 'proto.msg.CommunityUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunityUpdateEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.CommunityUpdateEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunityUpdateEnvelope.displayName = 'proto.msg.CommunityUpdateEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.CommunityUpdateContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.CommunityUpdateContainer.repeatedFields_, null);
};
goog.inherits(proto.msg.CommunityUpdateContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.CommunityUpdateContainer.displayName = 'proto.msg.CommunityUpdateContainer';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.CommunitySendMessage.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunitySendMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunitySendMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunitySendMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunitySendMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    body: jspb.Message.getFieldWithDefault(msg, 3, ""),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    core_types_pb.MessageEntity.toObject, includeInstance),
    replymarkup: jspb.Message.getFieldWithDefault(msg, 6, 0),
    replymarkupdata: msg.getReplymarkupdata_asB64(),
    senderid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sendermsgid: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunitySendMessage}
 */
proto.msg.CommunitySendMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunitySendMessage;
  return proto.msg.CommunitySendMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunitySendMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunitySendMessage}
 */
proto.msg.CommunitySendMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 5:
      var value = new core_types_pb.MessageEntity;
      reader.readMessage(value,core_types_pb.MessageEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplymarkup(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReplymarkupdata(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendermsgid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunitySendMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunitySendMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunitySendMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunitySendMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandomid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.MessageEntity.serializeBinaryToWriter
    );
  }
  f = message.getReplymarkup();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getReplymarkupdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getSenderid();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getSendermsgid();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional int64 RandomID = 1;
 * @return {number}
 */
proto.msg.CommunitySendMessage.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySendMessage} returns this
 */
proto.msg.CommunitySendMessage.prototype.setRandomid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional InputPeer Peer = 2;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.CommunitySendMessage.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.CommunitySendMessage} returns this
*/
proto.msg.CommunitySendMessage.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.CommunitySendMessage} returns this
 */
proto.msg.CommunitySendMessage.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.CommunitySendMessage.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Body = 3;
 * @return {string}
 */
proto.msg.CommunitySendMessage.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.CommunitySendMessage} returns this
 */
proto.msg.CommunitySendMessage.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated MessageEntity Entities = 5;
 * @return {!Array<!proto.msg.MessageEntity>}
 */
proto.msg.CommunitySendMessage.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.msg.MessageEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.MessageEntity, 5));
};


/**
 * @param {!Array<!proto.msg.MessageEntity>} value
 * @return {!proto.msg.CommunitySendMessage} returns this
*/
proto.msg.CommunitySendMessage.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.MessageEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.CommunitySendMessage.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.MessageEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.CommunitySendMessage} returns this
 */
proto.msg.CommunitySendMessage.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional int64 ReplyMarkup = 6;
 * @return {number}
 */
proto.msg.CommunitySendMessage.prototype.getReplymarkup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySendMessage} returns this
 */
proto.msg.CommunitySendMessage.prototype.setReplymarkup = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes ReplyMarkupData = 7;
 * @return {!(string|Uint8Array)}
 */
proto.msg.CommunitySendMessage.prototype.getReplymarkupdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes ReplyMarkupData = 7;
 * This is a type-conversion wrapper around `getReplymarkupdata()`
 * @return {string}
 */
proto.msg.CommunitySendMessage.prototype.getReplymarkupdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReplymarkupdata()));
};


/**
 * optional bytes ReplyMarkupData = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReplymarkupdata()`
 * @return {!Uint8Array}
 */
proto.msg.CommunitySendMessage.prototype.getReplymarkupdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReplymarkupdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.CommunitySendMessage} returns this
 */
proto.msg.CommunitySendMessage.prototype.setReplymarkupdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional int64 SenderID = 8;
 * @return {number}
 */
proto.msg.CommunitySendMessage.prototype.getSenderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySendMessage} returns this
 */
proto.msg.CommunitySendMessage.prototype.setSenderid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 SenderMsgID = 9;
 * @return {number}
 */
proto.msg.CommunitySendMessage.prototype.getSendermsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySendMessage} returns this
 */
proto.msg.CommunitySendMessage.prototype.setSendermsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunitySendMedia.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunitySendMedia.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunitySendMedia} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunitySendMedia.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    mediatype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mediadata: msg.getMediadata_asB64(),
    replyto: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cleardraft: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    senderid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    sendermsgid: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunitySendMedia}
 */
proto.msg.CommunitySendMedia.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunitySendMedia;
  return proto.msg.CommunitySendMedia.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunitySendMedia} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunitySendMedia}
 */
proto.msg.CommunitySendMedia.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {!proto.msg.InputMediaType} */ (reader.readEnum());
      msg.setMediatype(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMediadata(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplyto(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCleardraft(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendermsgid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunitySendMedia.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunitySendMedia.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunitySendMedia} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunitySendMedia.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandomid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getMediatype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMediadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getReplyto();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCleardraft();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSenderid();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getSendermsgid();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional int64 RandomID = 1;
 * @return {number}
 */
proto.msg.CommunitySendMedia.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySendMedia} returns this
 */
proto.msg.CommunitySendMedia.prototype.setRandomid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional InputPeer Peer = 2;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.CommunitySendMedia.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.CommunitySendMedia} returns this
*/
proto.msg.CommunitySendMedia.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.CommunitySendMedia} returns this
 */
proto.msg.CommunitySendMedia.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.CommunitySendMedia.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InputMediaType MediaType = 3;
 * @return {!proto.msg.InputMediaType}
 */
proto.msg.CommunitySendMedia.prototype.getMediatype = function() {
  return /** @type {!proto.msg.InputMediaType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.msg.InputMediaType} value
 * @return {!proto.msg.CommunitySendMedia} returns this
 */
proto.msg.CommunitySendMedia.prototype.setMediatype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes MediaData = 4;
 * @return {!(string|Uint8Array)}
 */
proto.msg.CommunitySendMedia.prototype.getMediadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes MediaData = 4;
 * This is a type-conversion wrapper around `getMediadata()`
 * @return {string}
 */
proto.msg.CommunitySendMedia.prototype.getMediadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMediadata()));
};


/**
 * optional bytes MediaData = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMediadata()`
 * @return {!Uint8Array}
 */
proto.msg.CommunitySendMedia.prototype.getMediadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMediadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.CommunitySendMedia} returns this
 */
proto.msg.CommunitySendMedia.prototype.setMediadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 ReplyTo = 5;
 * @return {number}
 */
proto.msg.CommunitySendMedia.prototype.getReplyto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySendMedia} returns this
 */
proto.msg.CommunitySendMedia.prototype.setReplyto = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool ClearDraft = 6;
 * @return {boolean}
 */
proto.msg.CommunitySendMedia.prototype.getCleardraft = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.CommunitySendMedia} returns this
 */
proto.msg.CommunitySendMedia.prototype.setCleardraft = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 SenderID = 9;
 * @return {number}
 */
proto.msg.CommunitySendMedia.prototype.getSenderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySendMedia} returns this
 */
proto.msg.CommunitySendMedia.prototype.setSenderid = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 SenderMsgID = 10;
 * @return {number}
 */
proto.msg.CommunitySendMedia.prototype.getSendermsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySendMedia} returns this
 */
proto.msg.CommunitySendMedia.prototype.setSendermsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunitySetTyping.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunitySetTyping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunitySetTyping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunitySetTyping.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    senderid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunitySetTyping}
 */
proto.msg.CommunitySetTyping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunitySetTyping;
  return proto.msg.CommunitySetTyping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunitySetTyping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunitySetTyping}
 */
proto.msg.CommunitySetTyping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {!proto.msg.TypingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunitySetTyping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunitySetTyping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunitySetTyping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunitySetTyping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSenderid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.CommunitySetTyping.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.CommunitySetTyping} returns this
*/
proto.msg.CommunitySetTyping.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.CommunitySetTyping} returns this
 */
proto.msg.CommunitySetTyping.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.CommunitySetTyping.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TypingAction Action = 2;
 * @return {!proto.msg.TypingAction}
 */
proto.msg.CommunitySetTyping.prototype.getAction = function() {
  return /** @type {!proto.msg.TypingAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.msg.TypingAction} value
 * @return {!proto.msg.CommunitySetTyping} returns this
 */
proto.msg.CommunitySetTyping.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 SenderID = 3;
 * @return {number}
 */
proto.msg.CommunitySetTyping.prototype.getSenderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunitySetTyping} returns this
 */
proto.msg.CommunitySetTyping.prototype.setSenderid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunityGetUpdates.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunityGetUpdates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunityGetUpdates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityGetUpdates.toObject = function(includeInstance, msg) {
  var f, obj = {
    waitafterinms: jspb.Message.getFieldWithDefault(msg, 1, 0),
    waitmaxinms: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sizelimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    offsetid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunityGetUpdates}
 */
proto.msg.CommunityGetUpdates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunityGetUpdates;
  return proto.msg.CommunityGetUpdates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunityGetUpdates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunityGetUpdates}
 */
proto.msg.CommunityGetUpdates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWaitafterinms(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWaitmaxinms(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSizelimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffsetid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunityGetUpdates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunityGetUpdates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunityGetUpdates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityGetUpdates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWaitafterinms();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getWaitmaxinms();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSizelimit();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOffsetid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int32 WaitAfterInMS = 1;
 * @return {number}
 */
proto.msg.CommunityGetUpdates.prototype.getWaitafterinms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityGetUpdates} returns this
 */
proto.msg.CommunityGetUpdates.prototype.setWaitafterinms = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 WaitMaxInMS = 2;
 * @return {number}
 */
proto.msg.CommunityGetUpdates.prototype.getWaitmaxinms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityGetUpdates} returns this
 */
proto.msg.CommunityGetUpdates.prototype.setWaitmaxinms = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 SizeLimit = 3;
 * @return {number}
 */
proto.msg.CommunityGetUpdates.prototype.getSizelimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityGetUpdates} returns this
 */
proto.msg.CommunityGetUpdates.prototype.setSizelimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 OffsetID = 4;
 * @return {number}
 */
proto.msg.CommunityGetUpdates.prototype.getOffsetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityGetUpdates} returns this
 */
proto.msg.CommunityGetUpdates.prototype.setOffsetid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunityGetMembers.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunityGetMembers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunityGetMembers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityGetMembers.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunityGetMembers}
 */
proto.msg.CommunityGetMembers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunityGetMembers;
  return proto.msg.CommunityGetMembers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunityGetMembers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunityGetMembers}
 */
proto.msg.CommunityGetMembers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunityGetMembers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunityGetMembers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunityGetMembers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityGetMembers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 Offset = 1;
 * @return {number}
 */
proto.msg.CommunityGetMembers.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityGetMembers} returns this
 */
proto.msg.CommunityGetMembers.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Limit = 2;
 * @return {number}
 */
proto.msg.CommunityGetMembers.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityGetMembers} returns this
 */
proto.msg.CommunityGetMembers.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunityRecall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunityRecall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunityRecall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityRecall.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accesskey: msg.getAccesskey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunityRecall}
 */
proto.msg.CommunityRecall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunityRecall;
  return proto.msg.CommunityRecall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunityRecall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunityRecall}
 */
proto.msg.CommunityRecall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccesskey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunityRecall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunityRecall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunityRecall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityRecall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAccesskey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int64 TeamID = 1;
 * @return {number}
 */
proto.msg.CommunityRecall.prototype.getTeamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityRecall} returns this
 */
proto.msg.CommunityRecall.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes AccessKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.CommunityRecall.prototype.getAccesskey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes AccessKey = 2;
 * This is a type-conversion wrapper around `getAccesskey()`
 * @return {string}
 */
proto.msg.CommunityRecall.prototype.getAccesskey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccesskey()));
};


/**
 * optional bytes AccessKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccesskey()`
 * @return {!Uint8Array}
 */
proto.msg.CommunityRecall.prototype.getAccesskey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccesskey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.CommunityRecall} returns this
 */
proto.msg.CommunityRecall.prototype.setAccesskey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunityAuthorizeUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunityAuthorizeUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunityAuthorizeUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityAuthorizeUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getFieldWithDefault(msg, 1, ""),
    firstname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunityAuthorizeUser}
 */
proto.msg.CommunityAuthorizeUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunityAuthorizeUser;
  return proto.msg.CommunityAuthorizeUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunityAuthorizeUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunityAuthorizeUser}
 */
proto.msg.CommunityAuthorizeUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunityAuthorizeUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunityAuthorizeUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunityAuthorizeUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityAuthorizeUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string Phone = 1;
 * @return {string}
 */
proto.msg.CommunityAuthorizeUser.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.CommunityAuthorizeUser} returns this
 */
proto.msg.CommunityAuthorizeUser.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string FirstName = 2;
 * @return {string}
 */
proto.msg.CommunityAuthorizeUser.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.CommunityAuthorizeUser} returns this
 */
proto.msg.CommunityAuthorizeUser.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string LastName = 3;
 * @return {string}
 */
proto.msg.CommunityAuthorizeUser.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.CommunityAuthorizeUser} returns this
 */
proto.msg.CommunityAuthorizeUser.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Provider = 4;
 * @return {string}
 */
proto.msg.CommunityAuthorizeUser.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.CommunityAuthorizeUser} returns this
 */
proto.msg.CommunityAuthorizeUser.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunityUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunityUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunityUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    firstname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunityUser}
 */
proto.msg.CommunityUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunityUser;
  return proto.msg.CommunityUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunityUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunityUser}
 */
proto.msg.CommunityUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunityUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunityUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunityUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 UserID = 1;
 * @return {number}
 */
proto.msg.CommunityUser.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityUser} returns this
 */
proto.msg.CommunityUser.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string FirstName = 2;
 * @return {string}
 */
proto.msg.CommunityUser.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.CommunityUser} returns this
 */
proto.msg.CommunityUser.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string LastName = 3;
 * @return {string}
 */
proto.msg.CommunityUser.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.CommunityUser} returns this
 */
proto.msg.CommunityUser.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Phone = 4;
 * @return {string}
 */
proto.msg.CommunityUser.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.CommunityUser} returns this
 */
proto.msg.CommunityUser.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunityUpdateEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunityUpdateEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunityUpdateEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityUpdateEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    offsetid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    partitionid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    constructor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    update: msg.getUpdate_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunityUpdateEnvelope}
 */
proto.msg.CommunityUpdateEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunityUpdateEnvelope;
  return proto.msg.CommunityUpdateEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunityUpdateEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunityUpdateEnvelope}
 */
proto.msg.CommunityUpdateEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffsetid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartitionid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstructor(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunityUpdateEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunityUpdateEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunityUpdateEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityUpdateEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffsetid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPartitionid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getConstructor();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUpdate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional int64 OffsetID = 1;
 * @return {number}
 */
proto.msg.CommunityUpdateEnvelope.prototype.getOffsetid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityUpdateEnvelope} returns this
 */
proto.msg.CommunityUpdateEnvelope.prototype.setOffsetid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 PartitionID = 2;
 * @return {number}
 */
proto.msg.CommunityUpdateEnvelope.prototype.getPartitionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityUpdateEnvelope} returns this
 */
proto.msg.CommunityUpdateEnvelope.prototype.setPartitionid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 Constructor = 3;
 * @return {number}
 */
proto.msg.CommunityUpdateEnvelope.prototype.getConstructor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.CommunityUpdateEnvelope} returns this
 */
proto.msg.CommunityUpdateEnvelope.prototype.setConstructor = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes Update = 4;
 * @return {!(string|Uint8Array)}
 */
proto.msg.CommunityUpdateEnvelope.prototype.getUpdate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes Update = 4;
 * This is a type-conversion wrapper around `getUpdate()`
 * @return {string}
 */
proto.msg.CommunityUpdateEnvelope.prototype.getUpdate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUpdate()));
};


/**
 * optional bytes Update = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUpdate()`
 * @return {!Uint8Array}
 */
proto.msg.CommunityUpdateEnvelope.prototype.getUpdate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUpdate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.CommunityUpdateEnvelope} returns this
 */
proto.msg.CommunityUpdateEnvelope.prototype.setUpdate = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.CommunityUpdateContainer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.CommunityUpdateContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.CommunityUpdateContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.CommunityUpdateContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityUpdateContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    proto.msg.CommunityUpdateEnvelope.toObject, includeInstance),
    empty: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.CommunityUpdateContainer}
 */
proto.msg.CommunityUpdateContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.CommunityUpdateContainer;
  return proto.msg.CommunityUpdateContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.CommunityUpdateContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.CommunityUpdateContainer}
 */
proto.msg.CommunityUpdateContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.CommunityUpdateEnvelope;
      reader.readMessage(value,proto.msg.CommunityUpdateEnvelope.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.CommunityUpdateContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.CommunityUpdateContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.CommunityUpdateContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.CommunityUpdateContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.CommunityUpdateEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getEmpty();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated CommunityUpdateEnvelope Updates = 1;
 * @return {!Array<!proto.msg.CommunityUpdateEnvelope>}
 */
proto.msg.CommunityUpdateContainer.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.msg.CommunityUpdateEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.CommunityUpdateEnvelope, 1));
};


/**
 * @param {!Array<!proto.msg.CommunityUpdateEnvelope>} value
 * @return {!proto.msg.CommunityUpdateContainer} returns this
*/
proto.msg.CommunityUpdateContainer.prototype.setUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.CommunityUpdateEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.CommunityUpdateEnvelope}
 */
proto.msg.CommunityUpdateContainer.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.CommunityUpdateEnvelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.CommunityUpdateContainer} returns this
 */
proto.msg.CommunityUpdateContainer.prototype.clearUpdatesList = function() {
  return this.setUpdatesList([]);
};


/**
 * optional bool Empty = 2;
 * @return {boolean}
 */
proto.msg.CommunityUpdateContainer.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.CommunityUpdateContainer} returns this
 */
proto.msg.CommunityUpdateContainer.prototype.setEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.msg);
