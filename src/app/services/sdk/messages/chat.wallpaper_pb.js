/* eslint-disable */
// source: chat.wallpaper.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.object.extend(proto, core_types_pb);
var chat_messages_medias_pb = require('./chat.messages.medias_pb.js');
goog.object.extend(proto, chat_messages_medias_pb);
goog.exportSymbol('proto.msg.InputWallPaper', null, global);
goog.exportSymbol('proto.msg.WallPaper', null, global);
goog.exportSymbol('proto.msg.WallPaperDelete', null, global);
goog.exportSymbol('proto.msg.WallPaperGet', null, global);
goog.exportSymbol('proto.msg.WallPaperReset', null, global);
goog.exportSymbol('proto.msg.WallPaperSave', null, global);
goog.exportSymbol('proto.msg.WallPaperSettings', null, global);
goog.exportSymbol('proto.msg.WallPaperUpload', null, global);
goog.exportSymbol('proto.msg.WallPapersMany', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.WallPaperGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.WallPaperGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.WallPaperGet.displayName = 'proto.msg.WallPaperGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.WallPaperSave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.WallPaperSave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.WallPaperSave.displayName = 'proto.msg.WallPaperSave';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.WallPaperDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.WallPaperDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.WallPaperDelete.displayName = 'proto.msg.WallPaperDelete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.WallPaperUpload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.WallPaperUpload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.WallPaperUpload.displayName = 'proto.msg.WallPaperUpload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.WallPaperReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.WallPaperReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.WallPaperReset.displayName = 'proto.msg.WallPaperReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputWallPaper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputWallPaper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputWallPaper.displayName = 'proto.msg.InputWallPaper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.WallPaperSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.WallPaperSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.WallPaperSettings.displayName = 'proto.msg.WallPaperSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.WallPaper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.WallPaper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.WallPaper.displayName = 'proto.msg.WallPaper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.WallPapersMany = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.WallPapersMany.repeatedFields_, null);
};
goog.inherits(proto.msg.WallPapersMany, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.WallPapersMany.displayName = 'proto.msg.WallPapersMany';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.WallPaperGet.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.WallPaperGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.WallPaperGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    crc32hash: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.WallPaperGet}
 */
proto.msg.WallPaperGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.WallPaperGet;
  return proto.msg.WallPaperGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.WallPaperGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.WallPaperGet}
 */
proto.msg.WallPaperGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCrc32hash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.WallPaperGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.WallPaperGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.WallPaperGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrc32hash();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 Crc32Hash = 2;
 * @return {number}
 */
proto.msg.WallPaperGet.prototype.getCrc32hash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPaperGet} returns this
 */
proto.msg.WallPaperGet.prototype.setCrc32hash = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.WallPaperSave.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.WallPaperSave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.WallPaperSave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperSave.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallpaper: (f = msg.getWallpaper()) && proto.msg.InputWallPaper.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && proto.msg.WallPaperSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.WallPaperSave}
 */
proto.msg.WallPaperSave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.WallPaperSave;
  return proto.msg.WallPaperSave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.WallPaperSave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.WallPaperSave}
 */
proto.msg.WallPaperSave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.InputWallPaper;
      reader.readMessage(value,proto.msg.InputWallPaper.deserializeBinaryFromReader);
      msg.setWallpaper(value);
      break;
    case 2:
      var value = new proto.msg.WallPaperSettings;
      reader.readMessage(value,proto.msg.WallPaperSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.WallPaperSave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.WallPaperSave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.WallPaperSave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperSave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWallpaper();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msg.InputWallPaper.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msg.WallPaperSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputWallPaper WallPaper = 1;
 * @return {?proto.msg.InputWallPaper}
 */
proto.msg.WallPaperSave.prototype.getWallpaper = function() {
  return /** @type{?proto.msg.InputWallPaper} */ (
    jspb.Message.getWrapperField(this, proto.msg.InputWallPaper, 1));
};


/**
 * @param {?proto.msg.InputWallPaper|undefined} value
 * @return {!proto.msg.WallPaperSave} returns this
*/
proto.msg.WallPaperSave.prototype.setWallpaper = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.WallPaperSave} returns this
 */
proto.msg.WallPaperSave.prototype.clearWallpaper = function() {
  return this.setWallpaper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.WallPaperSave.prototype.hasWallpaper = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WallPaperSettings Settings = 2;
 * @return {?proto.msg.WallPaperSettings}
 */
proto.msg.WallPaperSave.prototype.getSettings = function() {
  return /** @type{?proto.msg.WallPaperSettings} */ (
    jspb.Message.getWrapperField(this, proto.msg.WallPaperSettings, 2));
};


/**
 * @param {?proto.msg.WallPaperSettings|undefined} value
 * @return {!proto.msg.WallPaperSave} returns this
*/
proto.msg.WallPaperSave.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.WallPaperSave} returns this
 */
proto.msg.WallPaperSave.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.WallPaperSave.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.WallPaperDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.WallPaperDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.WallPaperDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperDelete.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallpaper: (f = msg.getWallpaper()) && proto.msg.InputWallPaper.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.WallPaperDelete}
 */
proto.msg.WallPaperDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.WallPaperDelete;
  return proto.msg.WallPaperDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.WallPaperDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.WallPaperDelete}
 */
proto.msg.WallPaperDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.InputWallPaper;
      reader.readMessage(value,proto.msg.InputWallPaper.deserializeBinaryFromReader);
      msg.setWallpaper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.WallPaperDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.WallPaperDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.WallPaperDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWallpaper();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msg.InputWallPaper.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputWallPaper WallPaper = 1;
 * @return {?proto.msg.InputWallPaper}
 */
proto.msg.WallPaperDelete.prototype.getWallpaper = function() {
  return /** @type{?proto.msg.InputWallPaper} */ (
    jspb.Message.getWrapperField(this, proto.msg.InputWallPaper, 1));
};


/**
 * @param {?proto.msg.InputWallPaper|undefined} value
 * @return {!proto.msg.WallPaperDelete} returns this
*/
proto.msg.WallPaperDelete.prototype.setWallpaper = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.WallPaperDelete} returns this
 */
proto.msg.WallPaperDelete.prototype.clearWallpaper = function() {
  return this.setWallpaper(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.WallPaperDelete.prototype.hasWallpaper = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.WallPaperUpload.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.WallPaperUpload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.WallPaperUpload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperUpload.toObject = function(includeInstance, msg) {
  var f, obj = {
    uploadedfile: (f = msg.getUploadedfile()) && core_types_pb.InputFile.toObject(includeInstance, f),
    file: (f = msg.getFile()) && core_types_pb.InputDocument.toObject(includeInstance, f),
    mimetype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    settings: (f = msg.getSettings()) && proto.msg.WallPaperSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.WallPaperUpload}
 */
proto.msg.WallPaperUpload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.WallPaperUpload;
  return proto.msg.WallPaperUpload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.WallPaperUpload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.WallPaperUpload}
 */
proto.msg.WallPaperUpload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputFile;
      reader.readMessage(value,core_types_pb.InputFile.deserializeBinaryFromReader);
      msg.setUploadedfile(value);
      break;
    case 2:
      var value = new core_types_pb.InputDocument;
      reader.readMessage(value,core_types_pb.InputDocument.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimetype(value);
      break;
    case 4:
      var value = new proto.msg.WallPaperSettings;
      reader.readMessage(value,proto.msg.WallPaperSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.WallPaperUpload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.WallPaperUpload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.WallPaperUpload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperUpload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUploadedfile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputFile.serializeBinaryToWriter
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputDocument.serializeBinaryToWriter
    );
  }
  f = message.getMimetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.msg.WallPaperSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional InputFile UploadedFile = 1;
 * @return {?proto.msg.InputFile}
 */
proto.msg.WallPaperUpload.prototype.getUploadedfile = function() {
  return /** @type{?proto.msg.InputFile} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputFile, 1));
};


/**
 * @param {?proto.msg.InputFile|undefined} value
 * @return {!proto.msg.WallPaperUpload} returns this
*/
proto.msg.WallPaperUpload.prototype.setUploadedfile = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.WallPaperUpload} returns this
 */
proto.msg.WallPaperUpload.prototype.clearUploadedfile = function() {
  return this.setUploadedfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.WallPaperUpload.prototype.hasUploadedfile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InputDocument File = 2;
 * @return {?proto.msg.InputDocument}
 */
proto.msg.WallPaperUpload.prototype.getFile = function() {
  return /** @type{?proto.msg.InputDocument} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputDocument, 2));
};


/**
 * @param {?proto.msg.InputDocument|undefined} value
 * @return {!proto.msg.WallPaperUpload} returns this
*/
proto.msg.WallPaperUpload.prototype.setFile = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.WallPaperUpload} returns this
 */
proto.msg.WallPaperUpload.prototype.clearFile = function() {
  return this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.WallPaperUpload.prototype.hasFile = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string MimeType = 3;
 * @return {string}
 */
proto.msg.WallPaperUpload.prototype.getMimetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.WallPaperUpload} returns this
 */
proto.msg.WallPaperUpload.prototype.setMimetype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional WallPaperSettings Settings = 4;
 * @return {?proto.msg.WallPaperSettings}
 */
proto.msg.WallPaperUpload.prototype.getSettings = function() {
  return /** @type{?proto.msg.WallPaperSettings} */ (
    jspb.Message.getWrapperField(this, proto.msg.WallPaperSettings, 4));
};


/**
 * @param {?proto.msg.WallPaperSettings|undefined} value
 * @return {!proto.msg.WallPaperUpload} returns this
*/
proto.msg.WallPaperUpload.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.WallPaperUpload} returns this
 */
proto.msg.WallPaperUpload.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.WallPaperUpload.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.WallPaperReset.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.WallPaperReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.WallPaperReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperReset.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.WallPaperReset}
 */
proto.msg.WallPaperReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.WallPaperReset;
  return proto.msg.WallPaperReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.WallPaperReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.WallPaperReset}
 */
proto.msg.WallPaperReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.WallPaperReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.WallPaperReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.WallPaperReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputWallPaper.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputWallPaper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputWallPaper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputWallPaper.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accesshash: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputWallPaper}
 */
proto.msg.InputWallPaper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputWallPaper;
  return proto.msg.InputWallPaper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputWallPaper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputWallPaper}
 */
proto.msg.InputWallPaper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputWallPaper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputWallPaper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputWallPaper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputWallPaper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAccesshash();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
};


/**
 * optional int64 ID = 1;
 * @return {number}
 */
proto.msg.InputWallPaper.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.InputWallPaper} returns this
 */
proto.msg.InputWallPaper.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 AccessHash = 2;
 * @return {number}
 */
proto.msg.InputWallPaper.prototype.getAccesshash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.InputWallPaper} returns this
 */
proto.msg.InputWallPaper.prototype.setAccesshash = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.WallPaperSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.WallPaperSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.WallPaperSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    blur: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    motion: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    backgroundcolour: jspb.Message.getFieldWithDefault(msg, 3, 0),
    backgroundsecondcolour: jspb.Message.getFieldWithDefault(msg, 4, 0),
    opacity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rotation: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.WallPaperSettings}
 */
proto.msg.WallPaperSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.WallPaperSettings;
  return proto.msg.WallPaperSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.WallPaperSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.WallPaperSettings}
 */
proto.msg.WallPaperSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlur(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMotion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBackgroundcolour(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBackgroundsecondcolour(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpacity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.WallPaperSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.WallPaperSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.WallPaperSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaperSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlur();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMotion();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBackgroundcolour();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBackgroundsecondcolour();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getOpacity();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getRotation();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional bool Blur = 1;
 * @return {boolean}
 */
proto.msg.WallPaperSettings.prototype.getBlur = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.WallPaperSettings} returns this
 */
proto.msg.WallPaperSettings.prototype.setBlur = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool Motion = 2;
 * @return {boolean}
 */
proto.msg.WallPaperSettings.prototype.getMotion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.WallPaperSettings} returns this
 */
proto.msg.WallPaperSettings.prototype.setMotion = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 BackgroundColour = 3;
 * @return {number}
 */
proto.msg.WallPaperSettings.prototype.getBackgroundcolour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPaperSettings} returns this
 */
proto.msg.WallPaperSettings.prototype.setBackgroundcolour = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 BackgroundSecondColour = 4;
 * @return {number}
 */
proto.msg.WallPaperSettings.prototype.getBackgroundsecondcolour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPaperSettings} returns this
 */
proto.msg.WallPaperSettings.prototype.setBackgroundsecondcolour = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Opacity = 5;
 * @return {number}
 */
proto.msg.WallPaperSettings.prototype.getOpacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPaperSettings} returns this
 */
proto.msg.WallPaperSettings.prototype.setOpacity = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 Rotation = 6;
 * @return {number}
 */
proto.msg.WallPaperSettings.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPaperSettings} returns this
 */
proto.msg.WallPaperSettings.prototype.setRotation = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.WallPaper.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.WallPaper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.WallPaper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaper.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accesshash: jspb.Message.getFieldWithDefault(msg, 2, 0),
    creator: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    pb_default: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    pattern: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    dark: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    document: (f = msg.getDocument()) && chat_messages_medias_pb.Document.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && proto.msg.WallPaperSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.WallPaper}
 */
proto.msg.WallPaper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.WallPaper;
  return proto.msg.WallPaper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.WallPaper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.WallPaper}
 */
proto.msg.WallPaper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setAccesshash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreator(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefault(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPattern(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDark(value);
      break;
    case 7:
      var value = new chat_messages_medias_pb.Document;
      reader.readMessage(value,chat_messages_medias_pb.Document.deserializeBinaryFromReader);
      msg.setDocument(value);
      break;
    case 8:
      var value = new proto.msg.WallPaperSettings;
      reader.readMessage(value,proto.msg.WallPaperSettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.WallPaper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.WallPaper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.WallPaper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPaper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAccesshash();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getCreator();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDefault();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPattern();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDark();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDocument();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      chat_messages_medias_pb.Document.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.msg.WallPaperSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 ID = 1;
 * @return {number}
 */
proto.msg.WallPaper.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPaper} returns this
 */
proto.msg.WallPaper.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional fixed64 AccessHash = 2;
 * @return {number}
 */
proto.msg.WallPaper.prototype.getAccesshash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPaper} returns this
 */
proto.msg.WallPaper.prototype.setAccesshash = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool Creator = 3;
 * @return {boolean}
 */
proto.msg.WallPaper.prototype.getCreator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.WallPaper} returns this
 */
proto.msg.WallPaper.prototype.setCreator = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool Default = 4;
 * @return {boolean}
 */
proto.msg.WallPaper.prototype.getDefault = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.WallPaper} returns this
 */
proto.msg.WallPaper.prototype.setDefault = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool Pattern = 5;
 * @return {boolean}
 */
proto.msg.WallPaper.prototype.getPattern = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.WallPaper} returns this
 */
proto.msg.WallPaper.prototype.setPattern = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool Dark = 6;
 * @return {boolean}
 */
proto.msg.WallPaper.prototype.getDark = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.WallPaper} returns this
 */
proto.msg.WallPaper.prototype.setDark = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional Document Document = 7;
 * @return {?proto.msg.Document}
 */
proto.msg.WallPaper.prototype.getDocument = function() {
  return /** @type{?proto.msg.Document} */ (
    jspb.Message.getWrapperField(this, chat_messages_medias_pb.Document, 7));
};


/**
 * @param {?proto.msg.Document|undefined} value
 * @return {!proto.msg.WallPaper} returns this
*/
proto.msg.WallPaper.prototype.setDocument = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.WallPaper} returns this
 */
proto.msg.WallPaper.prototype.clearDocument = function() {
  return this.setDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.WallPaper.prototype.hasDocument = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional WallPaperSettings Settings = 8;
 * @return {?proto.msg.WallPaperSettings}
 */
proto.msg.WallPaper.prototype.getSettings = function() {
  return /** @type{?proto.msg.WallPaperSettings} */ (
    jspb.Message.getWrapperField(this, proto.msg.WallPaperSettings, 8));
};


/**
 * @param {?proto.msg.WallPaperSettings|undefined} value
 * @return {!proto.msg.WallPaper} returns this
*/
proto.msg.WallPaper.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.WallPaper} returns this
 */
proto.msg.WallPaper.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.WallPaper.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.WallPapersMany.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.WallPapersMany.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.WallPapersMany.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.WallPapersMany} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPapersMany.toObject = function(includeInstance, msg) {
  var f, obj = {
    wallpapersList: jspb.Message.toObjectList(msg.getWallpapersList(),
    proto.msg.WallPaper.toObject, includeInstance),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    crc32hash: jspb.Message.getFieldWithDefault(msg, 3, 0),
    empty: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.WallPapersMany}
 */
proto.msg.WallPapersMany.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.WallPapersMany;
  return proto.msg.WallPapersMany.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.WallPapersMany} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.WallPapersMany}
 */
proto.msg.WallPapersMany.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.WallPaper;
      reader.readMessage(value,proto.msg.WallPaper.deserializeBinaryFromReader);
      msg.addWallpapers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCrc32hash(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.WallPapersMany.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.WallPapersMany.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.WallPapersMany} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.WallPapersMany.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWallpapersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.WallPaper.serializeBinaryToWriter
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCrc32hash();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEmpty();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated WallPaper WallPapers = 1;
 * @return {!Array<!proto.msg.WallPaper>}
 */
proto.msg.WallPapersMany.prototype.getWallpapersList = function() {
  return /** @type{!Array<!proto.msg.WallPaper>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.WallPaper, 1));
};


/**
 * @param {!Array<!proto.msg.WallPaper>} value
 * @return {!proto.msg.WallPapersMany} returns this
*/
proto.msg.WallPapersMany.prototype.setWallpapersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.WallPaper=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.WallPaper}
 */
proto.msg.WallPapersMany.prototype.addWallpapers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.WallPaper, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.WallPapersMany} returns this
 */
proto.msg.WallPapersMany.prototype.clearWallpapersList = function() {
  return this.setWallpapersList([]);
};


/**
 * optional int32 Count = 2;
 * @return {number}
 */
proto.msg.WallPapersMany.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPapersMany} returns this
 */
proto.msg.WallPapersMany.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 Crc32Hash = 3;
 * @return {number}
 */
proto.msg.WallPapersMany.prototype.getCrc32hash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.WallPapersMany} returns this
 */
proto.msg.WallPapersMany.prototype.setCrc32hash = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool Empty = 5;
 * @return {boolean}
 */
proto.msg.WallPapersMany.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.WallPapersMany} returns this
 */
proto.msg.WallPapersMany.prototype.setEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.msg);
