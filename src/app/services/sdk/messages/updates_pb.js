/* eslint-disable */
// source: updates.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.object.extend(proto, core_types_pb);
var calendar_pb = require('./calendar_pb.js');
goog.object.extend(proto, calendar_pb);
var chat_messages_medias_pb = require('./chat.messages.medias_pb.js');
goog.object.extend(proto, chat_messages_medias_pb);
var chat_phone_pb = require('./chat.phone_pb.js');
goog.object.extend(proto, chat_phone_pb);
goog.exportSymbol('proto.msg.ClientRedirect', null, global);
goog.exportSymbol('proto.msg.RedirectTarget', null, global);
goog.exportSymbol('proto.msg.UpdateAccountPrivacy', null, global);
goog.exportSymbol('proto.msg.UpdateAuthorizationReset', null, global);
goog.exportSymbol('proto.msg.UpdateBotCallbackQuery', null, global);
goog.exportSymbol('proto.msg.UpdateBotInlineQuery', null, global);
goog.exportSymbol('proto.msg.UpdateBotInlineSend', null, global);
goog.exportSymbol('proto.msg.UpdateCalendarEventAdded', null, global);
goog.exportSymbol('proto.msg.UpdateCalendarEventEdited', null, global);
goog.exportSymbol('proto.msg.UpdateCalendarEventRemoved', null, global);
goog.exportSymbol('proto.msg.UpdateCommunityMessage', null, global);
goog.exportSymbol('proto.msg.UpdateCommunityReadOutbox', null, global);
goog.exportSymbol('proto.msg.UpdateCommunityTyping', null, global);
goog.exportSymbol('proto.msg.UpdateDialogPinned', null, global);
goog.exportSymbol('proto.msg.UpdateDialogPinnedReorder', null, global);
goog.exportSymbol('proto.msg.UpdateDifference', null, global);
goog.exportSymbol('proto.msg.UpdateDraftMessage', null, global);
goog.exportSymbol('proto.msg.UpdateDraftMessageCleared', null, global);
goog.exportSymbol('proto.msg.UpdateGetDifference', null, global);
goog.exportSymbol('proto.msg.UpdateGetState', null, global);
goog.exportSymbol('proto.msg.UpdateGroupAdminOnly', null, global);
goog.exportSymbol('proto.msg.UpdateGroupAdmins', null, global);
goog.exportSymbol('proto.msg.UpdateGroupParticipantAdd', null, global);
goog.exportSymbol('proto.msg.UpdateGroupParticipantAdmin', null, global);
goog.exportSymbol('proto.msg.UpdateGroupParticipantDeleted', null, global);
goog.exportSymbol('proto.msg.UpdateGroupPhoto', null, global);
goog.exportSymbol('proto.msg.UpdateLabelDeleted', null, global);
goog.exportSymbol('proto.msg.UpdateLabelItemsAdded', null, global);
goog.exportSymbol('proto.msg.UpdateLabelItemsRemoved', null, global);
goog.exportSymbol('proto.msg.UpdateLabelSet', null, global);
goog.exportSymbol('proto.msg.UpdateMessageEdited', null, global);
goog.exportSymbol('proto.msg.UpdateMessageID', null, global);
goog.exportSymbol('proto.msg.UpdateMessagePinned', null, global);
goog.exportSymbol('proto.msg.UpdateMessagePoll', null, global);
goog.exportSymbol('proto.msg.UpdateMessagesDeleted', null, global);
goog.exportSymbol('proto.msg.UpdateNewMessage', null, global);
goog.exportSymbol('proto.msg.UpdateNotifySettings', null, global);
goog.exportSymbol('proto.msg.UpdatePhoneCall', null, global);
goog.exportSymbol('proto.msg.UpdatePhoneCallEnded', null, global);
goog.exportSymbol('proto.msg.UpdatePhoneCallStarted', null, global);
goog.exportSymbol('proto.msg.UpdateReaction', null, global);
goog.exportSymbol('proto.msg.UpdateReadHistoryInbox', null, global);
goog.exportSymbol('proto.msg.UpdateReadHistoryOutbox', null, global);
goog.exportSymbol('proto.msg.UpdateReadMessagesContents', null, global);
goog.exportSymbol('proto.msg.UpdateRedirect', null, global);
goog.exportSymbol('proto.msg.UpdateState', null, global);
goog.exportSymbol('proto.msg.UpdateTeam', null, global);
goog.exportSymbol('proto.msg.UpdateTeamCreated', null, global);
goog.exportSymbol('proto.msg.UpdateTeamMemberAdded', null, global);
goog.exportSymbol('proto.msg.UpdateTeamMemberRemoved', null, global);
goog.exportSymbol('proto.msg.UpdateTeamMemberStatus', null, global);
goog.exportSymbol('proto.msg.UpdateTeamPhoto', null, global);
goog.exportSymbol('proto.msg.UpdateTooLong', null, global);
goog.exportSymbol('proto.msg.UpdateUserBlocked', null, global);
goog.exportSymbol('proto.msg.UpdateUserPhoto', null, global);
goog.exportSymbol('proto.msg.UpdateUserStatus', null, global);
goog.exportSymbol('proto.msg.UpdateUserTyping', null, global);
goog.exportSymbol('proto.msg.UpdateUsername', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGetState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGetState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGetState.displayName = 'proto.msg.UpdateGetState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGetDifference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGetDifference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGetDifference.displayName = 'proto.msg.UpdateGetDifference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDifference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateDifference.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateDifference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDifference.displayName = 'proto.msg.UpdateDifference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateTooLong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateTooLong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateTooLong.displayName = 'proto.msg.UpdateTooLong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateState.displayName = 'proto.msg.UpdateState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessageID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateMessageID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateMessageID.displayName = 'proto.msg.UpdateMessageID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateNewMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateNewMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateNewMessage.displayName = 'proto.msg.UpdateNewMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessageEdited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateMessageEdited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateMessageEdited.displayName = 'proto.msg.UpdateMessageEdited';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessagesDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateMessagesDeleted.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateMessagesDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateMessagesDeleted.displayName = 'proto.msg.UpdateMessagesDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReadHistoryInbox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateReadHistoryInbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateReadHistoryInbox.displayName = 'proto.msg.UpdateReadHistoryInbox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReadHistoryOutbox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateReadHistoryOutbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateReadHistoryOutbox.displayName = 'proto.msg.UpdateReadHistoryOutbox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessagePinned = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateMessagePinned, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateMessagePinned.displayName = 'proto.msg.UpdateMessagePinned';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserTyping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUserTyping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUserTyping.displayName = 'proto.msg.UpdateUserTyping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUserStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUserStatus.displayName = 'proto.msg.UpdateUserStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUsername.displayName = 'proto.msg.UpdateUsername';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateUserPhoto.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateUserPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUserPhoto.displayName = 'proto.msg.UpdateUserPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateNotifySettings.displayName = 'proto.msg.UpdateNotifySettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupParticipantAdd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupParticipantAdd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupParticipantAdd.displayName = 'proto.msg.UpdateGroupParticipantAdd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupParticipantDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupParticipantDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupParticipantDeleted.displayName = 'proto.msg.UpdateGroupParticipantDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupParticipantAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupParticipantAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupParticipantAdmin.displayName = 'proto.msg.UpdateGroupParticipantAdmin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupAdmins = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupAdmins, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupAdmins.displayName = 'proto.msg.UpdateGroupAdmins';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupAdminOnly = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupAdminOnly, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupAdminOnly.displayName = 'proto.msg.UpdateGroupAdminOnly';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupPhoto.displayName = 'proto.msg.UpdateGroupPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReadMessagesContents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateReadMessagesContents.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateReadMessagesContents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateReadMessagesContents.displayName = 'proto.msg.UpdateReadMessagesContents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateAuthorizationReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateAuthorizationReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateAuthorizationReset.displayName = 'proto.msg.UpdateAuthorizationReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDraftMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateDraftMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDraftMessage.displayName = 'proto.msg.UpdateDraftMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDraftMessageCleared = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateDraftMessageCleared, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDraftMessageCleared.displayName = 'proto.msg.UpdateDraftMessageCleared';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDialogPinned = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateDialogPinned, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDialogPinned.displayName = 'proto.msg.UpdateDialogPinned';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDialogPinnedReorder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateDialogPinnedReorder.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateDialogPinnedReorder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDialogPinnedReorder.displayName = 'proto.msg.UpdateDialogPinnedReorder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateAccountPrivacy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateAccountPrivacy.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateAccountPrivacy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateAccountPrivacy.displayName = 'proto.msg.UpdateAccountPrivacy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateLabelItemsAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateLabelItemsAdded.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateLabelItemsAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateLabelItemsAdded.displayName = 'proto.msg.UpdateLabelItemsAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateLabelItemsRemoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateLabelItemsRemoved.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateLabelItemsRemoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateLabelItemsRemoved.displayName = 'proto.msg.UpdateLabelItemsRemoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateLabelSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateLabelSet.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateLabelSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateLabelSet.displayName = 'proto.msg.UpdateLabelSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateLabelDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateLabelDeleted.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateLabelDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateLabelDeleted.displayName = 'proto.msg.UpdateLabelDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserBlocked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUserBlocked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUserBlocked.displayName = 'proto.msg.UpdateUserBlocked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessagePoll = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateMessagePoll, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateMessagePoll.displayName = 'proto.msg.UpdateMessagePoll';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateBotCallbackQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateBotCallbackQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateBotCallbackQuery.displayName = 'proto.msg.UpdateBotCallbackQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateBotInlineQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateBotInlineQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateBotInlineQuery.displayName = 'proto.msg.UpdateBotInlineQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateBotInlineSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateBotInlineSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateBotInlineSend.displayName = 'proto.msg.UpdateBotInlineSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateTeamCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateTeamCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateTeamCreated.displayName = 'proto.msg.UpdateTeamCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateTeamMemberAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateTeamMemberAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateTeamMemberAdded.displayName = 'proto.msg.UpdateTeamMemberAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateTeamMemberRemoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateTeamMemberRemoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateTeamMemberRemoved.displayName = 'proto.msg.UpdateTeamMemberRemoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateTeamMemberStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateTeamMemberStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateTeamMemberStatus.displayName = 'proto.msg.UpdateTeamMemberStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateTeamPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateTeamPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateTeamPhoto.displayName = 'proto.msg.UpdateTeamPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateTeam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateTeam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateTeam.displayName = 'proto.msg.UpdateTeam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateCommunityMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateCommunityMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateCommunityMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateCommunityMessage.displayName = 'proto.msg.UpdateCommunityMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateCommunityReadOutbox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateCommunityReadOutbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateCommunityReadOutbox.displayName = 'proto.msg.UpdateCommunityReadOutbox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateCommunityTyping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateCommunityTyping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateCommunityTyping.displayName = 'proto.msg.UpdateCommunityTyping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateReaction.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateReaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateReaction.displayName = 'proto.msg.UpdateReaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateCalendarEventAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateCalendarEventAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateCalendarEventAdded.displayName = 'proto.msg.UpdateCalendarEventAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateCalendarEventRemoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateCalendarEventRemoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateCalendarEventRemoved.displayName = 'proto.msg.UpdateCalendarEventRemoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateCalendarEventEdited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateCalendarEventEdited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateCalendarEventEdited.displayName = 'proto.msg.UpdateCalendarEventEdited';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateRedirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateRedirect.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateRedirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateRedirect.displayName = 'proto.msg.UpdateRedirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.ClientRedirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.ClientRedirect.repeatedFields_, null);
};
goog.inherits(proto.msg.ClientRedirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.ClientRedirect.displayName = 'proto.msg.ClientRedirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdatePhoneCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdatePhoneCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdatePhoneCall.displayName = 'proto.msg.UpdatePhoneCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdatePhoneCallStarted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdatePhoneCallStarted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdatePhoneCallStarted.displayName = 'proto.msg.UpdatePhoneCallStarted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdatePhoneCallEnded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdatePhoneCallEnded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdatePhoneCallEnded.displayName = 'proto.msg.UpdatePhoneCallEnded';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGetState.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGetState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGetState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGetState}
 */
proto.msg.UpdateGetState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGetState;
  return proto.msg.UpdateGetState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGetState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGetState}
 */
proto.msg.UpdateGetState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGetState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGetState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGetState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGetDifference.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGetDifference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGetDifference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetDifference.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGetDifference}
 */
proto.msg.UpdateGetDifference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGetDifference;
  return proto.msg.UpdateGetDifference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGetDifference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGetDifference}
 */
proto.msg.UpdateGetDifference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGetDifference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGetDifference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGetDifference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetDifference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 From = 1;
 * @return {number}
 */
proto.msg.UpdateGetDifference.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGetDifference} returns this
 */
proto.msg.UpdateGetDifference.prototype.setFrom = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Limit = 2;
 * @return {number}
 */
proto.msg.UpdateGetDifference.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGetDifference} returns this
 */
proto.msg.UpdateGetDifference.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateDifference.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDifference.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDifference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDifference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDifference.toObject = function(includeInstance, msg) {
  var f, obj = {
    more: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    maxupdateid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    minupdateid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    core_types_pb.UpdateEnvelope.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    core_types_pb.User.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    core_types_pb.Group.toObject, includeInstance),
    currentupdateid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDifference}
 */
proto.msg.UpdateDifference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDifference;
  return proto.msg.UpdateDifference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDifference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDifference}
 */
proto.msg.UpdateDifference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxupdateid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinupdateid(value);
      break;
    case 4:
      var value = new core_types_pb.UpdateEnvelope;
      reader.readMessage(value,core_types_pb.UpdateEnvelope.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    case 5:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 6:
      var value = new core_types_pb.Group;
      reader.readMessage(value,core_types_pb.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentupdateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDifference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDifference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDifference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDifference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMore();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMaxupdateid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMinupdateid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      core_types_pb.UpdateEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      core_types_pb.Group.serializeBinaryToWriter
    );
  }
  f = message.getCurrentupdateid();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional bool More = 1;
 * @return {boolean}
 */
proto.msg.UpdateDifference.prototype.getMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.setMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 MaxUpdateID = 2;
 * @return {number}
 */
proto.msg.UpdateDifference.prototype.getMaxupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.setMaxupdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 MinUpdateID = 3;
 * @return {number}
 */
proto.msg.UpdateDifference.prototype.getMinupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.setMinupdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated UpdateEnvelope Updates = 4;
 * @return {!Array<!proto.msg.UpdateEnvelope>}
 */
proto.msg.UpdateDifference.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.msg.UpdateEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.UpdateEnvelope, 4));
};


/**
 * @param {!Array<!proto.msg.UpdateEnvelope>} value
 * @return {!proto.msg.UpdateDifference} returns this
*/
proto.msg.UpdateDifference.prototype.setUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.UpdateEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateEnvelope}
 */
proto.msg.UpdateDifference.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.UpdateEnvelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearUpdatesList = function() {
  return this.setUpdatesList([]);
};


/**
 * repeated User Users = 5;
 * @return {!Array<!proto.msg.User>}
 */
proto.msg.UpdateDifference.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.User, 5));
};


/**
 * @param {!Array<!proto.msg.User>} value
 * @return {!proto.msg.UpdateDifference} returns this
*/
proto.msg.UpdateDifference.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.UpdateDifference.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated Group Groups = 6;
 * @return {!Array<!proto.msg.Group>}
 */
proto.msg.UpdateDifference.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.msg.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Group, 6));
};


/**
 * @param {!Array<!proto.msg.Group>} value
 * @return {!proto.msg.UpdateDifference} returns this
*/
proto.msg.UpdateDifference.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Group}
 */
proto.msg.UpdateDifference.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * optional int64 CurrentUpdateID = 7;
 * @return {number}
 */
proto.msg.UpdateDifference.prototype.getCurrentupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.setCurrentupdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateTooLong.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateTooLong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateTooLong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTooLong.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateTooLong}
 */
proto.msg.UpdateTooLong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateTooLong;
  return proto.msg.UpdateTooLong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateTooLong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateTooLong}
 */
proto.msg.UpdateTooLong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateTooLong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateTooLong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateTooLong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTooLong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateState.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateState.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateState}
 */
proto.msg.UpdateState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateState;
  return proto.msg.UpdateState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateState}
 */
proto.msg.UpdateState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 UpdateID = 1;
 * @return {number}
 */
proto.msg.UpdateState.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateState} returns this
 */
proto.msg.UpdateState.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessageID.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessageID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessageID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageID.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    randomid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessageID}
 */
proto.msg.UpdateMessageID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessageID;
  return proto.msg.UpdateMessageID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessageID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessageID}
 */
proto.msg.UpdateMessageID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessageID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessageID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessageID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRandomid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 MessageID = 1;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 RandomID = 2;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.setRandomid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateNewMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateNewMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateNewMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNewMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    message: (f = msg.getMessage()) && core_types_pb.UserMessage.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && core_types_pb.User.toObject(includeInstance, f),
    accesshash: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    senderrefid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateNewMessage}
 */
proto.msg.UpdateNewMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateNewMessage;
  return proto.msg.UpdateNewMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateNewMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateNewMessage}
 */
proto.msg.UpdateNewMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.UserMessage;
      reader.readMessage(value,core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderrefid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateNewMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateNewMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateNewMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNewMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getAccesshash();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(
      3,
      f
    );
  }
  f = message.getSenderrefid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateNewMessage.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateNewMessage.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional UserMessage Message = 1;
 * @return {?proto.msg.UserMessage}
 */
proto.msg.UpdateNewMessage.prototype.getMessage = function() {
  return /** @type{?proto.msg.UserMessage} */ (
    jspb.Message.getWrapperField(this, core_types_pb.UserMessage, 1));
};


/**
 * @param {?proto.msg.UserMessage|undefined} value
 * @return {!proto.msg.UpdateNewMessage} returns this
*/
proto.msg.UpdateNewMessage.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User Sender = 2;
 * @return {?proto.msg.User}
 */
proto.msg.UpdateNewMessage.prototype.getSender = function() {
  return /** @type{?proto.msg.User} */ (
    jspb.Message.getWrapperField(this, core_types_pb.User, 2));
};


/**
 * @param {?proto.msg.User|undefined} value
 * @return {!proto.msg.UpdateNewMessage} returns this
*/
proto.msg.UpdateNewMessage.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.clearSender = function() {
  return this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasSender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.UpdateNewMessage.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.setAccesshash = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional int64 SenderRefID = 4;
 * @return {number}
 */
proto.msg.UpdateNewMessage.prototype.getSenderrefid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.setSenderrefid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessageEdited.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessageEdited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessageEdited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageEdited.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    message: (f = msg.getMessage()) && core_types_pb.UserMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessageEdited}
 */
proto.msg.UpdateMessageEdited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessageEdited;
  return proto.msg.UpdateMessageEdited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessageEdited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessageEdited}
 */
proto.msg.UpdateMessageEdited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.UserMessage;
      reader.readMessage(value,core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessageEdited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessageEdited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessageEdited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageEdited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessageEdited.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageEdited} returns this
 */
proto.msg.UpdateMessageEdited.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateMessageEdited.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageEdited} returns this
 */
proto.msg.UpdateMessageEdited.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional UserMessage Message = 1;
 * @return {?proto.msg.UserMessage}
 */
proto.msg.UpdateMessageEdited.prototype.getMessage = function() {
  return /** @type{?proto.msg.UserMessage} */ (
    jspb.Message.getWrapperField(this, core_types_pb.UserMessage, 1));
};


/**
 * @param {?proto.msg.UserMessage|undefined} value
 * @return {!proto.msg.UpdateMessageEdited} returns this
*/
proto.msg.UpdateMessageEdited.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateMessageEdited} returns this
 */
proto.msg.UpdateMessageEdited.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessageEdited.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateMessagesDeleted.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessagesDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessagesDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessagesDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagesDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessagesDeleted}
 */
proto.msg.UpdateMessagesDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessagesDeleted;
  return proto.msg.UpdateMessagesDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessagesDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessagesDeleted}
 */
proto.msg.UpdateMessagesDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMessageidsList(value);
      break;
    case 2:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessagesDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessagesDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessagesDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagesDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessagesDeleted.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateMessagesDeleted.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateMessagesDeleted.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * repeated int64 MessageIDs = 1;
 * @return {!Array<number>}
 */
proto.msg.UpdateMessagesDeleted.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};


/**
 * optional Peer Peer = 2;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateMessagesDeleted.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 2));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
*/
proto.msg.UpdateMessagesDeleted.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessagesDeleted.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReadHistoryInbox.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReadHistoryInbox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReadHistoryInbox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryInbox.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    maxid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReadHistoryInbox}
 */
proto.msg.UpdateReadHistoryInbox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReadHistoryInbox;
  return proto.msg.UpdateReadHistoryInbox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReadHistoryInbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReadHistoryInbox}
 */
proto.msg.UpdateReadHistoryInbox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReadHistoryInbox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReadHistoryInbox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReadHistoryInbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryInbox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMaxid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
*/
proto.msg.UpdateReadHistoryInbox.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 MaxID = 2;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.setMaxid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReadHistoryOutbox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReadHistoryOutbox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryOutbox.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    maxid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReadHistoryOutbox}
 */
proto.msg.UpdateReadHistoryOutbox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReadHistoryOutbox;
  return proto.msg.UpdateReadHistoryOutbox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReadHistoryOutbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReadHistoryOutbox}
 */
proto.msg.UpdateReadHistoryOutbox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReadHistoryOutbox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReadHistoryOutbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryOutbox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMaxid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
*/
proto.msg.UpdateReadHistoryOutbox.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 MaxID = 2;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.setMaxid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 UserID = 3;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessagePinned.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessagePinned.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessagePinned} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagePinned.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    msgid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessagePinned}
 */
proto.msg.UpdateMessagePinned.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessagePinned;
  return proto.msg.UpdateMessagePinned.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessagePinned} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessagePinned}
 */
proto.msg.UpdateMessagePinned.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessagePinned.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessagePinned.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessagePinned} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagePinned.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getMsgid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessagePinned.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagePinned} returns this
 */
proto.msg.UpdateMessagePinned.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateMessagePinned.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagePinned} returns this
 */
proto.msg.UpdateMessagePinned.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateMessagePinned.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateMessagePinned} returns this
 */
proto.msg.UpdateMessagePinned.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateMessagePinned.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateMessagePinned} returns this
*/
proto.msg.UpdateMessagePinned.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateMessagePinned} returns this
 */
proto.msg.UpdateMessagePinned.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessagePinned.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 UserID = 2;
 * @return {string}
 */
proto.msg.UpdateMessagePinned.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateMessagePinned} returns this
 */
proto.msg.UpdateMessagePinned.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 MsgID = 3;
 * @return {number}
 */
proto.msg.UpdateMessagePinned.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagePinned} returns this
 */
proto.msg.UpdateMessagePinned.prototype.setMsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 Version = 5;
 * @return {number}
 */
proto.msg.UpdateMessagePinned.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagePinned} returns this
 */
proto.msg.UpdateMessagePinned.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserTyping.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserTyping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserTyping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserTyping.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    userid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peerid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    peertype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserTyping}
 */
proto.msg.UpdateUserTyping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserTyping;
  return proto.msg.UpdateUserTyping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserTyping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserTyping}
 */
proto.msg.UpdateUserTyping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {!proto.msg.TypingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserTyping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserTyping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserTyping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserTyping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPeerid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getPeertype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserTyping.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateUserTyping.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserTyping.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional TypingAction Action = 2;
 * @return {!proto.msg.TypingAction}
 */
proto.msg.UpdateUserTyping.prototype.getAction = function() {
  return /** @type {!proto.msg.TypingAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.msg.TypingAction} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 PeerID = 3;
 * @return {string}
 */
proto.msg.UpdateUserTyping.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setPeerid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional int32 PeerType = 4;
 * @return {number}
 */
proto.msg.UpdateUserTyping.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setPeertype = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserStatus}
 */
proto.msg.UpdateUserStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserStatus;
  return proto.msg.UpdateUserStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserStatus}
 */
proto.msg.UpdateUserStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserStatus.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserStatus.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int32 Status = 2;
 * @return {number}
 */
proto.msg.UpdateUserStatus.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    firstname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bio: jspb.Message.getFieldWithDefault(msg, 5, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUsername}
 */
proto.msg.UpdateUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUsername;
  return proto.msg.UpdateUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUsername}
 */
proto.msg.UpdateUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBio();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUsername.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateUsername.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string Username = 2;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FirstName = 3;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string LastName = 4;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Bio = 5;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setBio = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Phone = 6;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateUserPhoto.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    photo: (f = msg.getPhoto()) && core_types_pb.UserPhoto.toObject(includeInstance, f),
    photoid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    deletedphotoidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserPhoto}
 */
proto.msg.UpdateUserPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserPhoto;
  return proto.msg.UpdateUserPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserPhoto}
 */
proto.msg.UpdateUserPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = new core_types_pb.UserPhoto;
      reader.readMessage(value,core_types_pb.UserPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPhotoid(value);
      break;
    case 4:
      var value = /** @type {!Array<string>} */ (reader.readPackedInt64String());
      msg.setDeletedphotoidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.UserPhoto.serializeBinaryToWriter
    );
  }
  f = message.getPhotoid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getDeletedphotoidsList();
  if (f.length > 0) {
    writer.writePackedInt64String(
      4,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserPhoto.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateUserPhoto.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserPhoto.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional UserPhoto Photo = 2;
 * @return {?proto.msg.UserPhoto}
 */
proto.msg.UpdateUserPhoto.prototype.getPhoto = function() {
  return /** @type{?proto.msg.UserPhoto} */ (
    jspb.Message.getWrapperField(this, core_types_pb.UserPhoto, 2));
};


/**
 * @param {?proto.msg.UserPhoto|undefined} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
*/
proto.msg.UpdateUserPhoto.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserPhoto.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 PhotoID = 3;
 * @return {string}
 */
proto.msg.UpdateUserPhoto.prototype.getPhotoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setPhotoid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * repeated int64 DeletedPhotoIDs = 4;
 * @return {!Array<string>}
 */
proto.msg.UpdateUserPhoto.prototype.getDeletedphotoidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setDeletedphotoidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.addDeletedphotoids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.clearDeletedphotoidsList = function() {
  return this.setDeletedphotoidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    userid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    notifypeer: (f = msg.getNotifypeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && core_types_pb.PeerNotifySettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateNotifySettings}
 */
proto.msg.UpdateNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateNotifySettings;
  return proto.msg.UpdateNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateNotifySettings}
 */
proto.msg.UpdateNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setNotifypeer(value);
      break;
    case 3:
      var value = new core_types_pb.PeerNotifySettings;
      reader.readMessage(value,core_types_pb.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getNotifypeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_types_pb.PeerNotifySettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateNotifySettings.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateNotifySettings.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateNotifySettings.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateNotifySettings.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional Peer NotifyPeer = 2;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateNotifySettings.prototype.getNotifypeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 2));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
*/
proto.msg.UpdateNotifySettings.prototype.setNotifypeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.clearNotifypeer = function() {
  return this.setNotifypeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasNotifypeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PeerNotifySettings Settings = 3;
 * @return {?proto.msg.PeerNotifySettings}
 */
proto.msg.UpdateNotifySettings.prototype.getSettings = function() {
  return /** @type{?proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, core_types_pb.PeerNotifySettings, 3));
};


/**
 * @param {?proto.msg.PeerNotifySettings|undefined} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
*/
proto.msg.UpdateNotifySettings.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupParticipantAdd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupParticipantAdd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantAdd.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    inviterid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    date: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupParticipantAdd}
 */
proto.msg.UpdateGroupParticipantAdd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupParticipantAdd;
  return proto.msg.UpdateGroupParticipantAdd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupParticipantAdd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupParticipantAdd}
 */
proto.msg.UpdateGroupParticipantAdd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setInviterid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupParticipantAdd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupParticipantAdd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantAdd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getGroupid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getInviterid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 UserID = 2;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 InviterID = 3;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getInviterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setInviterid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional int64 Date = 4;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setDate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupParticipantDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupParticipantDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupParticipantDeleted}
 */
proto.msg.UpdateGroupParticipantDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupParticipantDeleted;
  return proto.msg.UpdateGroupParticipantDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupParticipantDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupParticipantDeleted}
 */
proto.msg.UpdateGroupParticipantDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupParticipantDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupParticipantDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getGroupid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 UserID = 2;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupParticipantAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupParticipantAdmin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    isadmin: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupParticipantAdmin}
 */
proto.msg.UpdateGroupParticipantAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupParticipantAdmin;
  return proto.msg.UpdateGroupParticipantAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupParticipantAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupParticipantAdmin}
 */
proto.msg.UpdateGroupParticipantAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsadmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupParticipantAdmin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupParticipantAdmin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantAdmin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getGroupid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getIsadmin();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 UserID = 2;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional bool IsAdmin = 3;
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getIsadmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setIsadmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupAdmins.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupAdmins.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupAdmins} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupAdmins.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    adminenabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupAdmins}
 */
proto.msg.UpdateGroupAdmins.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupAdmins;
  return proto.msg.UpdateGroupAdmins.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupAdmins} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupAdmins}
 */
proto.msg.UpdateGroupAdmins.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdminenabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupAdmins.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupAdmins.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupAdmins} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupAdmins.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getGroupid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getAdminenabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupAdmins.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupAdmins.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupAdmins.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bool AdminEnabled = 2;
 * @return {boolean}
 */
proto.msg.UpdateGroupAdmins.prototype.getAdminenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.setAdminenabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupAdminOnly.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupAdminOnly.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupAdminOnly} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupAdminOnly.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    adminonly: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupAdminOnly}
 */
proto.msg.UpdateGroupAdminOnly.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupAdminOnly;
  return proto.msg.UpdateGroupAdminOnly.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupAdminOnly} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupAdminOnly}
 */
proto.msg.UpdateGroupAdminOnly.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdminonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupAdminOnly.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupAdminOnly.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupAdminOnly} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupAdminOnly.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getGroupid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getAdminonly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupAdminOnly.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupAdminOnly} returns this
 */
proto.msg.UpdateGroupAdminOnly.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupAdminOnly.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupAdminOnly} returns this
 */
proto.msg.UpdateGroupAdminOnly.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupAdminOnly.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupAdminOnly} returns this
 */
proto.msg.UpdateGroupAdminOnly.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bool AdminOnly = 2;
 * @return {boolean}
 */
proto.msg.UpdateGroupAdminOnly.prototype.getAdminonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateGroupAdminOnly} returns this
 */
proto.msg.UpdateGroupAdminOnly.prototype.setAdminonly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    photo: (f = msg.getPhoto()) && core_types_pb.GroupPhoto.toObject(includeInstance, f),
    photoid: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupPhoto}
 */
proto.msg.UpdateGroupPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupPhoto;
  return proto.msg.UpdateGroupPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupPhoto}
 */
proto.msg.UpdateGroupPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = new core_types_pb.GroupPhoto;
      reader.readMessage(value,core_types_pb.GroupPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPhotoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getGroupid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.GroupPhoto.serializeBinaryToWriter
    );
  }
  f = message.getPhotoid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupPhoto.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupPhoto.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupPhoto.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional GroupPhoto Photo = 2;
 * @return {?proto.msg.GroupPhoto}
 */
proto.msg.UpdateGroupPhoto.prototype.getPhoto = function() {
  return /** @type{?proto.msg.GroupPhoto} */ (
    jspb.Message.getWrapperField(this, core_types_pb.GroupPhoto, 2));
};


/**
 * @param {?proto.msg.GroupPhoto|undefined} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
*/
proto.msg.UpdateGroupPhoto.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupPhoto.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 PhotoID = 3;
 * @return {string}
 */
proto.msg.UpdateGroupPhoto.prototype.getPhotoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.setPhotoid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateReadMessagesContents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReadMessagesContents.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReadMessagesContents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReadMessagesContents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadMessagesContents.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReadMessagesContents}
 */
proto.msg.UpdateReadMessagesContents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReadMessagesContents;
  return proto.msg.UpdateReadMessagesContents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReadMessagesContents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReadMessagesContents}
 */
proto.msg.UpdateReadMessagesContents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMessageidsList(value);
      break;
    case 2:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReadMessagesContents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReadMessagesContents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReadMessagesContents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadMessagesContents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReadMessagesContents.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReadMessagesContents.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateReadMessagesContents.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * repeated int64 MessageIDs = 1;
 * @return {!Array<number>}
 */
proto.msg.UpdateReadMessagesContents.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};


/**
 * optional Peer Peer = 2;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateReadMessagesContents.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 2));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
*/
proto.msg.UpdateReadMessagesContents.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadMessagesContents.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateAuthorizationReset.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateAuthorizationReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateAuthorizationReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateAuthorizationReset.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateAuthorizationReset}
 */
proto.msg.UpdateAuthorizationReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateAuthorizationReset;
  return proto.msg.UpdateAuthorizationReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateAuthorizationReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateAuthorizationReset}
 */
proto.msg.UpdateAuthorizationReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateAuthorizationReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateAuthorizationReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateAuthorizationReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateAuthorizationReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateAuthorizationReset.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateAuthorizationReset} returns this
 */
proto.msg.UpdateAuthorizationReset.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateAuthorizationReset.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateAuthorizationReset} returns this
 */
proto.msg.UpdateAuthorizationReset.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDraftMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDraftMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDraftMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDraftMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    message: (f = msg.getMessage()) && core_types_pb.DraftMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDraftMessage}
 */
proto.msg.UpdateDraftMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDraftMessage;
  return proto.msg.UpdateDraftMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDraftMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDraftMessage}
 */
proto.msg.UpdateDraftMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.DraftMessage;
      reader.readMessage(value,core_types_pb.DraftMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDraftMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDraftMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDraftMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDraftMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.DraftMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateDraftMessage.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDraftMessage} returns this
 */
proto.msg.UpdateDraftMessage.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateDraftMessage.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDraftMessage} returns this
 */
proto.msg.UpdateDraftMessage.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional DraftMessage Message = 1;
 * @return {?proto.msg.DraftMessage}
 */
proto.msg.UpdateDraftMessage.prototype.getMessage = function() {
  return /** @type{?proto.msg.DraftMessage} */ (
    jspb.Message.getWrapperField(this, core_types_pb.DraftMessage, 1));
};


/**
 * @param {?proto.msg.DraftMessage|undefined} value
 * @return {!proto.msg.UpdateDraftMessage} returns this
*/
proto.msg.UpdateDraftMessage.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateDraftMessage} returns this
 */
proto.msg.UpdateDraftMessage.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDraftMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDraftMessageCleared.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDraftMessageCleared.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDraftMessageCleared} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDraftMessageCleared.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDraftMessageCleared}
 */
proto.msg.UpdateDraftMessageCleared.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDraftMessageCleared;
  return proto.msg.UpdateDraftMessageCleared.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDraftMessageCleared} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDraftMessageCleared}
 */
proto.msg.UpdateDraftMessageCleared.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDraftMessageCleared.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDraftMessageCleared.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDraftMessageCleared} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDraftMessageCleared.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateDraftMessageCleared.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateDraftMessageCleared.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateDraftMessageCleared.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateDraftMessageCleared.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
*/
proto.msg.UpdateDraftMessageCleared.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDraftMessageCleared.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDialogPinned.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDialogPinned.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDialogPinned} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDialogPinned.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    pinned: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDialogPinned}
 */
proto.msg.UpdateDialogPinned.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDialogPinned;
  return proto.msg.UpdateDialogPinned.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDialogPinned} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDialogPinned}
 */
proto.msg.UpdateDialogPinned.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDialogPinned.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDialogPinned.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDialogPinned} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDialogPinned.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getPinned();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateDialogPinned.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateDialogPinned.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateDialogPinned.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateDialogPinned.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
*/
proto.msg.UpdateDialogPinned.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDialogPinned.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool Pinned = 2;
 * @return {boolean}
 */
proto.msg.UpdateDialogPinned.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.setPinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateDialogPinnedReorder.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDialogPinnedReorder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDialogPinnedReorder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDialogPinnedReorder.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    peerList: jspb.Message.toObjectList(msg.getPeerList(),
    core_types_pb.Peer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDialogPinnedReorder}
 */
proto.msg.UpdateDialogPinnedReorder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDialogPinnedReorder;
  return proto.msg.UpdateDialogPinnedReorder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDialogPinnedReorder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDialogPinnedReorder}
 */
proto.msg.UpdateDialogPinnedReorder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.addPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDialogPinnedReorder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDialogPinnedReorder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDialogPinnedReorder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
 */
proto.msg.UpdateDialogPinnedReorder.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
 */
proto.msg.UpdateDialogPinnedReorder.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * repeated Peer Peer = 1;
 * @return {!Array<!proto.msg.Peer>}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.getPeerList = function() {
  return /** @type{!Array<!proto.msg.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {!Array<!proto.msg.Peer>} value
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
*/
proto.msg.UpdateDialogPinnedReorder.prototype.setPeerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.addPeer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.Peer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
 */
proto.msg.UpdateDialogPinnedReorder.prototype.clearPeerList = function() {
  return this.setPeerList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateAccountPrivacy.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateAccountPrivacy.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateAccountPrivacy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateAccountPrivacy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateAccountPrivacy.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    chatinviteList: jspb.Message.toObjectList(msg.getChatinviteList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    lastseenList: jspb.Message.toObjectList(msg.getLastseenList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    phonenumberList: jspb.Message.toObjectList(msg.getPhonenumberList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    profilephotoList: jspb.Message.toObjectList(msg.getProfilephotoList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    forwardedmessageList: jspb.Message.toObjectList(msg.getForwardedmessageList(),
    core_types_pb.PrivacyRule.toObject, includeInstance),
    callList: jspb.Message.toObjectList(msg.getCallList(),
    core_types_pb.PrivacyRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateAccountPrivacy}
 */
proto.msg.UpdateAccountPrivacy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateAccountPrivacy;
  return proto.msg.UpdateAccountPrivacy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateAccountPrivacy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateAccountPrivacy}
 */
proto.msg.UpdateAccountPrivacy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addChatinvite(value);
      break;
    case 2:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addLastseen(value);
      break;
    case 3:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addPhonenumber(value);
      break;
    case 4:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addProfilephoto(value);
      break;
    case 5:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addForwardedmessage(value);
      break;
    case 6:
      var value = new core_types_pb.PrivacyRule;
      reader.readMessage(value,core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateAccountPrivacy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateAccountPrivacy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateAccountPrivacy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateAccountPrivacy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getChatinviteList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getLastseenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getPhonenumberList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getProfilephotoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getForwardedmessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getCallList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateAccountPrivacy.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateAccountPrivacy.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * repeated PrivacyRule ChatInvite = 1;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getChatinviteList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 1));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setChatinviteList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addChatinvite = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearChatinviteList = function() {
  return this.setChatinviteList([]);
};


/**
 * repeated PrivacyRule LastSeen = 2;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getLastseenList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 2));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setLastseenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addLastseen = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearLastseenList = function() {
  return this.setLastseenList([]);
};


/**
 * repeated PrivacyRule PhoneNumber = 3;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getPhonenumberList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 3));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setPhonenumberList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addPhonenumber = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearPhonenumberList = function() {
  return this.setPhonenumberList([]);
};


/**
 * repeated PrivacyRule ProfilePhoto = 4;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getProfilephotoList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 4));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setProfilephotoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addProfilephoto = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearProfilephotoList = function() {
  return this.setProfilephotoList([]);
};


/**
 * repeated PrivacyRule ForwardedMessage = 5;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getForwardedmessageList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 5));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setForwardedmessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addForwardedmessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearForwardedmessageList = function() {
  return this.setForwardedmessageList([]);
};


/**
 * repeated PrivacyRule Call = 6;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getCallList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.PrivacyRule, 6));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setCallList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addCall = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearCallList = function() {
  return this.setCallList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateLabelItemsAdded.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateLabelItemsAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateLabelItemsAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateLabelItemsAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelItemsAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    core_types_pb.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateLabelItemsAdded}
 */
proto.msg.UpdateLabelItemsAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateLabelItemsAdded;
  return proto.msg.UpdateLabelItemsAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateLabelItemsAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateLabelItemsAdded}
 */
proto.msg.UpdateLabelItemsAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMessageidsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setLabelidsList(value);
      break;
    case 5:
      var value = new core_types_pb.Label;
      reader.readMessage(value,core_types_pb.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateLabelItemsAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateLabelItemsAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateLabelItemsAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelItemsAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.Label.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
*/
proto.msg.UpdateLabelItemsAdded.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelItemsAdded.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int64 MessageIDs = 3;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};


/**
 * repeated int32 LabelIDs = 4;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};


/**
 * repeated Label Labels = 5;
 * @return {!Array<!proto.msg.Label>}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.msg.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Label, 5));
};


/**
 * @param {!Array<!proto.msg.Label>} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
*/
proto.msg.UpdateLabelItemsAdded.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Label}
 */
proto.msg.UpdateLabelItemsAdded.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateLabelItemsRemoved.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateLabelItemsRemoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateLabelItemsRemoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelItemsRemoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    core_types_pb.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateLabelItemsRemoved}
 */
proto.msg.UpdateLabelItemsRemoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateLabelItemsRemoved;
  return proto.msg.UpdateLabelItemsRemoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateLabelItemsRemoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateLabelItemsRemoved}
 */
proto.msg.UpdateLabelItemsRemoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMessageidsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setLabelidsList(value);
      break;
    case 5:
      var value = new core_types_pb.Label;
      reader.readMessage(value,core_types_pb.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateLabelItemsRemoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateLabelItemsRemoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelItemsRemoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.Label.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
*/
proto.msg.UpdateLabelItemsRemoved.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int64 MessageIDs = 3;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};


/**
 * repeated int32 LabelIDs = 4;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};


/**
 * repeated Label Labels = 5;
 * @return {!Array<!proto.msg.Label>}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.msg.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Label, 5));
};


/**
 * @param {!Array<!proto.msg.Label>} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
*/
proto.msg.UpdateLabelItemsRemoved.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Label}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateLabelSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateLabelSet.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateLabelSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateLabelSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    core_types_pb.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateLabelSet}
 */
proto.msg.UpdateLabelSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateLabelSet;
  return proto.msg.UpdateLabelSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateLabelSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateLabelSet}
 */
proto.msg.UpdateLabelSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.Label;
      reader.readMessage(value,core_types_pb.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateLabelSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateLabelSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateLabelSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.Label.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateLabelSet.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelSet} returns this
 */
proto.msg.UpdateLabelSet.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateLabelSet.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelSet} returns this
 */
proto.msg.UpdateLabelSet.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * repeated Label Labels = 1;
 * @return {!Array<!proto.msg.Label>}
 */
proto.msg.UpdateLabelSet.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.msg.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Label, 1));
};


/**
 * @param {!Array<!proto.msg.Label>} value
 * @return {!proto.msg.UpdateLabelSet} returns this
*/
proto.msg.UpdateLabelSet.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Label}
 */
proto.msg.UpdateLabelSet.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelSet} returns this
 */
proto.msg.UpdateLabelSet.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateLabelDeleted.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateLabelDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateLabelDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateLabelDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateLabelDeleted}
 */
proto.msg.UpdateLabelDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateLabelDeleted;
  return proto.msg.UpdateLabelDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateLabelDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateLabelDeleted}
 */
proto.msg.UpdateLabelDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setLabelidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateLabelDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateLabelDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateLabelDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateLabelDeleted.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateLabelDeleted.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * repeated int32 LabelIDs = 1;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelDeleted.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserBlocked.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserBlocked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserBlocked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserBlocked.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    blocked: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserBlocked}
 */
proto.msg.UpdateUserBlocked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserBlocked;
  return proto.msg.UpdateUserBlocked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserBlocked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserBlocked}
 */
proto.msg.UpdateUserBlocked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserBlocked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserBlocked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserBlocked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserBlocked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getBlocked();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserBlocked.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserBlocked} returns this
 */
proto.msg.UpdateUserBlocked.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateUserBlocked.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserBlocked} returns this
 */
proto.msg.UpdateUserBlocked.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserBlocked.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserBlocked} returns this
 */
proto.msg.UpdateUserBlocked.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bool Blocked = 2;
 * @return {boolean}
 */
proto.msg.UpdateUserBlocked.prototype.getBlocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateUserBlocked} returns this
 */
proto.msg.UpdateUserBlocked.prototype.setBlocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessagePoll.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessagePoll.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessagePoll} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagePoll.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    pollid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    poll: (f = msg.getPoll()) && chat_messages_medias_pb.MediaPoll.toObject(includeInstance, f),
    results: (f = msg.getResults()) && chat_messages_medias_pb.PollResults.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessagePoll}
 */
proto.msg.UpdateMessagePoll.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessagePoll;
  return proto.msg.UpdateMessagePoll.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessagePoll} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessagePoll}
 */
proto.msg.UpdateMessagePoll.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPollid(value);
      break;
    case 2:
      var value = new chat_messages_medias_pb.MediaPoll;
      reader.readMessage(value,chat_messages_medias_pb.MediaPoll.deserializeBinaryFromReader);
      msg.setPoll(value);
      break;
    case 3:
      var value = new chat_messages_medias_pb.PollResults;
      reader.readMessage(value,chat_messages_medias_pb.PollResults.deserializeBinaryFromReader);
      msg.setResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessagePoll.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessagePoll.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessagePoll} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagePoll.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPollid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPoll();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      chat_messages_medias_pb.MediaPoll.serializeBinaryToWriter
    );
  }
  f = message.getResults();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      chat_messages_medias_pb.PollResults.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessagePoll.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagePoll} returns this
 */
proto.msg.UpdateMessagePoll.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateMessagePoll.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagePoll} returns this
 */
proto.msg.UpdateMessagePoll.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 PollID = 1;
 * @return {number}
 */
proto.msg.UpdateMessagePoll.prototype.getPollid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagePoll} returns this
 */
proto.msg.UpdateMessagePoll.prototype.setPollid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MediaPoll Poll = 2;
 * @return {?proto.msg.MediaPoll}
 */
proto.msg.UpdateMessagePoll.prototype.getPoll = function() {
  return /** @type{?proto.msg.MediaPoll} */ (
    jspb.Message.getWrapperField(this, chat_messages_medias_pb.MediaPoll, 2));
};


/**
 * @param {?proto.msg.MediaPoll|undefined} value
 * @return {!proto.msg.UpdateMessagePoll} returns this
*/
proto.msg.UpdateMessagePoll.prototype.setPoll = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateMessagePoll} returns this
 */
proto.msg.UpdateMessagePoll.prototype.clearPoll = function() {
  return this.setPoll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessagePoll.prototype.hasPoll = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PollResults Results = 3;
 * @return {?proto.msg.PollResults}
 */
proto.msg.UpdateMessagePoll.prototype.getResults = function() {
  return /** @type{?proto.msg.PollResults} */ (
    jspb.Message.getWrapperField(this, chat_messages_medias_pb.PollResults, 3));
};


/**
 * @param {?proto.msg.PollResults|undefined} value
 * @return {!proto.msg.UpdateMessagePoll} returns this
*/
proto.msg.UpdateMessagePoll.prototype.setResults = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateMessagePoll} returns this
 */
proto.msg.UpdateMessagePoll.prototype.clearResults = function() {
  return this.setResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessagePoll.prototype.hasResults = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateBotCallbackQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateBotCallbackQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateBotCallbackQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateBotCallbackQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    queryid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    messageid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateBotCallbackQuery}
 */
proto.msg.UpdateBotCallbackQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateBotCallbackQuery;
  return proto.msg.UpdateBotCallbackQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateBotCallbackQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateBotCallbackQuery}
 */
proto.msg.UpdateBotCallbackQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQueryid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateBotCallbackQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateBotCallbackQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateBotCallbackQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateBotCallbackQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getQueryid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotCallbackQuery} returns this
 */
proto.msg.UpdateBotCallbackQuery.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotCallbackQuery} returns this
 */
proto.msg.UpdateBotCallbackQuery.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 QueryID = 1;
 * @return {number}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getQueryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotCallbackQuery} returns this
 */
proto.msg.UpdateBotCallbackQuery.prototype.setQueryid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 UserID = 2;
 * @return {number}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotCallbackQuery} returns this
 */
proto.msg.UpdateBotCallbackQuery.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Peer Peer = 3;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 3));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateBotCallbackQuery} returns this
*/
proto.msg.UpdateBotCallbackQuery.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateBotCallbackQuery} returns this
 */
proto.msg.UpdateBotCallbackQuery.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateBotCallbackQuery.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 MessageID = 4;
 * @return {number}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotCallbackQuery} returns this
 */
proto.msg.UpdateBotCallbackQuery.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes Data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes Data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.msg.UpdateBotCallbackQuery.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.UpdateBotCallbackQuery} returns this
 */
proto.msg.UpdateBotCallbackQuery.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateBotInlineQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateBotInlineQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateBotInlineQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateBotInlineQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    queryid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    query: jspb.Message.getFieldWithDefault(msg, 4, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 5, ""),
    geo: (f = msg.getGeo()) && core_types_pb.GeoLocation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateBotInlineQuery}
 */
proto.msg.UpdateBotInlineQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateBotInlineQuery;
  return proto.msg.UpdateBotInlineQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateBotInlineQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateBotInlineQuery}
 */
proto.msg.UpdateBotInlineQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQueryid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffset(value);
      break;
    case 6:
      var value = new core_types_pb.GeoLocation;
      reader.readMessage(value,core_types_pb.GeoLocation.deserializeBinaryFromReader);
      msg.setGeo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateBotInlineQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateBotInlineQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateBotInlineQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateBotInlineQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getQueryid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGeo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      core_types_pb.GeoLocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateBotInlineQuery.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
 */
proto.msg.UpdateBotInlineQuery.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateBotInlineQuery.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
 */
proto.msg.UpdateBotInlineQuery.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 QueryID = 1;
 * @return {number}
 */
proto.msg.UpdateBotInlineQuery.prototype.getQueryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
 */
proto.msg.UpdateBotInlineQuery.prototype.setQueryid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 UserID = 2;
 * @return {number}
 */
proto.msg.UpdateBotInlineQuery.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
 */
proto.msg.UpdateBotInlineQuery.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Peer Peer = 3;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateBotInlineQuery.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 3));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
*/
proto.msg.UpdateBotInlineQuery.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
 */
proto.msg.UpdateBotInlineQuery.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateBotInlineQuery.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string Query = 4;
 * @return {string}
 */
proto.msg.UpdateBotInlineQuery.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
 */
proto.msg.UpdateBotInlineQuery.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Offset = 5;
 * @return {string}
 */
proto.msg.UpdateBotInlineQuery.prototype.getOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
 */
proto.msg.UpdateBotInlineQuery.prototype.setOffset = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional GeoLocation Geo = 6;
 * @return {?proto.msg.GeoLocation}
 */
proto.msg.UpdateBotInlineQuery.prototype.getGeo = function() {
  return /** @type{?proto.msg.GeoLocation} */ (
    jspb.Message.getWrapperField(this, core_types_pb.GeoLocation, 6));
};


/**
 * @param {?proto.msg.GeoLocation|undefined} value
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
*/
proto.msg.UpdateBotInlineQuery.prototype.setGeo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateBotInlineQuery} returns this
 */
proto.msg.UpdateBotInlineQuery.prototype.clearGeo = function() {
  return this.setGeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateBotInlineQuery.prototype.hasGeo = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateBotInlineSend.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateBotInlineSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateBotInlineSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateBotInlineSend.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    query: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resultid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    geo: (f = msg.getGeo()) && core_types_pb.GeoLocation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateBotInlineSend}
 */
proto.msg.UpdateBotInlineSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateBotInlineSend;
  return proto.msg.UpdateBotInlineSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateBotInlineSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateBotInlineSend}
 */
proto.msg.UpdateBotInlineSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultid(value);
      break;
    case 5:
      var value = new core_types_pb.GeoLocation;
      reader.readMessage(value,core_types_pb.GeoLocation.deserializeBinaryFromReader);
      msg.setGeo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateBotInlineSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateBotInlineSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateBotInlineSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateBotInlineSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResultid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGeo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      core_types_pb.GeoLocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateBotInlineSend.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotInlineSend} returns this
 */
proto.msg.UpdateBotInlineSend.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateBotInlineSend.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotInlineSend} returns this
 */
proto.msg.UpdateBotInlineSend.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 UserID = 2;
 * @return {number}
 */
proto.msg.UpdateBotInlineSend.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateBotInlineSend} returns this
 */
proto.msg.UpdateBotInlineSend.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string Query = 3;
 * @return {string}
 */
proto.msg.UpdateBotInlineSend.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateBotInlineSend} returns this
 */
proto.msg.UpdateBotInlineSend.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ResultID = 4;
 * @return {string}
 */
proto.msg.UpdateBotInlineSend.prototype.getResultid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateBotInlineSend} returns this
 */
proto.msg.UpdateBotInlineSend.prototype.setResultid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional GeoLocation Geo = 5;
 * @return {?proto.msg.GeoLocation}
 */
proto.msg.UpdateBotInlineSend.prototype.getGeo = function() {
  return /** @type{?proto.msg.GeoLocation} */ (
    jspb.Message.getWrapperField(this, core_types_pb.GeoLocation, 5));
};


/**
 * @param {?proto.msg.GeoLocation|undefined} value
 * @return {!proto.msg.UpdateBotInlineSend} returns this
*/
proto.msg.UpdateBotInlineSend.prototype.setGeo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateBotInlineSend} returns this
 */
proto.msg.UpdateBotInlineSend.prototype.clearGeo = function() {
  return this.setGeo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateBotInlineSend.prototype.hasGeo = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateTeamCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateTeamCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateTeamCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    team: (f = msg.getTeam()) && core_types_pb.Team.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateTeamCreated}
 */
proto.msg.UpdateTeamCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateTeamCreated;
  return proto.msg.UpdateTeamCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateTeamCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateTeamCreated}
 */
proto.msg.UpdateTeamCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.Team;
      reader.readMessage(value,core_types_pb.Team.deserializeBinaryFromReader);
      msg.setTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateTeamCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateTeamCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateTeamCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Team.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateTeamCreated.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamCreated} returns this
 */
proto.msg.UpdateTeamCreated.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateTeamCreated.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamCreated} returns this
 */
proto.msg.UpdateTeamCreated.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional Team Team = 1;
 * @return {?proto.msg.Team}
 */
proto.msg.UpdateTeamCreated.prototype.getTeam = function() {
  return /** @type{?proto.msg.Team} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Team, 1));
};


/**
 * @param {?proto.msg.Team|undefined} value
 * @return {!proto.msg.UpdateTeamCreated} returns this
*/
proto.msg.UpdateTeamCreated.prototype.setTeam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateTeamCreated} returns this
 */
proto.msg.UpdateTeamCreated.prototype.clearTeam = function() {
  return this.setTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateTeamCreated.prototype.hasTeam = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateTeamMemberAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateTeamMemberAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateTeamMemberAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamMemberAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    user: (f = msg.getUser()) && core_types_pb.User.toObject(includeInstance, f),
    contact: (f = msg.getContact()) && core_types_pb.ContactUser.toObject(includeInstance, f),
    adderid: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    hash: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateTeamMemberAdded}
 */
proto.msg.UpdateTeamMemberAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateTeamMemberAdded;
  return proto.msg.UpdateTeamMemberAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateTeamMemberAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateTeamMemberAdded}
 */
proto.msg.UpdateTeamMemberAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 2:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new core_types_pb.ContactUser;
      reader.readMessage(value,core_types_pb.ContactUser.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAdderid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateTeamMemberAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateTeamMemberAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateTeamMemberAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamMemberAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_types_pb.ContactUser.serializeBinaryToWriter
    );
  }
  f = message.getAdderid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getHash();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateTeamMemberAdded.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
 */
proto.msg.UpdateTeamMemberAdded.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateTeamMemberAdded.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
 */
proto.msg.UpdateTeamMemberAdded.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 1;
 * @return {string}
 */
proto.msg.UpdateTeamMemberAdded.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
 */
proto.msg.UpdateTeamMemberAdded.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional User User = 2;
 * @return {?proto.msg.User}
 */
proto.msg.UpdateTeamMemberAdded.prototype.getUser = function() {
  return /** @type{?proto.msg.User} */ (
    jspb.Message.getWrapperField(this, core_types_pb.User, 2));
};


/**
 * @param {?proto.msg.User|undefined} value
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
*/
proto.msg.UpdateTeamMemberAdded.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
 */
proto.msg.UpdateTeamMemberAdded.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateTeamMemberAdded.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ContactUser Contact = 3;
 * @return {?proto.msg.ContactUser}
 */
proto.msg.UpdateTeamMemberAdded.prototype.getContact = function() {
  return /** @type{?proto.msg.ContactUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.ContactUser, 3));
};


/**
 * @param {?proto.msg.ContactUser|undefined} value
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
*/
proto.msg.UpdateTeamMemberAdded.prototype.setContact = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
 */
proto.msg.UpdateTeamMemberAdded.prototype.clearContact = function() {
  return this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateTeamMemberAdded.prototype.hasContact = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 AdderID = 4;
 * @return {string}
 */
proto.msg.UpdateTeamMemberAdded.prototype.getAdderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
 */
proto.msg.UpdateTeamMemberAdded.prototype.setAdderid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional fixed32 Hash = 5;
 * @return {number}
 */
proto.msg.UpdateTeamMemberAdded.prototype.getHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamMemberAdded} returns this
 */
proto.msg.UpdateTeamMemberAdded.prototype.setHash = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateTeamMemberRemoved.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateTeamMemberRemoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateTeamMemberRemoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamMemberRemoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    removerid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    hash: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateTeamMemberRemoved}
 */
proto.msg.UpdateTeamMemberRemoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateTeamMemberRemoved;
  return proto.msg.UpdateTeamMemberRemoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateTeamMemberRemoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateTeamMemberRemoved}
 */
proto.msg.UpdateTeamMemberRemoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setRemoverid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateTeamMemberRemoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateTeamMemberRemoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateTeamMemberRemoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamMemberRemoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getRemoverid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getHash();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateTeamMemberRemoved.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamMemberRemoved} returns this
 */
proto.msg.UpdateTeamMemberRemoved.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateTeamMemberRemoved.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamMemberRemoved} returns this
 */
proto.msg.UpdateTeamMemberRemoved.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 1;
 * @return {string}
 */
proto.msg.UpdateTeamMemberRemoved.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeamMemberRemoved} returns this
 */
proto.msg.UpdateTeamMemberRemoved.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 UserID = 2;
 * @return {string}
 */
proto.msg.UpdateTeamMemberRemoved.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeamMemberRemoved} returns this
 */
proto.msg.UpdateTeamMemberRemoved.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 RemoverID = 3;
 * @return {string}
 */
proto.msg.UpdateTeamMemberRemoved.prototype.getRemoverid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeamMemberRemoved} returns this
 */
proto.msg.UpdateTeamMemberRemoved.prototype.setRemoverid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional fixed32 Hash = 4;
 * @return {number}
 */
proto.msg.UpdateTeamMemberRemoved.prototype.getHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamMemberRemoved} returns this
 */
proto.msg.UpdateTeamMemberRemoved.prototype.setHash = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateTeamMemberStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateTeamMemberStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateTeamMemberStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamMemberStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    changerid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    admin: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateTeamMemberStatus}
 */
proto.msg.UpdateTeamMemberStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateTeamMemberStatus;
  return proto.msg.UpdateTeamMemberStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateTeamMemberStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateTeamMemberStatus}
 */
proto.msg.UpdateTeamMemberStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setChangerid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateTeamMemberStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateTeamMemberStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateTeamMemberStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamMemberStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getChangerid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getAdmin();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateTeamMemberStatus.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamMemberStatus} returns this
 */
proto.msg.UpdateTeamMemberStatus.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateTeamMemberStatus.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamMemberStatus} returns this
 */
proto.msg.UpdateTeamMemberStatus.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 1;
 * @return {string}
 */
proto.msg.UpdateTeamMemberStatus.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeamMemberStatus} returns this
 */
proto.msg.UpdateTeamMemberStatus.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 ChangerID = 3;
 * @return {string}
 */
proto.msg.UpdateTeamMemberStatus.prototype.getChangerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeamMemberStatus} returns this
 */
proto.msg.UpdateTeamMemberStatus.prototype.setChangerid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional bool Admin = 4;
 * @return {boolean}
 */
proto.msg.UpdateTeamMemberStatus.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateTeamMemberStatus} returns this
 */
proto.msg.UpdateTeamMemberStatus.prototype.setAdmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateTeamPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateTeamPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateTeamPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    photo: (f = msg.getPhoto()) && core_types_pb.TeamPhoto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateTeamPhoto}
 */
proto.msg.UpdateTeamPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateTeamPhoto;
  return proto.msg.UpdateTeamPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateTeamPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateTeamPhoto}
 */
proto.msg.UpdateTeamPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 2:
      var value = new core_types_pb.TeamPhoto;
      reader.readMessage(value,core_types_pb.TeamPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateTeamPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateTeamPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateTeamPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeamPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.TeamPhoto.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateTeamPhoto.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamPhoto} returns this
 */
proto.msg.UpdateTeamPhoto.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateTeamPhoto.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeamPhoto} returns this
 */
proto.msg.UpdateTeamPhoto.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 1;
 * @return {string}
 */
proto.msg.UpdateTeamPhoto.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeamPhoto} returns this
 */
proto.msg.UpdateTeamPhoto.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional TeamPhoto Photo = 2;
 * @return {?proto.msg.TeamPhoto}
 */
proto.msg.UpdateTeamPhoto.prototype.getPhoto = function() {
  return /** @type{?proto.msg.TeamPhoto} */ (
    jspb.Message.getWrapperField(this, core_types_pb.TeamPhoto, 2));
};


/**
 * @param {?proto.msg.TeamPhoto|undefined} value
 * @return {!proto.msg.UpdateTeamPhoto} returns this
*/
proto.msg.UpdateTeamPhoto.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateTeamPhoto} returns this
 */
proto.msg.UpdateTeamPhoto.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateTeamPhoto.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateTeam.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateTeam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateTeam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeam.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateTeam}
 */
proto.msg.UpdateTeam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateTeam;
  return proto.msg.UpdateTeam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateTeam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateTeam}
 */
proto.msg.UpdateTeam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateTeam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateTeam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateTeam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTeam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateTeam.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeam} returns this
 */
proto.msg.UpdateTeam.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateTeam.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateTeam} returns this
 */
proto.msg.UpdateTeam.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 1;
 * @return {string}
 */
proto.msg.UpdateTeam.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeam} returns this
 */
proto.msg.UpdateTeam.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.msg.UpdateTeam.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateTeam} returns this
 */
proto.msg.UpdateTeam.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateCommunityMessage.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateCommunityMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateCommunityMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateCommunityMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCommunityMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getFieldWithDefault(msg, 100, "0"),
    senderid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    receiverid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    body: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdon: jspb.Message.getFieldWithDefault(msg, 4, 0),
    globalmsgid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    core_types_pb.MessageEntity.toObject, includeInstance),
    sendermsgid: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateCommunityMessage}
 */
proto.msg.UpdateCommunityMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateCommunityMessage;
  return proto.msg.UpdateCommunityMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateCommunityMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateCommunityMessage}
 */
proto.msg.UpdateCommunityMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReceiverid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGlobalmsgid(value);
      break;
    case 6:
      var value = new core_types_pb.MessageEntity;
      reader.readMessage(value,core_types_pb.MessageEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendermsgid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateCommunityMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateCommunityMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateCommunityMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCommunityMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      100,
      f
    );
  }
  f = message.getSenderid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getReceiverid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedon();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getGlobalmsgid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      core_types_pb.MessageEntity.serializeBinaryToWriter
    );
  }
  f = message.getSendermsgid();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional int64 TeamID = 100;
 * @return {string}
 */
proto.msg.UpdateCommunityMessage.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateCommunityMessage} returns this
 */
proto.msg.UpdateCommunityMessage.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 100, value);
};


/**
 * optional int64 SenderID = 1;
 * @return {number}
 */
proto.msg.UpdateCommunityMessage.prototype.getSenderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityMessage} returns this
 */
proto.msg.UpdateCommunityMessage.prototype.setSenderid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ReceiverID = 2;
 * @return {number}
 */
proto.msg.UpdateCommunityMessage.prototype.getReceiverid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityMessage} returns this
 */
proto.msg.UpdateCommunityMessage.prototype.setReceiverid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string Body = 3;
 * @return {string}
 */
proto.msg.UpdateCommunityMessage.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateCommunityMessage} returns this
 */
proto.msg.UpdateCommunityMessage.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 CreatedOn = 4;
 * @return {number}
 */
proto.msg.UpdateCommunityMessage.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityMessage} returns this
 */
proto.msg.UpdateCommunityMessage.prototype.setCreatedon = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 GlobalMsgID = 5;
 * @return {number}
 */
proto.msg.UpdateCommunityMessage.prototype.getGlobalmsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityMessage} returns this
 */
proto.msg.UpdateCommunityMessage.prototype.setGlobalmsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated MessageEntity Entities = 6;
 * @return {!Array<!proto.msg.MessageEntity>}
 */
proto.msg.UpdateCommunityMessage.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.msg.MessageEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.MessageEntity, 6));
};


/**
 * @param {!Array<!proto.msg.MessageEntity>} value
 * @return {!proto.msg.UpdateCommunityMessage} returns this
*/
proto.msg.UpdateCommunityMessage.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.MessageEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.UpdateCommunityMessage.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.MessageEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateCommunityMessage} returns this
 */
proto.msg.UpdateCommunityMessage.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional int64 SenderMsgID = 7;
 * @return {number}
 */
proto.msg.UpdateCommunityMessage.prototype.getSendermsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityMessage} returns this
 */
proto.msg.UpdateCommunityMessage.prototype.setSendermsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateCommunityReadOutbox.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateCommunityReadOutbox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateCommunityReadOutbox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCommunityReadOutbox.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getFieldWithDefault(msg, 100, "0"),
    senderid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    receiverid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sendermsgid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateCommunityReadOutbox}
 */
proto.msg.UpdateCommunityReadOutbox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateCommunityReadOutbox;
  return proto.msg.UpdateCommunityReadOutbox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateCommunityReadOutbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateCommunityReadOutbox}
 */
proto.msg.UpdateCommunityReadOutbox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReceiverid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSendermsgid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateCommunityReadOutbox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateCommunityReadOutbox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateCommunityReadOutbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCommunityReadOutbox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      100,
      f
    );
  }
  f = message.getSenderid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getReceiverid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSendermsgid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 TeamID = 100;
 * @return {string}
 */
proto.msg.UpdateCommunityReadOutbox.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateCommunityReadOutbox} returns this
 */
proto.msg.UpdateCommunityReadOutbox.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 100, value);
};


/**
 * optional int64 SenderID = 1;
 * @return {number}
 */
proto.msg.UpdateCommunityReadOutbox.prototype.getSenderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityReadOutbox} returns this
 */
proto.msg.UpdateCommunityReadOutbox.prototype.setSenderid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ReceiverID = 2;
 * @return {number}
 */
proto.msg.UpdateCommunityReadOutbox.prototype.getReceiverid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityReadOutbox} returns this
 */
proto.msg.UpdateCommunityReadOutbox.prototype.setReceiverid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 SenderMsgID = 3;
 * @return {number}
 */
proto.msg.UpdateCommunityReadOutbox.prototype.getSendermsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityReadOutbox} returns this
 */
proto.msg.UpdateCommunityReadOutbox.prototype.setSendermsgid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateCommunityTyping.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateCommunityTyping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateCommunityTyping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCommunityTyping.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: jspb.Message.getFieldWithDefault(msg, 100, "0"),
    senderid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    receiverid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateCommunityTyping}
 */
proto.msg.UpdateCommunityTyping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateCommunityTyping;
  return proto.msg.UpdateCommunityTyping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateCommunityTyping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateCommunityTyping}
 */
proto.msg.UpdateCommunityTyping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReceiverid(value);
      break;
    case 3:
      var value = /** @type {!proto.msg.TypingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateCommunityTyping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateCommunityTyping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateCommunityTyping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCommunityTyping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      100,
      f
    );
  }
  f = message.getSenderid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getReceiverid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 TeamID = 100;
 * @return {string}
 */
proto.msg.UpdateCommunityTyping.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateCommunityTyping} returns this
 */
proto.msg.UpdateCommunityTyping.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 100, value);
};


/**
 * optional int64 SenderID = 1;
 * @return {number}
 */
proto.msg.UpdateCommunityTyping.prototype.getSenderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityTyping} returns this
 */
proto.msg.UpdateCommunityTyping.prototype.setSenderid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ReceiverID = 2;
 * @return {number}
 */
proto.msg.UpdateCommunityTyping.prototype.getReceiverid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCommunityTyping} returns this
 */
proto.msg.UpdateCommunityTyping.prototype.setReceiverid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TypingAction Action = 3;
 * @return {!proto.msg.TypingAction}
 */
proto.msg.UpdateCommunityTyping.prototype.getAction = function() {
  return /** @type {!proto.msg.TypingAction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.msg.TypingAction} value
 * @return {!proto.msg.UpdateCommunityTyping} returns this
 */
proto.msg.UpdateCommunityTyping.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateReaction.repeatedFields_ = [2,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReaction.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    counterList: jspb.Message.toObjectList(msg.getCounterList(),
    core_types_pb.ReactionCounter.toObject, includeInstance),
    teamid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && core_types_pb.User.toObject(includeInstance, f),
    yourreactionsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    reaction: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReaction}
 */
proto.msg.UpdateReaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReaction;
  return proto.msg.UpdateReaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReaction}
 */
proto.msg.UpdateReaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = new core_types_pb.ReactionCounter;
      reader.readMessage(value,core_types_pb.ReactionCounter.deserializeBinaryFromReader);
      msg.addCounter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 4:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 5:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addYourreactions(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCounterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      core_types_pb.ReactionCounter.serializeBinaryToWriter
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getYourreactionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getReaction();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReaction.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReaction.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 MessageID = 1;
 * @return {number}
 */
proto.msg.UpdateReaction.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.setMessageid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ReactionCounter Counter = 2;
 * @return {!Array<!proto.msg.ReactionCounter>}
 */
proto.msg.UpdateReaction.prototype.getCounterList = function() {
  return /** @type{!Array<!proto.msg.ReactionCounter>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.ReactionCounter, 2));
};


/**
 * @param {!Array<!proto.msg.ReactionCounter>} value
 * @return {!proto.msg.UpdateReaction} returns this
*/
proto.msg.UpdateReaction.prototype.setCounterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.ReactionCounter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.ReactionCounter}
 */
proto.msg.UpdateReaction.prototype.addCounter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.ReactionCounter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.clearCounterList = function() {
  return this.setCounterList([]);
};


/**
 * optional int64 TeamID = 3;
 * @return {string}
 */
proto.msg.UpdateReaction.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional Peer Peer = 4;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateReaction.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 4));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateReaction} returns this
*/
proto.msg.UpdateReaction.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReaction.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional User Sender = 5;
 * @return {?proto.msg.User}
 */
proto.msg.UpdateReaction.prototype.getSender = function() {
  return /** @type{?proto.msg.User} */ (
    jspb.Message.getWrapperField(this, core_types_pb.User, 5));
};


/**
 * @param {?proto.msg.User|undefined} value
 * @return {!proto.msg.UpdateReaction} returns this
*/
proto.msg.UpdateReaction.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.clearSender = function() {
  return this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReaction.prototype.hasSender = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string YourReactions = 6;
 * @return {!Array<string>}
 */
proto.msg.UpdateReaction.prototype.getYourreactionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.setYourreactionsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.addYourreactions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.clearYourreactionsList = function() {
  return this.setYourreactionsList([]);
};


/**
 * optional string Reaction = 7;
 * @return {string}
 */
proto.msg.UpdateReaction.prototype.getReaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateReaction} returns this
 */
proto.msg.UpdateReaction.prototype.setReaction = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateCalendarEventAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateCalendarEventAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateCalendarEventAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCalendarEventAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    event: (f = msg.getEvent()) && calendar_pb.CalendarEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateCalendarEventAdded}
 */
proto.msg.UpdateCalendarEventAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateCalendarEventAdded;
  return proto.msg.UpdateCalendarEventAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateCalendarEventAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateCalendarEventAdded}
 */
proto.msg.UpdateCalendarEventAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new calendar_pb.CalendarEvent;
      reader.readMessage(value,calendar_pb.CalendarEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateCalendarEventAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateCalendarEventAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateCalendarEventAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCalendarEventAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      calendar_pb.CalendarEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateCalendarEventAdded.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCalendarEventAdded} returns this
 */
proto.msg.UpdateCalendarEventAdded.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateCalendarEventAdded.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCalendarEventAdded} returns this
 */
proto.msg.UpdateCalendarEventAdded.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional CalendarEvent Event = 1;
 * @return {?proto.msg.CalendarEvent}
 */
proto.msg.UpdateCalendarEventAdded.prototype.getEvent = function() {
  return /** @type{?proto.msg.CalendarEvent} */ (
    jspb.Message.getWrapperField(this, calendar_pb.CalendarEvent, 1));
};


/**
 * @param {?proto.msg.CalendarEvent|undefined} value
 * @return {!proto.msg.UpdateCalendarEventAdded} returns this
*/
proto.msg.UpdateCalendarEventAdded.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateCalendarEventAdded} returns this
 */
proto.msg.UpdateCalendarEventAdded.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateCalendarEventAdded.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateCalendarEventRemoved.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateCalendarEventRemoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateCalendarEventRemoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCalendarEventRemoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    eventid: jspb.Message.getFieldWithDefault(msg, 102, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateCalendarEventRemoved}
 */
proto.msg.UpdateCalendarEventRemoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateCalendarEventRemoved;
  return proto.msg.UpdateCalendarEventRemoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateCalendarEventRemoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateCalendarEventRemoved}
 */
proto.msg.UpdateCalendarEventRemoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setEventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateCalendarEventRemoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateCalendarEventRemoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateCalendarEventRemoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCalendarEventRemoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getEventid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateCalendarEventRemoved.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCalendarEventRemoved} returns this
 */
proto.msg.UpdateCalendarEventRemoved.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateCalendarEventRemoved.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCalendarEventRemoved} returns this
 */
proto.msg.UpdateCalendarEventRemoved.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 EventID = 102;
 * @return {string}
 */
proto.msg.UpdateCalendarEventRemoved.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateCalendarEventRemoved} returns this
 */
proto.msg.UpdateCalendarEventRemoved.prototype.setEventid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateCalendarEventEdited.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateCalendarEventEdited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateCalendarEventEdited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCalendarEventEdited.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    event: (f = msg.getEvent()) && calendar_pb.CalendarEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateCalendarEventEdited}
 */
proto.msg.UpdateCalendarEventEdited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateCalendarEventEdited;
  return proto.msg.UpdateCalendarEventEdited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateCalendarEventEdited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateCalendarEventEdited}
 */
proto.msg.UpdateCalendarEventEdited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new calendar_pb.CalendarEvent;
      reader.readMessage(value,calendar_pb.CalendarEvent.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateCalendarEventEdited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateCalendarEventEdited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateCalendarEventEdited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateCalendarEventEdited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      calendar_pb.CalendarEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateCalendarEventEdited.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCalendarEventEdited} returns this
 */
proto.msg.UpdateCalendarEventEdited.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateCalendarEventEdited.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateCalendarEventEdited} returns this
 */
proto.msg.UpdateCalendarEventEdited.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional CalendarEvent Event = 1;
 * @return {?proto.msg.CalendarEvent}
 */
proto.msg.UpdateCalendarEventEdited.prototype.getEvent = function() {
  return /** @type{?proto.msg.CalendarEvent} */ (
    jspb.Message.getWrapperField(this, calendar_pb.CalendarEvent, 1));
};


/**
 * @param {?proto.msg.CalendarEvent|undefined} value
 * @return {!proto.msg.UpdateCalendarEventEdited} returns this
*/
proto.msg.UpdateCalendarEventEdited.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateCalendarEventEdited} returns this
 */
proto.msg.UpdateCalendarEventEdited.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateCalendarEventEdited.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateRedirect.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateRedirect.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateRedirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateRedirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateRedirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    redirectsList: jspb.Message.toObjectList(msg.getRedirectsList(),
    proto.msg.ClientRedirect.toObject, includeInstance),
    empty: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateRedirect}
 */
proto.msg.UpdateRedirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateRedirect;
  return proto.msg.UpdateRedirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateRedirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateRedirect}
 */
proto.msg.UpdateRedirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new proto.msg.ClientRedirect;
      reader.readMessage(value,proto.msg.ClientRedirect.deserializeBinaryFromReader);
      msg.addRedirects(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateRedirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateRedirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateRedirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateRedirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getRedirectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.ClientRedirect.serializeBinaryToWriter
    );
  }
  f = message.getEmpty();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateRedirect.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateRedirect} returns this
 */
proto.msg.UpdateRedirect.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateRedirect.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateRedirect} returns this
 */
proto.msg.UpdateRedirect.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * repeated ClientRedirect Redirects = 1;
 * @return {!Array<!proto.msg.ClientRedirect>}
 */
proto.msg.UpdateRedirect.prototype.getRedirectsList = function() {
  return /** @type{!Array<!proto.msg.ClientRedirect>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.ClientRedirect, 1));
};


/**
 * @param {!Array<!proto.msg.ClientRedirect>} value
 * @return {!proto.msg.UpdateRedirect} returns this
*/
proto.msg.UpdateRedirect.prototype.setRedirectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.ClientRedirect=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.ClientRedirect}
 */
proto.msg.UpdateRedirect.prototype.addRedirects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.ClientRedirect, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateRedirect} returns this
 */
proto.msg.UpdateRedirect.prototype.clearRedirectsList = function() {
  return this.setRedirectsList([]);
};


/**
 * optional bool Empty = 2;
 * @return {boolean}
 */
proto.msg.UpdateRedirect.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateRedirect} returns this
 */
proto.msg.UpdateRedirect.prototype.setEmpty = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.ClientRedirect.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.ClientRedirect.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.ClientRedirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.ClientRedirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ClientRedirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostport: jspb.Message.getFieldWithDefault(msg, 1, ""),
    permanent: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    target: jspb.Message.getFieldWithDefault(msg, 3, 0),
    alternativesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.ClientRedirect}
 */
proto.msg.ClientRedirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.ClientRedirect;
  return proto.msg.ClientRedirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.ClientRedirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.ClientRedirect}
 */
proto.msg.ClientRedirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostport(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPermanent(value);
      break;
    case 3:
      var value = /** @type {!proto.msg.RedirectTarget} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAlternatives(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.ClientRedirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.ClientRedirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.ClientRedirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ClientRedirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostport();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPermanent();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAlternativesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string HostPort = 1;
 * @return {string}
 */
proto.msg.ClientRedirect.prototype.getHostport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.ClientRedirect} returns this
 */
proto.msg.ClientRedirect.prototype.setHostport = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool Permanent = 2;
 * @return {boolean}
 */
proto.msg.ClientRedirect.prototype.getPermanent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.ClientRedirect} returns this
 */
proto.msg.ClientRedirect.prototype.setPermanent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional RedirectTarget Target = 3;
 * @return {!proto.msg.RedirectTarget}
 */
proto.msg.ClientRedirect.prototype.getTarget = function() {
  return /** @type {!proto.msg.RedirectTarget} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.msg.RedirectTarget} value
 * @return {!proto.msg.ClientRedirect} returns this
 */
proto.msg.ClientRedirect.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated string Alternatives = 4;
 * @return {!Array<string>}
 */
proto.msg.ClientRedirect.prototype.getAlternativesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.ClientRedirect} returns this
 */
proto.msg.ClientRedirect.prototype.setAlternativesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.ClientRedirect} returns this
 */
proto.msg.ClientRedirect.prototype.addAlternatives = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.ClientRedirect} returns this
 */
proto.msg.ClientRedirect.prototype.clearAlternativesList = function() {
  return this.setAlternativesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdatePhoneCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdatePhoneCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdatePhoneCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdatePhoneCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    peerid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    peertype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    callid: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    userid: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    accesshash: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    action: jspb.Message.getFieldWithDefault(msg, 7, 0),
    actiondata: msg.getActiondata_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdatePhoneCall}
 */
proto.msg.UpdatePhoneCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdatePhoneCall;
  return proto.msg.UpdatePhoneCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdatePhoneCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdatePhoneCall}
 */
proto.msg.UpdatePhoneCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 7:
      var value = /** @type {!proto.msg.PhoneCallAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActiondata(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdatePhoneCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdatePhoneCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdatePhoneCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdatePhoneCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPeerid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getPeertype();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getUserid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getAccesshash();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(
      6,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getActiondata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdatePhoneCall.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 TeamID = 1;
 * @return {string}
 */
proto.msg.UpdatePhoneCall.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 PeerID = 2;
 * @return {string}
 */
proto.msg.UpdatePhoneCall.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setPeerid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int32 PeerType = 3;
 * @return {number}
 */
proto.msg.UpdatePhoneCall.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setPeertype = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 CallID = 4;
 * @return {string}
 */
proto.msg.UpdatePhoneCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional int64 UserID = 5;
 * @return {string}
 */
proto.msg.UpdatePhoneCall.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional fixed64 AccessHash = 6;
 * @return {string}
 */
proto.msg.UpdatePhoneCall.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setAccesshash = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional PhoneCallAction Action = 7;
 * @return {!proto.msg.PhoneCallAction}
 */
proto.msg.UpdatePhoneCall.prototype.getAction = function() {
  return /** @type {!proto.msg.PhoneCallAction} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.msg.PhoneCallAction} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional bytes ActionData = 8;
 * @return {!(string|Uint8Array)}
 */
proto.msg.UpdatePhoneCall.prototype.getActiondata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes ActionData = 8;
 * This is a type-conversion wrapper around `getActiondata()`
 * @return {string}
 */
proto.msg.UpdatePhoneCall.prototype.getActiondata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActiondata()));
};


/**
 * optional bytes ActionData = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActiondata()`
 * @return {!Uint8Array}
 */
proto.msg.UpdatePhoneCall.prototype.getActiondata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActiondata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setActiondata = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional int64 Timestamp = 9;
 * @return {number}
 */
proto.msg.UpdatePhoneCall.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdatePhoneCall} returns this
 */
proto.msg.UpdatePhoneCall.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdatePhoneCallStarted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdatePhoneCallStarted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdatePhoneCallStarted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdatePhoneCallStarted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    callid: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdatePhoneCallStarted}
 */
proto.msg.UpdatePhoneCallStarted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdatePhoneCallStarted;
  return proto.msg.UpdatePhoneCallStarted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdatePhoneCallStarted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdatePhoneCallStarted}
 */
proto.msg.UpdatePhoneCallStarted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdatePhoneCallStarted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdatePhoneCallStarted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdatePhoneCallStarted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdatePhoneCallStarted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdatePhoneCallStarted.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdatePhoneCallStarted} returns this
 */
proto.msg.UpdatePhoneCallStarted.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdatePhoneCallStarted.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdatePhoneCallStarted} returns this
 */
proto.msg.UpdatePhoneCallStarted.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdatePhoneCallStarted.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdatePhoneCallStarted} returns this
 */
proto.msg.UpdatePhoneCallStarted.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdatePhoneCallStarted.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdatePhoneCallStarted} returns this
*/
proto.msg.UpdatePhoneCallStarted.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdatePhoneCallStarted} returns this
 */
proto.msg.UpdatePhoneCallStarted.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdatePhoneCallStarted.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 CallId = 2;
 * @return {string}
 */
proto.msg.UpdatePhoneCallStarted.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdatePhoneCallStarted} returns this
 */
proto.msg.UpdatePhoneCallStarted.prototype.setCallid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdatePhoneCallEnded.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdatePhoneCallEnded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdatePhoneCallEnded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdatePhoneCallEnded.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updateid: jspb.Message.getFieldWithDefault(msg, 101, 0),
    teamid: jspb.Message.getFieldWithDefault(msg, 102, "0"),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdatePhoneCallEnded}
 */
proto.msg.UpdatePhoneCallEnded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdatePhoneCallEnded;
  return proto.msg.UpdatePhoneCallEnded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdatePhoneCallEnded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdatePhoneCallEnded}
 */
proto.msg.UpdatePhoneCallEnded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 102:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdatePhoneCallEnded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdatePhoneCallEnded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdatePhoneCallEnded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdatePhoneCallEnded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUcount();
  if (f !== 0) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = message.getUpdateid();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getTeamid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      102,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdatePhoneCallEnded.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdatePhoneCallEnded} returns this
 */
proto.msg.UpdatePhoneCallEnded.prototype.setUcount = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdatePhoneCallEnded.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdatePhoneCallEnded} returns this
 */
proto.msg.UpdatePhoneCallEnded.prototype.setUpdateid = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 TeamID = 102;
 * @return {string}
 */
proto.msg.UpdatePhoneCallEnded.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 102, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdatePhoneCallEnded} returns this
 */
proto.msg.UpdatePhoneCallEnded.prototype.setTeamid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 102, value);
};


/**
 * optional Peer Peer = 1;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdatePhoneCallEnded.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdatePhoneCallEnded} returns this
*/
proto.msg.UpdatePhoneCallEnded.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdatePhoneCallEnded} returns this
 */
proto.msg.UpdatePhoneCallEnded.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdatePhoneCallEnded.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.msg.RedirectTarget = {
  REDIRECTTARGETRPC: 0,
  REDIRECTTARGETFILE: 1,
  REDIRECTTARGETPROXY: 2,
  REDIRECTTARGETRESERVED1: 3,
  REDIRECTTARGETRESERVED2: 4,
  REDIRECTTARGETRESERVED3: 5,
  REDIRECTTARGETRESERVED4: 6
};

goog.object.extend(exports, proto.msg);
