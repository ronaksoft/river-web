/* eslint-disable */
// source: chat.labels.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.object.extend(proto, core_types_pb);
goog.exportSymbol('proto.msg.LabelItems', null, global);
goog.exportSymbol('proto.msg.LabelsAddToMessage', null, global);
goog.exportSymbol('proto.msg.LabelsCreate', null, global);
goog.exportSymbol('proto.msg.LabelsDelete', null, global);
goog.exportSymbol('proto.msg.LabelsEdit', null, global);
goog.exportSymbol('proto.msg.LabelsGet', null, global);
goog.exportSymbol('proto.msg.LabelsListItems', null, global);
goog.exportSymbol('proto.msg.LabelsRemoveFromMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.LabelsCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelsCreate.displayName = 'proto.msg.LabelsCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsEdit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.LabelsEdit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelsEdit.displayName = 'proto.msg.LabelsEdit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsDelete.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelsDelete.displayName = 'proto.msg.LabelsDelete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.LabelsGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelsGet.displayName = 'proto.msg.LabelsGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsAddToMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsAddToMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsAddToMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelsAddToMessage.displayName = 'proto.msg.LabelsAddToMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsRemoveFromMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsRemoveFromMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsRemoveFromMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelsRemoveFromMessage.displayName = 'proto.msg.LabelsRemoveFromMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsListItems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.LabelsListItems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelsListItems.displayName = 'proto.msg.LabelsListItems';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelItems = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelItems.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelItems, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelItems.displayName = 'proto.msg.LabelItems';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    colour: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsCreate}
 */
proto.msg.LabelsCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsCreate;
  return proto.msg.LabelsCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsCreate}
 */
proto.msg.LabelsCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColour(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRandomid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColour();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 RandomID = 1;
 * @return {number}
 */
proto.msg.LabelsCreate.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.LabelsCreate} returns this
 */
proto.msg.LabelsCreate.prototype.setRandomid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.msg.LabelsCreate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.LabelsCreate} returns this
 */
proto.msg.LabelsCreate.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Colour = 3;
 * @return {string}
 */
proto.msg.LabelsCreate.prototype.getColour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.LabelsCreate} returns this
 */
proto.msg.LabelsCreate.prototype.setColour = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsEdit.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsEdit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsEdit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsEdit.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    colour: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsEdit}
 */
proto.msg.LabelsEdit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsEdit;
  return proto.msg.LabelsEdit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsEdit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsEdit}
 */
proto.msg.LabelsEdit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabelid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColour(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsEdit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsEdit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsEdit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsEdit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getColour();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 LabelID = 1;
 * @return {number}
 */
proto.msg.LabelsEdit.prototype.getLabelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.LabelsEdit} returns this
 */
proto.msg.LabelsEdit.prototype.setLabelid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.msg.LabelsEdit.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.LabelsEdit} returns this
 */
proto.msg.LabelsEdit.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Colour = 3;
 * @return {string}
 */
proto.msg.LabelsEdit.prototype.getColour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.LabelsEdit} returns this
 */
proto.msg.LabelsEdit.prototype.setColour = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsDelete.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsDelete.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsDelete}
 */
proto.msg.LabelsDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsDelete;
  return proto.msg.LabelsDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsDelete}
 */
proto.msg.LabelsDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setLabelidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 LabelIDs = 1;
 * @return {!Array<number>}
 */
proto.msg.LabelsDelete.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.LabelsDelete} returns this
 */
proto.msg.LabelsDelete.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.LabelsDelete} returns this
 */
proto.msg.LabelsDelete.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelsDelete} returns this
 */
proto.msg.LabelsDelete.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsGet.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsGet.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsGet}
 */
proto.msg.LabelsGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsGet;
  return proto.msg.LabelsGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsGet}
 */
proto.msg.LabelsGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsAddToMessage.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsAddToMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsAddToMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsAddToMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsAddToMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsAddToMessage}
 */
proto.msg.LabelsAddToMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsAddToMessage;
  return proto.msg.LabelsAddToMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsAddToMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsAddToMessage}
 */
proto.msg.LabelsAddToMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setLabelidsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMessageidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsAddToMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsAddToMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsAddToMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsAddToMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.LabelsAddToMessage.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.LabelsAddToMessage} returns this
*/
proto.msg.LabelsAddToMessage.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.LabelsAddToMessage} returns this
 */
proto.msg.LabelsAddToMessage.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.LabelsAddToMessage.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 LabelIDs = 3;
 * @return {!Array<number>}
 */
proto.msg.LabelsAddToMessage.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.LabelsAddToMessage} returns this
 */
proto.msg.LabelsAddToMessage.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.LabelsAddToMessage} returns this
 */
proto.msg.LabelsAddToMessage.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelsAddToMessage} returns this
 */
proto.msg.LabelsAddToMessage.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};


/**
 * repeated int64 MessageIDs = 4;
 * @return {!Array<number>}
 */
proto.msg.LabelsAddToMessage.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.LabelsAddToMessage} returns this
 */
proto.msg.LabelsAddToMessage.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.LabelsAddToMessage} returns this
 */
proto.msg.LabelsAddToMessage.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelsAddToMessage} returns this
 */
proto.msg.LabelsAddToMessage.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsRemoveFromMessage.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsRemoveFromMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsRemoveFromMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsRemoveFromMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsRemoveFromMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsRemoveFromMessage}
 */
proto.msg.LabelsRemoveFromMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsRemoveFromMessage;
  return proto.msg.LabelsRemoveFromMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsRemoveFromMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsRemoveFromMessage}
 */
proto.msg.LabelsRemoveFromMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setLabelidsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMessageidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsRemoveFromMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsRemoveFromMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsRemoveFromMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsRemoveFromMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      4,
      f
    );
  }
};


/**
 * optional InputPeer Peer = 1;
 * @return {?proto.msg.InputPeer}
 */
proto.msg.LabelsRemoveFromMessage.prototype.getPeer = function() {
  return /** @type{?proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1));
};


/**
 * @param {?proto.msg.InputPeer|undefined} value
 * @return {!proto.msg.LabelsRemoveFromMessage} returns this
*/
proto.msg.LabelsRemoveFromMessage.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.LabelsRemoveFromMessage} returns this
 */
proto.msg.LabelsRemoveFromMessage.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.LabelsRemoveFromMessage.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 LabelIDs = 3;
 * @return {!Array<number>}
 */
proto.msg.LabelsRemoveFromMessage.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.LabelsRemoveFromMessage} returns this
 */
proto.msg.LabelsRemoveFromMessage.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.LabelsRemoveFromMessage} returns this
 */
proto.msg.LabelsRemoveFromMessage.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelsRemoveFromMessage} returns this
 */
proto.msg.LabelsRemoveFromMessage.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};


/**
 * repeated int64 MessageIDs = 4;
 * @return {!Array<number>}
 */
proto.msg.LabelsRemoveFromMessage.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.LabelsRemoveFromMessage} returns this
 */
proto.msg.LabelsRemoveFromMessage.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.LabelsRemoveFromMessage} returns this
 */
proto.msg.LabelsRemoveFromMessage.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelsRemoveFromMessage} returns this
 */
proto.msg.LabelsRemoveFromMessage.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsListItems.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsListItems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsListItems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsListItems.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsListItems}
 */
proto.msg.LabelsListItems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsListItems;
  return proto.msg.LabelsListItems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsListItems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsListItems}
 */
proto.msg.LabelsListItems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabelid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsListItems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsListItems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsListItems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsListItems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMinid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMaxid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 LabelID = 1;
 * @return {number}
 */
proto.msg.LabelsListItems.prototype.getLabelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.LabelsListItems} returns this
 */
proto.msg.LabelsListItems.prototype.setLabelid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 MinID = 2;
 * @return {number}
 */
proto.msg.LabelsListItems.prototype.getMinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.LabelsListItems} returns this
 */
proto.msg.LabelsListItems.prototype.setMinid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 MaxID = 3;
 * @return {number}
 */
proto.msg.LabelsListItems.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.LabelsListItems} returns this
 */
proto.msg.LabelsListItems.prototype.setMaxid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 Limit = 4;
 * @return {number}
 */
proto.msg.LabelsListItems.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.LabelsListItems} returns this
 */
proto.msg.LabelsListItems.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelItems.repeatedFields_ = [2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelItems.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelItems.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelItems} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelItems.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    core_types_pb.UserMessage.toObject, includeInstance),
    dialogsList: jspb.Message.toObjectList(msg.getDialogsList(),
    core_types_pb.Dialog.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    core_types_pb.User.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    core_types_pb.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelItems}
 */
proto.msg.LabelItems.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelItems;
  return proto.msg.LabelItems.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelItems} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelItems}
 */
proto.msg.LabelItems.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabelid(value);
      break;
    case 2:
      var value = new core_types_pb.UserMessage;
      reader.readMessage(value,core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 3:
      var value = new core_types_pb.Dialog;
      reader.readMessage(value,core_types_pb.Dialog.deserializeBinaryFromReader);
      msg.addDialogs(value);
      break;
    case 4:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 5:
      var value = new core_types_pb.Group;
      reader.readMessage(value,core_types_pb.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelItems.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelItems.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelItems} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelItems.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
  f = message.getDialogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.Dialog.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 LabelID = 1;
 * @return {number}
 */
proto.msg.LabelItems.prototype.getLabelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.LabelItems} returns this
 */
proto.msg.LabelItems.prototype.setLabelid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated UserMessage Messages = 2;
 * @return {!Array<!proto.msg.UserMessage>}
 */
proto.msg.LabelItems.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.msg.UserMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.UserMessage, 2));
};


/**
 * @param {!Array<!proto.msg.UserMessage>} value
 * @return {!proto.msg.LabelItems} returns this
*/
proto.msg.LabelItems.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.UserMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.UserMessage}
 */
proto.msg.LabelItems.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.UserMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelItems} returns this
 */
proto.msg.LabelItems.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * repeated Dialog Dialogs = 3;
 * @return {!Array<!proto.msg.Dialog>}
 */
proto.msg.LabelItems.prototype.getDialogsList = function() {
  return /** @type{!Array<!proto.msg.Dialog>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Dialog, 3));
};


/**
 * @param {!Array<!proto.msg.Dialog>} value
 * @return {!proto.msg.LabelItems} returns this
*/
proto.msg.LabelItems.prototype.setDialogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.Dialog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Dialog}
 */
proto.msg.LabelItems.prototype.addDialogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.Dialog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelItems} returns this
 */
proto.msg.LabelItems.prototype.clearDialogsList = function() {
  return this.setDialogsList([]);
};


/**
 * repeated User Users = 4;
 * @return {!Array<!proto.msg.User>}
 */
proto.msg.LabelItems.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.User, 4));
};


/**
 * @param {!Array<!proto.msg.User>} value
 * @return {!proto.msg.LabelItems} returns this
*/
proto.msg.LabelItems.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.LabelItems.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelItems} returns this
 */
proto.msg.LabelItems.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated Group Groups = 5;
 * @return {!Array<!proto.msg.Group>}
 */
proto.msg.LabelItems.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.msg.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Group, 5));
};


/**
 * @param {!Array<!proto.msg.Group>} value
 * @return {!proto.msg.LabelItems} returns this
*/
proto.msg.LabelItems.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Group}
 */
proto.msg.LabelItems.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelItems} returns this
 */
proto.msg.LabelItems.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


goog.object.extend(exports, proto.msg);
